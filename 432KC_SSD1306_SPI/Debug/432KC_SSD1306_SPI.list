
432KC_SSD1306_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a78c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  0800a920  0800a920  0001a920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5a8  0800b5a8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5a8  0800b5a8  0001b5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5b0  0800b5b0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5b0  0800b5b0  0001b5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5b4  0800b5b4  0001b5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b5b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  200001f0  0800b7a8  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  0800b7a8  00020860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cec1  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037cc  00000000  00000000  0003d0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  000408b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001480  00000000  00000000  00041ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023cb9  00000000  00000000  00043320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001974f  00000000  00000000  00066fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1413  00000000  00000000  00080728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151b3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000704c  00000000  00000000  00151b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a904 	.word	0x0800a904

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800a904 	.word	0x0800a904

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <Init_ADXL345>:

#include "main.h"
#include "ADXL345.h"

void	Init_ADXL345()
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af02      	add	r7, sp, #8
	  uint8_t regVal[2];

	  // Measurement mode
	  regVal[0] = ADXL345_POWER_CTL; regVal[1] = ADXL345_MEASURE;
 8000f46:	232d      	movs	r3, #45	; 0x2d
 8000f48:	713b      	strb	r3, [r7, #4]
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)ADXL345,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8000f4e:	bf00      	nop
 8000f50:	1d3a      	adds	r2, r7, #4
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2302      	movs	r3, #2
 8000f5a:	21a6      	movs	r1, #166	; 0xa6
 8000f5c:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <Init_ADXL345+0x78>)
 8000f5e:	f002 fa4f 	bl	8003400 <HAL_I2C_Master_Transmit>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f3      	bne.n	8000f50 <Init_ADXL345+0x10>

	  // Data ready
	  regVal[0] = ADXL345_INT_ENABLE; regVal[1] = 0x80;
 8000f68:	232e      	movs	r3, #46	; 0x2e
 8000f6a:	713b      	strb	r3, [r7, #4]
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)ADXL345,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8000f70:	bf00      	nop
 8000f72:	1d3a      	adds	r2, r7, #4
 8000f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	21a6      	movs	r1, #166	; 0xa6
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <Init_ADXL345+0x78>)
 8000f80:	f002 fa3e 	bl	8003400 <HAL_I2C_Master_Transmit>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1f3      	bne.n	8000f72 <Init_ADXL345+0x32>


	  // Full resolution +-16g
	  regVal[0] = ADXL345_DATA_FORMAT; regVal[1] = ADXL345_BW_RATE_200HZ;
 8000f8a:	2331      	movs	r3, #49	; 0x31
 8000f8c:	713b      	strb	r3, [r7, #4]
 8000f8e:	230b      	movs	r3, #11
 8000f90:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)ADXL345,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8000f92:	bf00      	nop
 8000f94:	1d3a      	adds	r2, r7, #4
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	21a6      	movs	r1, #166	; 0xa6
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <Init_ADXL345+0x78>)
 8000fa2:	f002 fa2d 	bl	8003400 <HAL_I2C_Master_Transmit>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f3      	bne.n	8000f94 <Init_ADXL345+0x54>
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000684 	.word	0x20000684

08000fbc <ADXL345_Read>:
	  while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)ADXL345,(uint8_t *)&am,1,1000)!=HAL_OK);
	  return am;
}

void	ADXL345_Read(ACCDATA *G)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	6078      	str	r0, [r7, #4]
	  uint8_t am;
	  uint8_t rdata[6]={0,0,0,0,0,0};
 8000fc4:	4a22      	ldr	r2, [pc, #136]	; (8001050 <ADXL345_Read+0x94>)
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fce:	6018      	str	r0, [r3, #0]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	8019      	strh	r1, [r3, #0]

	  am = ADXL345_DATAX0;
 8000fd4:	2332      	movs	r3, #50	; 0x32
 8000fd6:	73fb      	strb	r3, [r7, #15]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)ADXL345,(uint8_t *)&am,1,1000)!=HAL_OK);
 8000fd8:	bf00      	nop
 8000fda:	f107 020f 	add.w	r2, r7, #15
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	21a6      	movs	r1, #166	; 0xa6
 8000fe8:	481a      	ldr	r0, [pc, #104]	; (8001054 <ADXL345_Read+0x98>)
 8000fea:	f002 fa09 	bl	8003400 <HAL_I2C_Master_Transmit>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f2      	bne.n	8000fda <ADXL345_Read+0x1e>
	  while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)ADXL345,(uint8_t *)&rdata,6,1000)!=HAL_OK);
 8000ff4:	bf00      	nop
 8000ff6:	f107 0208 	add.w	r2, r7, #8
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2306      	movs	r3, #6
 8001002:	21a6      	movs	r1, #166	; 0xa6
 8001004:	4813      	ldr	r0, [pc, #76]	; (8001054 <ADXL345_Read+0x98>)
 8001006:	f002 faef 	bl	80035e8 <HAL_I2C_Master_Receive>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f2      	bne.n	8000ff6 <ADXL345_Read+0x3a>
	  while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)ADXL345,(uint8_t *)&rdata[4],1,1000)!=HAL_OK);
	  am = ADXL345_DATAZ1;
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)ADXL345,(uint8_t *)&am,1,1000)!=HAL_OK);
	  while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)ADXL345,(uint8_t *)&rdata[5],1,1000)!=HAL_OK);
	  */
	  G->x = (int16_t)(rdata[0]<<8 | rdata[1]);
 8001010:	7a3b      	ldrb	r3, [r7, #8]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21a      	sxth	r2, r3
 8001016:	7a7b      	ldrb	r3, [r7, #9]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b21a      	sxth	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	801a      	strh	r2, [r3, #0]
	  G->y = (int16_t)(rdata[2]<<8 | rdata[3]);
 8001022:	7abb      	ldrb	r3, [r7, #10]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21a      	sxth	r2, r3
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	b21a      	sxth	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	805a      	strh	r2, [r3, #2]
	  G->z = (int16_t)(rdata[4]<<8 | rdata[5]);
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	7b7b      	ldrb	r3, [r7, #13]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21a      	sxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	809a      	strh	r2, [r3, #4]
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	0800a920 	.word	0x0800a920
 8001054:	20000684 	.word	0x20000684

08001058 <BMP180_GetTempC>:

	return HAL_OK;
}

float BMP180_GetTempC()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af02      	add	r7, sp, #8
	float 		tempC=0.0;;
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
	int32_t 	x1,x2,BB5;
	uint8_t 	regVal[2]={0,},tmp[2]={0,};
 8001064:	2300      	movs	r3, #0
 8001066:	80bb      	strh	r3, [r7, #4]
 8001068:	2300      	movs	r3, #0
 800106a:	803b      	strh	r3, [r7, #0]

	regVal[0]=0xF4; regVal[1]=0x2E;
 800106c:	23f4      	movs	r3, #244	; 0xf4
 800106e:	713b      	strb	r3, [r7, #4]
 8001070:	232e      	movs	r3, #46	; 0x2e
 8001072:	717b      	strb	r3, [r7, #5]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)BMP180_WRITE_ADDRESS,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8001074:	bf00      	nop
 8001076:	1d3a      	adds	r2, r7, #4
 8001078:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2302      	movs	r3, #2
 8001080:	21ee      	movs	r1, #238	; 0xee
 8001082:	4835      	ldr	r0, [pc, #212]	; (8001158 <BMP180_GetTempC+0x100>)
 8001084:	f002 f9bc 	bl	8003400 <HAL_I2C_Master_Transmit>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f3      	bne.n	8001076 <BMP180_GetTempC+0x1e>
	HAL_Delay(5);
 800108e:	2005      	movs	r0, #5
 8001090:	f001 fcc6 	bl	8002a20 <HAL_Delay>
	regVal[0]=0xF6; regVal[1]=0x00;
 8001094:	23f6      	movs	r3, #246	; 0xf6
 8001096:	713b      	strb	r3, [r7, #4]
 8001098:	2300      	movs	r3, #0
 800109a:	717b      	strb	r3, [r7, #5]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)BMP180_WRITE_ADDRESS,(uint8_t *)regVal,2,1000)!=HAL_OK);
 800109c:	bf00      	nop
 800109e:	1d3a      	adds	r2, r7, #4
 80010a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2302      	movs	r3, #2
 80010a8:	21ee      	movs	r1, #238	; 0xee
 80010aa:	482b      	ldr	r0, [pc, #172]	; (8001158 <BMP180_GetTempC+0x100>)
 80010ac:	f002 f9a8 	bl	8003400 <HAL_I2C_Master_Transmit>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f3      	bne.n	800109e <BMP180_GetTempC+0x46>
	while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)BMP180_READ_ADDRESS,(uint8_t *)tmp,2,1000)!=HAL_OK);
 80010b6:	bf00      	nop
 80010b8:	463a      	mov	r2, r7
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2302      	movs	r3, #2
 80010c2:	21ef      	movs	r1, #239	; 0xef
 80010c4:	4824      	ldr	r0, [pc, #144]	; (8001158 <BMP180_GetTempC+0x100>)
 80010c6:	f002 fa8f 	bl	80035e8 <HAL_I2C_Master_Receive>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f3      	bne.n	80010b8 <BMP180_GetTempC+0x60>

	BB5 = (tmp[0]<<8 | tmp[1]);
 80010d0:	783b      	ldrb	r3, [r7, #0]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	787a      	ldrb	r2, [r7, #1]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
	x1 = (((int32_t)BB5 - B.AC6) * B.AC5)>>15;
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <BMP180_GetTempC+0x104>)
 80010dc:	895b      	ldrh	r3, [r3, #10]
 80010de:	461a      	mov	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1a9b      	subs	r3, r3, r2
 80010e4:	4a1d      	ldr	r2, [pc, #116]	; (800115c <BMP180_GetTempC+0x104>)
 80010e6:	8912      	ldrh	r2, [r2, #8]
 80010e8:	fb02 f303 	mul.w	r3, r2, r3
 80010ec:	13db      	asrs	r3, r3, #15
 80010ee:	60fb      	str	r3, [r7, #12]
	x2 = (B.MC << 11) / (x1 + B.MD);
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <BMP180_GetTempC+0x104>)
 80010f2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80010f6:	02da      	lsls	r2, r3, #11
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <BMP180_GetTempC+0x104>)
 80010fa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80010fe:	4619      	mov	r1, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	440b      	add	r3, r1
 8001104:	fb92 f3f3 	sdiv	r3, r2, r3
 8001108:	60bb      	str	r3, [r7, #8]
	B5 = x1 + x2;
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4413      	add	r3, r2
 8001110:	4a13      	ldr	r2, [pc, #76]	; (8001160 <BMP180_GetTempC+0x108>)
 8001112:	6013      	str	r3, [r2, #0]
	tempC = ((B5+8) >>4) * 0.1;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <BMP180_GetTempC+0x108>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3308      	adds	r3, #8
 800111a:	111b      	asrs	r3, r3, #4
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa01 	bl	8000524 <__aeabi_i2d>
 8001122:	a30b      	add	r3, pc, #44	; (adr r3, 8001150 <BMP180_GetTempC+0xf8>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fa66 	bl	80005f8 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	617b      	str	r3, [r7, #20]

	return tempC;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	ee07 3a90 	vmov	s15, r3
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	f3af 8000 	nop.w
 8001150:	9999999a 	.word	0x9999999a
 8001154:	3fb99999 	.word	0x3fb99999
 8001158:	20000684 	.word	0x20000684
 800115c:	2000064c 	.word	0x2000064c
 8001160:	20000674 	.word	0x20000674

08001164 <BMP180_GetPressure>:

int32_t	BMP180_GetPressure()
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	; 0x38
 8001168:	af02      	add	r7, sp, #8
	int32_t 	pressure=0;;
 800116a:	2300      	movs	r3, #0
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t 	X1,X2,X3,B3,B6,up,BB5;
	uint32_t	B4,B7=0;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t 	regVal[2]={0,},press[3]={0,};
 8001172:	2300      	movs	r3, #0
 8001174:	813b      	strh	r3, [r7, #8]
 8001176:	4b7f      	ldr	r3, [pc, #508]	; (8001374 <BMP180_GetPressure+0x210>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	80bb      	strh	r3, [r7, #4]
 800117c:	2300      	movs	r3, #0
 800117e:	71bb      	strb	r3, [r7, #6]

	regVal[0]=0xF4; regVal[1]=0x34+(3<<6);
 8001180:	23f4      	movs	r3, #244	; 0xf4
 8001182:	723b      	strb	r3, [r7, #8]
 8001184:	23f4      	movs	r3, #244	; 0xf4
 8001186:	727b      	strb	r3, [r7, #9]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)BMP180_WRITE_ADDRESS,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8001188:	bf00      	nop
 800118a:	f107 0208 	add.w	r2, r7, #8
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2302      	movs	r3, #2
 8001196:	21ee      	movs	r1, #238	; 0xee
 8001198:	4877      	ldr	r0, [pc, #476]	; (8001378 <BMP180_GetPressure+0x214>)
 800119a:	f002 f931 	bl	8003400 <HAL_I2C_Master_Transmit>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f2      	bne.n	800118a <BMP180_GetPressure+0x26>
	HAL_Delay(40);    // 40 ms wait
 80011a4:	2028      	movs	r0, #40	; 0x28
 80011a6:	f001 fc3b 	bl	8002a20 <HAL_Delay>
	regVal[0]=0xF6; regVal[1]=0x00;
 80011aa:	23f6      	movs	r3, #246	; 0xf6
 80011ac:	723b      	strb	r3, [r7, #8]
 80011ae:	2300      	movs	r3, #0
 80011b0:	727b      	strb	r3, [r7, #9]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)BMP180_WRITE_ADDRESS,(uint8_t *)regVal,2,1000)!=HAL_OK);
 80011b2:	bf00      	nop
 80011b4:	f107 0208 	add.w	r2, r7, #8
 80011b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2302      	movs	r3, #2
 80011c0:	21ee      	movs	r1, #238	; 0xee
 80011c2:	486d      	ldr	r0, [pc, #436]	; (8001378 <BMP180_GetPressure+0x214>)
 80011c4:	f002 f91c 	bl	8003400 <HAL_I2C_Master_Transmit>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f2      	bne.n	80011b4 <BMP180_GetPressure+0x50>
	while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)BMP180_READ_ADDRESS,(uint8_t *)press,3,1000)!=HAL_OK);
 80011ce:	bf00      	nop
 80011d0:	1d3a      	adds	r2, r7, #4
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2303      	movs	r3, #3
 80011da:	21ef      	movs	r1, #239	; 0xef
 80011dc:	4866      	ldr	r0, [pc, #408]	; (8001378 <BMP180_GetPressure+0x214>)
 80011de:	f002 fa03 	bl	80035e8 <HAL_I2C_Master_Receive>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f3      	bne.n	80011d0 <BMP180_GetPressure+0x6c>

	BB5 = ((press[0]<<16) + (press[1]<<8) + press[2]) >> (8-oversampling);
 80011e8:	793b      	ldrb	r3, [r7, #4]
 80011ea:	041a      	lsls	r2, r3, #16
 80011ec:	797b      	ldrb	r3, [r7, #5]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	4413      	add	r3, r2
 80011f2:	79ba      	ldrb	r2, [r7, #6]
 80011f4:	441a      	add	r2, r3
 80011f6:	4b61      	ldr	r3, [pc, #388]	; (800137c <BMP180_GetPressure+0x218>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	f1c3 0308 	rsb	r3, r3, #8
 80011fe:	fa42 f303 	asr.w	r3, r2, r3
 8001202:	627b      	str	r3, [r7, #36]	; 0x24

	B6 = B5 - 4000;
 8001204:	4b5e      	ldr	r3, [pc, #376]	; (8001380 <BMP180_GetPressure+0x21c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800120c:	623b      	str	r3, [r7, #32]
	X1 = (B.B2 * (B6 * B6 / 0x1000)) >> 11;
 800120e:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <BMP180_GetPressure+0x220>)
 8001210:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001214:	461a      	mov	r2, r3
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	fb03 f303 	mul.w	r3, r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	da01      	bge.n	8001224 <BMP180_GetPressure+0xc0>
 8001220:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001224:	131b      	asrs	r3, r3, #12
 8001226:	fb03 f302 	mul.w	r3, r3, r2
 800122a:	12db      	asrs	r3, r3, #11
 800122c:	61fb      	str	r3, [r7, #28]
	X2 = B.AC2 * B6 >> 11;
 800122e:	4b55      	ldr	r3, [pc, #340]	; (8001384 <BMP180_GetPressure+0x220>)
 8001230:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001234:	461a      	mov	r2, r3
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	fb03 f302 	mul.w	r3, r3, r2
 800123c:	12db      	asrs	r3, r3, #11
 800123e:	61bb      	str	r3, [r7, #24]
	X3 = X1 + X2;
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4413      	add	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
	B3 = (((B.AC1 * 4 + X3) << oversampling)+2) >> 2;
 8001248:	4b4e      	ldr	r3, [pc, #312]	; (8001384 <BMP180_GetPressure+0x220>)
 800124a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124e:	009a      	lsls	r2, r3, #2
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	4413      	add	r3, r2
 8001254:	4a49      	ldr	r2, [pc, #292]	; (800137c <BMP180_GetPressure+0x218>)
 8001256:	8812      	ldrh	r2, [r2, #0]
 8001258:	4093      	lsls	r3, r2
 800125a:	3302      	adds	r3, #2
 800125c:	109b      	asrs	r3, r3, #2
 800125e:	613b      	str	r3, [r7, #16]
	X1 = B.AC3 * B6 / 0x2000;
 8001260:	4b48      	ldr	r3, [pc, #288]	; (8001384 <BMP180_GetPressure+0x220>)
 8001262:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001266:	461a      	mov	r2, r3
 8001268:	6a3b      	ldr	r3, [r7, #32]
 800126a:	fb03 f302 	mul.w	r3, r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	da02      	bge.n	8001278 <BMP180_GetPressure+0x114>
 8001272:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001276:	331f      	adds	r3, #31
 8001278:	135b      	asrs	r3, r3, #13
 800127a:	61fb      	str	r3, [r7, #28]
	X2 = (B.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 800127c:	4b41      	ldr	r3, [pc, #260]	; (8001384 <BMP180_GetPressure+0x220>)
 800127e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001282:	461a      	mov	r2, r3
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	fb03 f303 	mul.w	r3, r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	da01      	bge.n	8001292 <BMP180_GetPressure+0x12e>
 800128e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001292:	131b      	asrs	r3, r3, #12
 8001294:	fb03 f302 	mul.w	r3, r3, r2
 8001298:	2b00      	cmp	r3, #0
 800129a:	da02      	bge.n	80012a2 <BMP180_GetPressure+0x13e>
 800129c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80012a0:	33ff      	adds	r3, #255	; 0xff
 80012a2:	141b      	asrs	r3, r3, #16
 80012a4:	61bb      	str	r3, [r7, #24]
	X3 = ((X1 + X2) + 2) / 0x4;
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	4413      	add	r3, r2
 80012ac:	3302      	adds	r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	da00      	bge.n	80012b4 <BMP180_GetPressure+0x150>
 80012b2:	3303      	adds	r3, #3
 80012b4:	109b      	asrs	r3, r3, #2
 80012b6:	617b      	str	r3, [r7, #20]
	B4 = B.AC4 * (uint32_t)(X3 + 32768) / 0x8000;
 80012b8:	4b32      	ldr	r3, [pc, #200]	; (8001384 <BMP180_GetPressure+0x220>)
 80012ba:	88db      	ldrh	r3, [r3, #6]
 80012bc:	461a      	mov	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80012c4:	fb03 f302 	mul.w	r3, r3, r2
 80012c8:	0bdb      	lsrs	r3, r3, #15
 80012ca:	60fb      	str	r3, [r7, #12]
	B7 = ((uint32_t)BB5-B3) *(50000 >> oversampling);
 80012cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	4a2a      	ldr	r2, [pc, #168]	; (800137c <BMP180_GetPressure+0x218>)
 80012d4:	8812      	ldrh	r2, [r2, #0]
 80012d6:	4611      	mov	r1, r2
 80012d8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80012dc:	410a      	asrs	r2, r1
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28

	if( B7 < 0x80000000)
 80012e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db06      	blt.n	80012f8 <BMP180_GetPressure+0x194>
	{
		pressure = (B7*2) / B4;
 80012ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ec:	005a      	lsls	r2, r3, #1
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012f6:	e005      	b.n	8001304 <BMP180_GetPressure+0x1a0>
	}
	else
	{
		pressure = (B7/B4) * 2;
 80012f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	X1 = (pressure / 0x100 * (pressure/0x100));
 8001304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001306:	2b00      	cmp	r3, #0
 8001308:	da00      	bge.n	800130c <BMP180_GetPressure+0x1a8>
 800130a:	33ff      	adds	r3, #255	; 0xff
 800130c:	121b      	asrs	r3, r3, #8
 800130e:	461a      	mov	r2, r3
 8001310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001312:	2b00      	cmp	r3, #0
 8001314:	da00      	bge.n	8001318 <BMP180_GetPressure+0x1b4>
 8001316:	33ff      	adds	r3, #255	; 0xff
 8001318:	121b      	asrs	r3, r3, #8
 800131a:	fb03 f302 	mul.w	r3, r3, r2
 800131e:	61fb      	str	r3, [r7, #28]
	X1 = (X1 * 3038) / 0x10000;
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f640 32de 	movw	r2, #3038	; 0xbde
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	da02      	bge.n	8001334 <BMP180_GetPressure+0x1d0>
 800132e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001332:	33ff      	adds	r3, #255	; 0xff
 8001334:	141b      	asrs	r3, r3, #16
 8001336:	61fb      	str	r3, [r7, #28]
	X2= (-7357 * pressure)/ 0x10000;
 8001338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133a:	4a13      	ldr	r2, [pc, #76]	; (8001388 <BMP180_GetPressure+0x224>)
 800133c:	fb02 f303 	mul.w	r3, r2, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	da02      	bge.n	800134a <BMP180_GetPressure+0x1e6>
 8001344:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001348:	33ff      	adds	r3, #255	; 0xff
 800134a:	141b      	asrs	r3, r3, #16
 800134c:	61bb      	str	r3, [r7, #24]
	pressure = pressure + (X1 + X2 + 3791) / 0x10;
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4413      	add	r3, r2
 8001354:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001358:	2b00      	cmp	r3, #0
 800135a:	da00      	bge.n	800135e <BMP180_GetPressure+0x1fa>
 800135c:	330f      	adds	r3, #15
 800135e:	111b      	asrs	r3, r3, #4
 8001360:	461a      	mov	r2, r3
 8001362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001364:	4413      	add	r3, r2
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c

	return pressure;
 8001368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800136a:	4618      	mov	r0, r3
 800136c:	3730      	adds	r7, #48	; 0x30
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	0800a928 	.word	0x0800a928
 8001378:	20000684 	.word	0x20000684
 800137c:	20000000 	.word	0x20000000
 8001380:	20000674 	.word	0x20000674
 8001384:	2000064c 	.word	0x2000064c
 8001388:	ffffe343 	.word	0xffffe343
 800138c:	00000000 	.word	0x00000000

08001390 <BMP180_GetAltitude>:

float	BMP180_GetAltitude(int32_t press)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	float altitude=0;
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]

	altitude = 44330.0f * ( 1.0f - pow((press / 101325.0f),0.1903));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001418 <BMP180_GetAltitude+0x88>
 80013ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013b0:	ee16 0a90 	vmov	r0, s13
 80013b4:	f7ff f8c8 	bl	8000548 <__aeabi_f2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001408 <BMP180_GetAltitude+0x78>
 80013c0:	ec43 2b10 	vmov	d0, r2, r3
 80013c4:	f008 f87c 	bl	80094c0 <pow>
 80013c8:	ec53 2b10 	vmov	r2, r3, d0
 80013cc:	f04f 0000 	mov.w	r0, #0
 80013d0:	4912      	ldr	r1, [pc, #72]	; (800141c <BMP180_GetAltitude+0x8c>)
 80013d2:	f7fe ff59 	bl	8000288 <__aeabi_dsub>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	a30c      	add	r3, pc, #48	; (adr r3, 8001410 <BMP180_GetAltitude+0x80>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff f908 	bl	80005f8 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fbda 	bl	8000ba8 <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	60fb      	str	r3, [r7, #12]

	if((altitude <= -500)||(altitude>=9000u))
	{

	}
	return altitude;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	ee07 3a90 	vmov	s15, r3
}
 80013fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	1a36e2eb 	.word	0x1a36e2eb
 800140c:	3fc85bc0 	.word	0x3fc85bc0
 8001410:	00000000 	.word	0x00000000
 8001414:	40e5a540 	.word	0x40e5a540
 8001418:	47c5e680 	.word	0x47c5e680
 800141c:	3ff00000 	.word	0x3ff00000

08001420 <Init_HMC5883L>:
		angle_offset = 0.0;

uint8_t HMC5883Lmode;

void	Init_HMC5883L()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af02      	add	r7, sp, #8
	  uint8_t regVal[2];

	  // Set to 8 samples 15Hz
	  regVal[0] = HMC5883L_CRA; regVal[1] = 0x70;     // 0x70
 8001426:	2300      	movs	r3, #0
 8001428:	713b      	strb	r3, [r7, #4]
 800142a:	2370      	movs	r3, #112	; 0x70
 800142c:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)HMC5883L,(uint8_t *)regVal,2,1000)!=HAL_OK);
 800142e:	bf00      	nop
 8001430:	1d3a      	adds	r2, r7, #4
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2302      	movs	r3, #2
 800143a:	213c      	movs	r1, #60	; 0x3c
 800143c:	4816      	ldr	r0, [pc, #88]	; (8001498 <Init_HMC5883L+0x78>)
 800143e:	f001 ffdf 	bl	8003400 <HAL_I2C_Master_Transmit>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f3      	bne.n	8001430 <Init_HMC5883L+0x10>

	  // 1.3 gain LSb / Gauss 1090 (default)
	  regVal[0] = HMC5883L_CRB; regVal[1] = 0x20;
 8001448:	2301      	movs	r3, #1
 800144a:	713b      	strb	r3, [r7, #4]
 800144c:	2320      	movs	r3, #32
 800144e:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)HMC5883L,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8001450:	bf00      	nop
 8001452:	1d3a      	adds	r2, r7, #4
 8001454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2302      	movs	r3, #2
 800145c:	213c      	movs	r1, #60	; 0x3c
 800145e:	480e      	ldr	r0, [pc, #56]	; (8001498 <Init_HMC5883L+0x78>)
 8001460:	f001 ffce 	bl	8003400 <HAL_I2C_Master_Transmit>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f3      	bne.n	8001452 <Init_HMC5883L+0x32>

	  // Continuous sampling
	  regVal[0] = HMC5883L_MR; regVal[1] = 0x00;
 800146a:	2302      	movs	r3, #2
 800146c:	713b      	strb	r3, [r7, #4]
 800146e:	2300      	movs	r3, #0
 8001470:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)HMC5883L,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8001472:	bf00      	nop
 8001474:	1d3a      	adds	r2, r7, #4
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2302      	movs	r3, #2
 800147e:	213c      	movs	r1, #60	; 0x3c
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <Init_HMC5883L+0x78>)
 8001482:	f001 ffbd 	bl	8003400 <HAL_I2C_Master_Transmit>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f3      	bne.n	8001474 <Init_HMC5883L+0x54>
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000684 	.word	0x20000684

0800149c <HMC5883L_Read>:
	  }
	  else return 0;
}

double	HMC5883L_Read(COMDATA *C)
{
 800149c:	b5b0      	push	{r4, r5, r7, lr}
 800149e:	b096      	sub	sp, #88	; 0x58
 80014a0:	af02      	add	r7, sp, #8
 80014a2:	6078      	str	r0, [r7, #4]
	  uint8_t am;
	  uint8_t rdata[6]={0,0,0,0,0,0};
 80014a4:	4a59      	ldr	r2, [pc, #356]	; (800160c <HMC5883L_Read+0x170>)
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ae:	6018      	str	r0, [r3, #0]
 80014b0:	3304      	adds	r3, #4
 80014b2:	8019      	strh	r1, [r3, #0]
	  int16_t X,Y,Z;
	  double  x,y,z,bearing,angle;

	  am = HMC5883L_DO_X_H;
 80014b4:	2303      	movs	r3, #3
 80014b6:	73fb      	strb	r3, [r7, #15]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)HMC5883L,(uint8_t *)&am,1,1000)!=HAL_OK);
 80014b8:	bf00      	nop
 80014ba:	f107 020f 	add.w	r2, r7, #15
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2301      	movs	r3, #1
 80014c6:	213c      	movs	r1, #60	; 0x3c
 80014c8:	4851      	ldr	r0, [pc, #324]	; (8001610 <HMC5883L_Read+0x174>)
 80014ca:	f001 ff99 	bl	8003400 <HAL_I2C_Master_Transmit>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f2      	bne.n	80014ba <HMC5883L_Read+0x1e>
	  while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)HMC5883L,(uint8_t *)rdata,6,1000)!=HAL_OK);
 80014d4:	bf00      	nop
 80014d6:	f107 0208 	add.w	r2, r7, #8
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2306      	movs	r3, #6
 80014e2:	213c      	movs	r1, #60	; 0x3c
 80014e4:	484a      	ldr	r0, [pc, #296]	; (8001610 <HMC5883L_Read+0x174>)
 80014e6:	f002 f87f 	bl	80035e8 <HAL_I2C_Master_Receive>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f2      	bne.n	80014d6 <HMC5883L_Read+0x3a>

	  X = (int16_t)(rdata[0]<<8 | rdata[1]);
 80014f0:	7a3b      	ldrb	r3, [r7, #8]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	7a7b      	ldrb	r3, [r7, #9]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  x = ((float)X - Xoffset) * scale;
 8001500:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8001504:	ee07 3a90 	vmov	s15, r3
 8001508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150c:	4b41      	ldr	r3, [pc, #260]	; (8001614 <HMC5883L_Read+0x178>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001516:	4b40      	ldr	r3, [pc, #256]	; (8001618 <HMC5883L_Read+0x17c>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001520:	ee17 0a90 	vmov	r0, s15
 8001524:	f7ff f810 	bl	8000548 <__aeabi_f2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  Y = (int16_t)(rdata[2]<<8 | rdata[3]);
 8001530:	7abb      	ldrb	r3, [r7, #10]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	7afb      	ldrb	r3, [r7, #11]
 8001538:	b21b      	sxth	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  y = ((float)Y - Yoffset) * scale;
 800153e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800154a:	4b34      	ldr	r3, [pc, #208]	; (800161c <HMC5883L_Read+0x180>)
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001554:	4b30      	ldr	r3, [pc, #192]	; (8001618 <HMC5883L_Read+0x17c>)
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155e:	ee17 0a90 	vmov	r0, s15
 8001562:	f7fe fff1 	bl	8000548 <__aeabi_f2d>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	  Z = (int16_t)(rdata[4]<<8 | rdata[5]);
 800156e:	7b3b      	ldrb	r3, [r7, #12]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	7b7b      	ldrb	r3, [r7, #13]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  z = ((float)Z - Zoffset) * scale;
 800157c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001580:	ee07 3a90 	vmov	s15, r3
 8001584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001588:	4b25      	ldr	r3, [pc, #148]	; (8001620 <HMC5883L_Read+0x184>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001592:	4b21      	ldr	r3, [pc, #132]	; (8001618 <HMC5883L_Read+0x17c>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800159c:	ee17 0a90 	vmov	r0, s15
 80015a0:	f7fe ffd2 	bl	8000548 <__aeabi_f2d>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	e9c7 2308 	strd	r2, r3, [r7, #32]

	  bearing = atan2(x,y) + angle_offset;
 80015ac:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 80015b0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80015b4:	f007 ff82 	bl	80094bc <atan2>
 80015b8:	ec55 4b10 	vmov	r4, r5, d0
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HMC5883L_Read+0x188>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffc1 	bl	8000548 <__aeabi_f2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7fe fe5d 	bl	800028c <__adddf3>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  C->x = X;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80015e0:	801a      	strh	r2, [r3, #0]
	  C->y = Y;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80015e6:	805a      	strh	r2, [r3, #2]
	  C->z = Z;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80015ec:	809a      	strh	r2, [r3, #4]
	  }
	  if( bearing > 360)
	  {
		  bearing -= 360;
	  } */
	  angle = bearing;
 80015ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015f2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	  return angle;
 80015f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015fa:	ec43 2b17 	vmov	d7, r2, r3
}
 80015fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001602:	eef0 0a67 	vmov.f32	s1, s15
 8001606:	3750      	adds	r7, #80	; 0x50
 8001608:	46bd      	mov	sp, r7
 800160a:	bdb0      	pop	{r4, r5, r7, pc}
 800160c:	0800a92c 	.word	0x0800a92c
 8001610:	20000684 	.word	0x20000684
 8001614:	2000020c 	.word	0x2000020c
 8001618:	20000004 	.word	0x20000004
 800161c:	20000210 	.word	0x20000210
 8001620:	20000214 	.word	0x20000214
 8001624:	20000218 	.word	0x20000218

08001628 <GY_801_Start>:

#include "main.h"
#include "L3G4200D.h"

void 	GY_801_Start()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, I2C_VCC_Pin, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	2110      	movs	r1, #16
 8001630:	4807      	ldr	r0, [pc, #28]	; (8001650 <GY_801_Start+0x28>)
 8001632:	f001 fe3d 	bl	80032b0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001636:	2064      	movs	r0, #100	; 0x64
 8001638:	f001 f9f2 	bl	8002a20 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, I2C_VCC_Pin, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2110      	movs	r1, #16
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <GY_801_Start+0x28>)
 8001642:	f001 fe35 	bl	80032b0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001646:	2064      	movs	r0, #100	; 0x64
 8001648:	f001 f9ea 	bl	8002a20 <HAL_Delay>
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	48000400 	.word	0x48000400

08001654 <Init_L3G4200D>:

void	Init_L3G4200D()
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af02      	add	r7, sp, #8
	  uint8_t regVal[2];

	  // FS = 00 (+/- 250 dps full scale)
	  regVal[0] = L3G4200D_CTRL_REG4; regVal[1] = 0x80;  // 00
 800165a:	2323      	movs	r3, #35	; 0x23
 800165c:	713b      	strb	r3, [r7, #4]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8001662:	bf00      	nop
 8001664:	1d3a      	adds	r2, r7, #4
 8001666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2302      	movs	r3, #2
 800166e:	21d2      	movs	r1, #210	; 0xd2
 8001670:	481e      	ldr	r0, [pc, #120]	; (80016ec <Init_L3G4200D+0x98>)
 8001672:	f001 fec5 	bl	8003400 <HAL_I2C_Master_Transmit>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f3      	bne.n	8001664 <Init_L3G4200D+0x10>

	  // DR = 01 (200 Hz ODR); BW = 10 (50 Hz bandwidth); PD = 1 (normal mode); Zen = Yen = Xen = 1 (all axes enabled)
	  regVal[0] = L3G4200D_CTRL_REG1; regVal[1] = 0x0F;  // FF
 800167c:	2320      	movs	r3, #32
 800167e:	713b      	strb	r3, [r7, #4]
 8001680:	230f      	movs	r3, #15
 8001682:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8001684:	bf00      	nop
 8001686:	1d3a      	adds	r2, r7, #4
 8001688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2302      	movs	r3, #2
 8001690:	21d2      	movs	r1, #210	; 0xd2
 8001692:	4816      	ldr	r0, [pc, #88]	; (80016ec <Init_L3G4200D+0x98>)
 8001694:	f001 feb4 	bl	8003400 <HAL_I2C_Master_Transmit>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f3      	bne.n	8001686 <Init_L3G4200D+0x32>


	  // set high-pass filter setting
	  regVal[0] = L3G4200D_CTRL_REG2; regVal[1] = 0x00;
 800169e:	2321      	movs	r3, #33	; 0x21
 80016a0:	713b      	strb	r3, [r7, #4]
 80016a2:	2300      	movs	r3, #0
 80016a4:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)regVal,2,1000)!=HAL_OK);
 80016a6:	bf00      	nop
 80016a8:	1d3a      	adds	r2, r7, #4
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2302      	movs	r3, #2
 80016b2:	21d2      	movs	r1, #210	; 0xd2
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <Init_L3G4200D+0x98>)
 80016b6:	f001 fea3 	bl	8003400 <HAL_I2C_Master_Transmit>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f3      	bne.n	80016a8 <Init_L3G4200D+0x54>

	  // enable high-pass filter
	  regVal[0] = L3G4200D_CTRL_REG5; regVal[1] = 0x10;
 80016c0:	2324      	movs	r3, #36	; 0x24
 80016c2:	713b      	strb	r3, [r7, #4]
 80016c4:	2310      	movs	r3, #16
 80016c6:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)regVal,2,1000)!=HAL_OK);
 80016c8:	bf00      	nop
 80016ca:	1d3a      	adds	r2, r7, #4
 80016cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2302      	movs	r3, #2
 80016d4:	21d2      	movs	r1, #210	; 0xd2
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <Init_L3G4200D+0x98>)
 80016d8:	f001 fe92 	bl	8003400 <HAL_I2C_Master_Transmit>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f3      	bne.n	80016ca <Init_L3G4200D+0x76>
}
 80016e2:	bf00      	nop
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000684 	.word	0x20000684

080016f0 <L3G4200D_WhoAmI>:

uint8_t	L3G4200D_WhoAmI()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af02      	add	r7, sp, #8
	  uint8_t am = 0x0F;;
 80016f6:	230f      	movs	r3, #15
 80016f8:	71fb      	strb	r3, [r7, #7]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)&am,1,1000)!=HAL_OK);
 80016fa:	bf00      	nop
 80016fc:	1dfa      	adds	r2, r7, #7
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2301      	movs	r3, #1
 8001706:	21d2      	movs	r1, #210	; 0xd2
 8001708:	480b      	ldr	r0, [pc, #44]	; (8001738 <L3G4200D_WhoAmI+0x48>)
 800170a:	f001 fe79 	bl	8003400 <HAL_I2C_Master_Transmit>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f3      	bne.n	80016fc <L3G4200D_WhoAmI+0xc>
	  while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)L3G4200D,(uint8_t *)&am,1,1000)!=HAL_OK);
 8001714:	bf00      	nop
 8001716:	1dfa      	adds	r2, r7, #7
 8001718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2301      	movs	r3, #1
 8001720:	21d2      	movs	r1, #210	; 0xd2
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <L3G4200D_WhoAmI+0x48>)
 8001724:	f001 ff60 	bl	80035e8 <HAL_I2C_Master_Receive>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f3      	bne.n	8001716 <L3G4200D_WhoAmI+0x26>
	  return am;
 800172e:	79fb      	ldrb	r3, [r7, #7]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000684 	.word	0x20000684

0800173c <L3G4200D_Read>:

void	L3G4200D_Read(GYRODATA *G)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af02      	add	r7, sp, #8
 8001742:	6078      	str	r0, [r7, #4]
	  uint8_t am[2];
	  uint8_t rdata[6]={0,0,0,0,0,0};
 8001744:	4a75      	ldr	r2, [pc, #468]	; (800191c <L3G4200D_Read+0x1e0>)
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800174e:	6018      	str	r0, [r3, #0]
 8001750:	3304      	adds	r3, #4
 8001752:	8019      	strh	r1, [r3, #0]

	  am[0] = L3G4200D_OUT_X_L | (1<<7);    am[1] = 0xFF;
 8001754:	23a8      	movs	r3, #168	; 0xa8
 8001756:	753b      	strb	r3, [r7, #20]
 8001758:	23ff      	movs	r3, #255	; 0xff
 800175a:	757b      	strb	r3, [r7, #21]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)am,2,1000)!=HAL_OK);
 800175c:	bf00      	nop
 800175e:	f107 0214 	add.w	r2, r7, #20
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2302      	movs	r3, #2
 800176a:	21d2      	movs	r1, #210	; 0xd2
 800176c:	486c      	ldr	r0, [pc, #432]	; (8001920 <L3G4200D_Read+0x1e4>)
 800176e:	f001 fe47 	bl	8003400 <HAL_I2C_Master_Transmit>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f2      	bne.n	800175e <L3G4200D_Read+0x22>
	  while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)L3G4200D,(uint8_t *)&rdata[0],1,1000)!=HAL_OK);
 8001778:	bf00      	nop
 800177a:	f107 020c 	add.w	r2, r7, #12
 800177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	21d2      	movs	r1, #210	; 0xd2
 8001788:	4865      	ldr	r0, [pc, #404]	; (8001920 <L3G4200D_Read+0x1e4>)
 800178a:	f001 ff2d 	bl	80035e8 <HAL_I2C_Master_Receive>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f2      	bne.n	800177a <L3G4200D_Read+0x3e>
	  am[0] = L3G4200D_OUT_X_H | (1<<7);    am[1] = 0xFF;
 8001794:	23a9      	movs	r3, #169	; 0xa9
 8001796:	753b      	strb	r3, [r7, #20]
 8001798:	23ff      	movs	r3, #255	; 0xff
 800179a:	757b      	strb	r3, [r7, #21]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)&am,1,1000)!=HAL_OK);
 800179c:	bf00      	nop
 800179e:	f107 0214 	add.w	r2, r7, #20
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2301      	movs	r3, #1
 80017aa:	21d2      	movs	r1, #210	; 0xd2
 80017ac:	485c      	ldr	r0, [pc, #368]	; (8001920 <L3G4200D_Read+0x1e4>)
 80017ae:	f001 fe27 	bl	8003400 <HAL_I2C_Master_Transmit>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f2      	bne.n	800179e <L3G4200D_Read+0x62>
	  while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)L3G4200D,(uint8_t *)&rdata[1],1,1000)!=HAL_OK);
 80017b8:	bf00      	nop
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2301      	movs	r3, #1
 80017c8:	21d2      	movs	r1, #210	; 0xd2
 80017ca:	4855      	ldr	r0, [pc, #340]	; (8001920 <L3G4200D_Read+0x1e4>)
 80017cc:	f001 ff0c 	bl	80035e8 <HAL_I2C_Master_Receive>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f1      	bne.n	80017ba <L3G4200D_Read+0x7e>

	  am[0] = L3G4200D_OUT_Y_L | (1<<7);    am[1] = 0xFF;
 80017d6:	23aa      	movs	r3, #170	; 0xaa
 80017d8:	753b      	strb	r3, [r7, #20]
 80017da:	23ff      	movs	r3, #255	; 0xff
 80017dc:	757b      	strb	r3, [r7, #21]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)am,2,1000)!=HAL_OK);
 80017de:	bf00      	nop
 80017e0:	f107 0214 	add.w	r2, r7, #20
 80017e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2302      	movs	r3, #2
 80017ec:	21d2      	movs	r1, #210	; 0xd2
 80017ee:	484c      	ldr	r0, [pc, #304]	; (8001920 <L3G4200D_Read+0x1e4>)
 80017f0:	f001 fe06 	bl	8003400 <HAL_I2C_Master_Transmit>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f2      	bne.n	80017e0 <L3G4200D_Read+0xa4>
	  while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)L3G4200D,(uint8_t *)&rdata[2],1,1000)!=HAL_OK);
 80017fa:	bf00      	nop
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	1c9a      	adds	r2, r3, #2
 8001802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2301      	movs	r3, #1
 800180a:	21d2      	movs	r1, #210	; 0xd2
 800180c:	4844      	ldr	r0, [pc, #272]	; (8001920 <L3G4200D_Read+0x1e4>)
 800180e:	f001 feeb 	bl	80035e8 <HAL_I2C_Master_Receive>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f1      	bne.n	80017fc <L3G4200D_Read+0xc0>
	  am[0] = L3G4200D_OUT_Y_H | (1<<7);    am[1] = 0xFF;
 8001818:	23ab      	movs	r3, #171	; 0xab
 800181a:	753b      	strb	r3, [r7, #20]
 800181c:	23ff      	movs	r3, #255	; 0xff
 800181e:	757b      	strb	r3, [r7, #21]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)&am,1,1000)!=HAL_OK);
 8001820:	bf00      	nop
 8001822:	f107 0214 	add.w	r2, r7, #20
 8001826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2301      	movs	r3, #1
 800182e:	21d2      	movs	r1, #210	; 0xd2
 8001830:	483b      	ldr	r0, [pc, #236]	; (8001920 <L3G4200D_Read+0x1e4>)
 8001832:	f001 fde5 	bl	8003400 <HAL_I2C_Master_Transmit>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f2      	bne.n	8001822 <L3G4200D_Read+0xe6>
	  while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)L3G4200D,(uint8_t *)&rdata[3],1,1000)!=HAL_OK);
 800183c:	bf00      	nop
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	1cda      	adds	r2, r3, #3
 8001844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2301      	movs	r3, #1
 800184c:	21d2      	movs	r1, #210	; 0xd2
 800184e:	4834      	ldr	r0, [pc, #208]	; (8001920 <L3G4200D_Read+0x1e4>)
 8001850:	f001 feca 	bl	80035e8 <HAL_I2C_Master_Receive>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f1      	bne.n	800183e <L3G4200D_Read+0x102>

	  am[0] = L3G4200D_OUT_Z_L | (1<<7);    am[1] = 0xFF;
 800185a:	23ac      	movs	r3, #172	; 0xac
 800185c:	753b      	strb	r3, [r7, #20]
 800185e:	23ff      	movs	r3, #255	; 0xff
 8001860:	757b      	strb	r3, [r7, #21]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)am,2,1000)!=HAL_OK);
 8001862:	bf00      	nop
 8001864:	f107 0214 	add.w	r2, r7, #20
 8001868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2302      	movs	r3, #2
 8001870:	21d2      	movs	r1, #210	; 0xd2
 8001872:	482b      	ldr	r0, [pc, #172]	; (8001920 <L3G4200D_Read+0x1e4>)
 8001874:	f001 fdc4 	bl	8003400 <HAL_I2C_Master_Transmit>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f2      	bne.n	8001864 <L3G4200D_Read+0x128>
	  while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)L3G4200D,(uint8_t *)&rdata[4],1,1000)!=HAL_OK);
 800187e:	bf00      	nop
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	1d1a      	adds	r2, r3, #4
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2301      	movs	r3, #1
 800188e:	21d2      	movs	r1, #210	; 0xd2
 8001890:	4823      	ldr	r0, [pc, #140]	; (8001920 <L3G4200D_Read+0x1e4>)
 8001892:	f001 fea9 	bl	80035e8 <HAL_I2C_Master_Receive>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f1      	bne.n	8001880 <L3G4200D_Read+0x144>
	  am[0] = L3G4200D_OUT_Z_H | (1<<7);    am[1] = 0xFF;
 800189c:	23ad      	movs	r3, #173	; 0xad
 800189e:	753b      	strb	r3, [r7, #20]
 80018a0:	23ff      	movs	r3, #255	; 0xff
 80018a2:	757b      	strb	r3, [r7, #21]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)&am,1,1000)!=HAL_OK);
 80018a4:	bf00      	nop
 80018a6:	f107 0214 	add.w	r2, r7, #20
 80018aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2301      	movs	r3, #1
 80018b2:	21d2      	movs	r1, #210	; 0xd2
 80018b4:	481a      	ldr	r0, [pc, #104]	; (8001920 <L3G4200D_Read+0x1e4>)
 80018b6:	f001 fda3 	bl	8003400 <HAL_I2C_Master_Transmit>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f2      	bne.n	80018a6 <L3G4200D_Read+0x16a>
	  while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)L3G4200D,(uint8_t *)&rdata[5],1,1000)!=HAL_OK);
 80018c0:	bf00      	nop
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	1d5a      	adds	r2, r3, #5
 80018c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2301      	movs	r3, #1
 80018d0:	21d2      	movs	r1, #210	; 0xd2
 80018d2:	4813      	ldr	r0, [pc, #76]	; (8001920 <L3G4200D_Read+0x1e4>)
 80018d4:	f001 fe88 	bl	80035e8 <HAL_I2C_Master_Receive>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f1      	bne.n	80018c2 <L3G4200D_Read+0x186>

	  G->x = (int16_t)(rdata[0]<<8 | rdata[1]);
 80018de:	7b3b      	ldrb	r3, [r7, #12]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b21a      	sxth	r2, r3
 80018e4:	7b7b      	ldrb	r3, [r7, #13]
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	801a      	strh	r2, [r3, #0]
	  G->y = (int16_t)(rdata[2]<<8 | rdata[3]);
 80018f0:	7bbb      	ldrb	r3, [r7, #14]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	b21a      	sxth	r2, r3
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	4313      	orrs	r3, r2
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	805a      	strh	r2, [r3, #2]
	  G->z = (int16_t)(rdata[4]<<8 | rdata[5]);
 8001902:	7c3b      	ldrb	r3, [r7, #16]
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	b21a      	sxth	r2, r3
 8001908:	7c7b      	ldrb	r3, [r7, #17]
 800190a:	b21b      	sxth	r3, r3
 800190c:	4313      	orrs	r3, r2
 800190e:	b21a      	sxth	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	809a      	strh	r2, [r3, #4]
}
 8001914:	bf00      	nop
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	0800a934 	.word	0x0800a934
 8001920:	20000684 	.word	0x20000684

08001924 <HAL_TIM_PeriodElapsedCallback>:
	  HAL_GPIO_WritePin(GPIOA, OLED_CS_Pin, GPIO_PIN_SET);
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM6)   GyroData = true;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a05      	ldr	r2, [pc, #20]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d102      	bne.n	800193c <HAL_TIM_PeriodElapsedCallback+0x18>
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40001000 	.word	0x40001000
 800194c:	2000021c 	.word	0x2000021c

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b090      	sub	sp, #64	; 0x40
 8001954:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char str[40];
    int16_t yy=0;
 8001956:	2300      	movs	r3, #0
 8001958:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195a:	f000 ffec 	bl	8002936 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195e:	f000 f8e3 	bl	8001b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001962:	f000 fa17 	bl	8001d94 <MX_GPIO_Init>
 // MX_DMA_Init();
  MX_USART2_UART_Init();
 8001966:	f000 f9e5 	bl	8001d34 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800196a:	f000 f96d 	bl	8001c48 <MX_SPI1_Init>
  MX_I2C1_Init();
 800196e:	f000 f92b 	bl	8001bc8 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001972:	f000 f9a7 	bl	8001cc4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // SSD1306 OLED Init
  ssd1306_Init();
 8001976:	f000 faef 	bl	8001f58 <ssd1306_Init>

  GY_801_Start();
 800197a:	f7ff fe55 	bl	8001628 <GY_801_Start>

  Init_L3G4200D();
 800197e:	f7ff fe69 	bl	8001654 <Init_L3G4200D>
  Init_ADXL345();
 8001982:	f7ff fadd 	bl	8000f40 <Init_ADXL345>
  HAL_Delay(100);
 8001986:	2064      	movs	r0, #100	; 0x64
 8001988:	f001 f84a 	bl	8002a20 <HAL_Delay>
  Init_HMC5883L();
 800198c:	f7ff fd48 	bl	8001420 <Init_HMC5883L>
  HAL_Delay(100);
 8001990:	2064      	movs	r0, #100	; 0x64
 8001992:	f001 f845 	bl	8002a20 <HAL_Delay>

  // Timer Interrupt Init
  while(HAL_TIM_Base_Start_IT(&htim6)!=HAL_OK);
 8001996:	bf00      	nop
 8001998:	485b      	ldr	r0, [pc, #364]	; (8001b08 <main+0x1b8>)
 800199a:	f003 ffed 	bl	8005978 <HAL_TIM_Base_Start_IT>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f9      	bne.n	8001998 <main+0x48>

  sprintf(str,"MPU_Check : 0x%X\r\n",L3G4200D_WhoAmI());
 80019a4:	f7ff fea4 	bl	80016f0 <L3G4200D_WhoAmI>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	463b      	mov	r3, r7
 80019ae:	4957      	ldr	r1, [pc, #348]	; (8001b0c <main+0x1bc>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f005 fb7f 	bl	80070b4 <siprintf>
  ssd1306_SetCursor(2, yy);
 80019b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	4619      	mov	r1, r3
 80019bc:	2002      	movs	r0, #2
 80019be:	f000 fc91 	bl	80022e4 <ssd1306_SetCursor>
  ssd1306_WriteString(str, Font_7x10, White);
 80019c2:	4a53      	ldr	r2, [pc, #332]	; (8001b10 <main+0x1c0>)
 80019c4:	4638      	mov	r0, r7
 80019c6:	2301      	movs	r3, #1
 80019c8:	ca06      	ldmia	r2, {r1, r2}
 80019ca:	f000 fc65 	bl	8002298 <ssd1306_WriteString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  bool tgl=true;
 80019ce:	2301      	movs	r3, #1
 80019d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  yy = 12;
 80019d4:	230c      	movs	r3, #12
 80019d6:	86fb      	strh	r3, [r7, #54]	; 0x36
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(GyroData==true) {
 80019d8:	4b4e      	ldr	r3, [pc, #312]	; (8001b14 <main+0x1c4>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0fa      	beq.n	80019d8 <main+0x88>
		  float	temp;
		  int32_t press;
		  float altitude;

		  L3G4200D_Read(&G);
 80019e2:	484d      	ldr	r0, [pc, #308]	; (8001b18 <main+0x1c8>)
 80019e4:	f7ff feaa 	bl	800173c <L3G4200D_Read>
		  ADXL345_Read(&A);
 80019e8:	484c      	ldr	r0, [pc, #304]	; (8001b1c <main+0x1cc>)
 80019ea:	f7ff fae7 	bl	8000fbc <ADXL345_Read>
		  HMC5883L_Read(&C);
 80019ee:	484c      	ldr	r0, [pc, #304]	; (8001b20 <main+0x1d0>)
 80019f0:	f7ff fd54 	bl	800149c <HMC5883L_Read>

		  temp = BMP180_GetTempC();
 80019f4:	f7ff fb30 	bl	8001058 <BMP180_GetTempC>
 80019f8:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		  press = BMP180_GetPressure();
 80019fc:	f7ff fbb2 	bl	8001164 <BMP180_GetPressure>
 8001a00:	62f8      	str	r0, [r7, #44]	; 0x2c
		  altitude = BMP180_GetAltitude(press);
 8001a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a04:	f7ff fcc4 	bl	8001390 <BMP180_GetAltitude>
 8001a08:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28

		  sprintf(str,"%6d%6d%6d",G.x,G.y,G.z);
 8001a0c:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <main+0x1c8>)
 8001a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <main+0x1c8>)
 8001a16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4b3e      	ldr	r3, [pc, #248]	; (8001b18 <main+0x1c8>)
 8001a1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a22:	4638      	mov	r0, r7
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	460b      	mov	r3, r1
 8001a28:	493e      	ldr	r1, [pc, #248]	; (8001b24 <main+0x1d4>)
 8001a2a:	f005 fb43 	bl	80070b4 <siprintf>
		  ssd1306_SetCursor(2, yy);
 8001a2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4619      	mov	r1, r3
 8001a34:	2002      	movs	r0, #2
 8001a36:	f000 fc55 	bl	80022e4 <ssd1306_SetCursor>
		  ssd1306_WriteString(str, Font_7x10, White);
 8001a3a:	4a35      	ldr	r2, [pc, #212]	; (8001b10 <main+0x1c0>)
 8001a3c:	4638      	mov	r0, r7
 8001a3e:	2301      	movs	r3, #1
 8001a40:	ca06      	ldmia	r2, {r1, r2}
 8001a42:	f000 fc29 	bl	8002298 <ssd1306_WriteString>

		  yy += 12;
 8001a46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a48:	330c      	adds	r3, #12
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	86fb      	strh	r3, [r7, #54]	; 0x36
		  sprintf(str,"%6d%6d%6d",A.x,A.y,A.z);
 8001a4e:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <main+0x1cc>)
 8001a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <main+0x1cc>)
 8001a58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <main+0x1cc>)
 8001a60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a64:	4638      	mov	r0, r7
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	492e      	ldr	r1, [pc, #184]	; (8001b24 <main+0x1d4>)
 8001a6c:	f005 fb22 	bl	80070b4 <siprintf>
		  ssd1306_SetCursor(2, yy);
 8001a70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	4619      	mov	r1, r3
 8001a76:	2002      	movs	r0, #2
 8001a78:	f000 fc34 	bl	80022e4 <ssd1306_SetCursor>
		  ssd1306_WriteString(str, Font_7x10, White);
 8001a7c:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <main+0x1c0>)
 8001a7e:	4638      	mov	r0, r7
 8001a80:	2301      	movs	r3, #1
 8001a82:	ca06      	ldmia	r2, {r1, r2}
 8001a84:	f000 fc08 	bl	8002298 <ssd1306_WriteString>

		  yy += 12;
 8001a88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a8a:	330c      	adds	r3, #12
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	86fb      	strh	r3, [r7, #54]	; 0x36
		  sprintf(str,"%6d%6d%6d",C.x,C.y,C.z);
 8001a90:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <main+0x1d0>)
 8001a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <main+0x1d0>)
 8001a9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <main+0x1d0>)
 8001aa2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001aa6:	4638      	mov	r0, r7
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	491d      	ldr	r1, [pc, #116]	; (8001b24 <main+0x1d4>)
 8001aae:	f005 fb01 	bl	80070b4 <siprintf>
		  ssd1306_SetCursor(2, yy);
 8001ab2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	2002      	movs	r0, #2
 8001aba:	f000 fc13 	bl	80022e4 <ssd1306_SetCursor>
		  ssd1306_WriteString(str, Font_7x10, White);
 8001abe:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <main+0x1c0>)
 8001ac0:	4638      	mov	r0, r7
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	ca06      	ldmia	r2, {r1, r2}
 8001ac6:	f000 fbe7 	bl	8002298 <ssd1306_WriteString>

		  yy += 12;
 8001aca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001acc:	330c      	adds	r3, #12
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	86fb      	strh	r3, [r7, #54]	; 0x36
		  //aref1 = ((aref1 * ADC[1]) / 4096.0) / aref1;
		  //aref2 = ((aref1 * ADC[2]) / 4096.0) / aref1;

		  //sprintf(str,"%6.2f%7ld%6.2f",temp,press,altitude);     // aref1*125-12.5, aref2*218.75-66.875);
		  //ssd1306_WriteString(str, Font_7x10, White);
		  tgl = !tgl;
 8001ad2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf14      	ite	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	2300      	moveq	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f083 0301 	eor.w	r3, r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001aea:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	  	  ssd1306_UpdateScreen();
 8001af6:	f000 fabd 	bl	8002074 <ssd1306_UpdateScreen>

	  	  yy = 12;
 8001afa:	230c      	movs	r3, #12
 8001afc:	86fb      	strh	r3, [r7, #54]	; 0x36
	  	  HAL_Delay(500);
 8001afe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b02:	f000 ff8d 	bl	8002a20 <HAL_Delay>
	  if(GyroData==true) {
 8001b06:	e767      	b.n	80019d8 <main+0x88>
 8001b08:	200006d0 	.word	0x200006d0
 8001b0c:	0800a93c 	.word	0x0800a93c
 8001b10:	20000008 	.word	0x20000008
 8001b14:	2000021c 	.word	0x2000021c
 8001b18:	2000066c 	.word	0x2000066c
 8001b1c:	20000644 	.word	0x20000644
 8001b20:	20000664 	.word	0x20000664
 8001b24:	0800a950 	.word	0x0800a950

08001b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b096      	sub	sp, #88	; 0x58
 8001b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	2244      	movs	r2, #68	; 0x44
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 fe4a 	bl	80067d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
 8001b48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b4e:	f002 f8c7 	bl	8003ce0 <HAL_PWREx_ControlVoltageScaling>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b58:	f000 f992 	bl	8001e80 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b60:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b66:	2302      	movs	r3, #2
 8001b68:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001b72:	2314      	movs	r3, #20
 8001b74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b76:	2307      	movs	r3, #7
 8001b78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 f900 	bl	8003d8c <HAL_RCC_OscConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001b92:	f000 f975 	bl	8001e80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b96:	230f      	movs	r3, #15
 8001b98:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001baa:	463b      	mov	r3, r7
 8001bac:	2104      	movs	r1, #4
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 fd0c 	bl	80045cc <HAL_RCC_ClockConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001bba:	f000 f961 	bl	8001e80 <Error_Handler>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3758      	adds	r7, #88	; 0x58
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <MX_I2C1_Init+0x74>)
 8001bce:	4a1c      	ldr	r2, [pc, #112]	; (8001c40 <MX_I2C1_Init+0x78>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <MX_I2C1_Init+0x74>)
 8001bd4:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <MX_I2C1_Init+0x7c>)
 8001bd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_I2C1_Init+0x74>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <MX_I2C1_Init+0x74>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <MX_I2C1_Init+0x74>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <MX_I2C1_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <MX_I2C1_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_I2C1_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_I2C1_Init+0x74>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c02:	480e      	ldr	r0, [pc, #56]	; (8001c3c <MX_I2C1_Init+0x74>)
 8001c04:	f001 fb6c 	bl	80032e0 <HAL_I2C_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c0e:	f000 f937 	bl	8001e80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c12:	2100      	movs	r1, #0
 8001c14:	4809      	ldr	r0, [pc, #36]	; (8001c3c <MX_I2C1_Init+0x74>)
 8001c16:	f001 ffbd 	bl	8003b94 <HAL_I2CEx_ConfigAnalogFilter>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c20:	f000 f92e 	bl	8001e80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c24:	2100      	movs	r1, #0
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_I2C1_Init+0x74>)
 8001c28:	f001 ffff 	bl	8003c2a <HAL_I2CEx_ConfigDigitalFilter>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c32:	f000 f925 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000684 	.word	0x20000684
 8001c40:	40005400 	.word	0x40005400
 8001c44:	00702991 	.word	0x00702991

08001c48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <MX_SPI1_Init+0x78>)
 8001c50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c60:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c62:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c64:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c84:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c98:	2207      	movs	r2, #7
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001caa:	f003 f97b 	bl	8004fa4 <HAL_SPI_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001cb4:	f000 f8e4 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	2000071c 	.word	0x2000071c
 8001cc0:	40013000 	.word	0x40013000

08001cc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <MX_TIM6_Init+0x68>)
 8001cd6:	4a16      	ldr	r2, [pc, #88]	; (8001d30 <MX_TIM6_Init+0x6c>)
 8001cd8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800-1;
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_TIM6_Init+0x68>)
 8001cdc:	f240 321f 	movw	r2, #799	; 0x31f
 8001ce0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <MX_TIM6_Init+0x68>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <MX_TIM6_Init+0x68>)
 8001cea:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_TIM6_Init+0x68>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cf6:	480d      	ldr	r0, [pc, #52]	; (8001d2c <MX_TIM6_Init+0x68>)
 8001cf8:	f003 fde6 	bl	80058c8 <HAL_TIM_Base_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001d02:	f000 f8bd 	bl	8001e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4806      	ldr	r0, [pc, #24]	; (8001d2c <MX_TIM6_Init+0x68>)
 8001d14:	f004 f830 	bl	8005d78 <HAL_TIMEx_MasterConfigSynchronization>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001d1e:	f000 f8af 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200006d0 	.word	0x200006d0
 8001d30:	40001000 	.word	0x40001000

08001d34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d3a:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <MX_USART2_UART_Init+0x5c>)
 8001d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_USART2_UART_Init+0x58>)
 8001d78:	f004 f882 	bl	8005e80 <HAL_UART_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d82:	f000 f87d 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000780 	.word	0x20000780
 8001d90:	40004400 	.word	0x40004400

08001d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001daa:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <MX_GPIO_Init+0xb8>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a27      	ldr	r2, [pc, #156]	; (8001e4c <MX_GPIO_Init+0xb8>)
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db6:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <MX_GPIO_Init+0xb8>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <MX_GPIO_Init+0xb8>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a21      	ldr	r2, [pc, #132]	; (8001e4c <MX_GPIO_Init+0xb8>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dce:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <MX_GPIO_Init+0xb8>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <MX_GPIO_Init+0xb8>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <MX_GPIO_Init+0xb8>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <MX_GPIO_Init+0xb8>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RESET_Pin|OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	211a      	movs	r1, #26
 8001df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfa:	f001 fa59 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|I2C_VCC_Pin, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2118      	movs	r1, #24
 8001e02:	4813      	ldr	r0, [pc, #76]	; (8001e50 <MX_GPIO_Init+0xbc>)
 8001e04:	f001 fa54 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RESET_Pin OLED_DC_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin|OLED_DC_Pin|OLED_CS_Pin;
 8001e08:	231a      	movs	r3, #26
 8001e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e22:	f001 f8db 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 I2C_VCC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|I2C_VCC_Pin;
 8001e26:	2318      	movs	r3, #24
 8001e28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <MX_GPIO_Init+0xbc>)
 8001e3e:	f001 f8cd 	bl	8002fdc <HAL_GPIO_Init>

}
 8001e42:	bf00      	nop
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	48000400 	.word	0x48000400

08001e54 <_write>:
// printf
//**********************************************************************

#ifdef __GNUC__
int _write(int file,uint8_t*ptr,int len)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,ptr,len,1000);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	4804      	ldr	r0, [pc, #16]	; (8001e7c <_write+0x28>)
 8001e6c:	f004 f856 	bl	8005f1c <HAL_UART_Transmit>
return len;
 8001e70:	687b      	ldr	r3, [r7, #4]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000780 	.word	0x20000780

08001e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e84:	b672      	cpsid	i
}
 8001e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <Error_Handler+0x8>

08001e8a <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2110      	movs	r1, #16
 8001e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e96:	f001 fa0b 	bl	80032b0 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea2:	f001 fa05 	bl	80032b0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001ea6:	200a      	movs	r0, #10
 8001ea8:	f000 fdba 	bl	8002a20 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8001eac:	2201      	movs	r2, #1
 8001eae:	2102      	movs	r1, #2
 8001eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb4:	f001 f9fc 	bl	80032b0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001eb8:	200a      	movs	r0, #10
 8001eba:	f000 fdb1 	bl	8002a20 <HAL_Delay>
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(&SSD1306_SPI_PORT, SPI_FLAG_TXE));
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2110      	movs	r1, #16
 8001ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed6:	f001 f9eb 	bl	80032b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001eda:	2200      	movs	r2, #0
 8001edc:	2108      	movs	r1, #8
 8001ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee2:	f001 f9e5 	bl	80032b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8001ee6:	1df9      	adds	r1, r7, #7
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eec:	2201      	movs	r2, #1
 8001eee:	4806      	ldr	r0, [pc, #24]	; (8001f08 <ssd1306_WriteCommand+0x44>)
 8001ef0:	f003 f8fb 	bl	80050ea <HAL_SPI_Transmit>

	//HAL_SPI_Transmit_DMA(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1);

    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2110      	movs	r1, #16
 8001ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efc:	f001 f9d8 	bl	80032b0 <HAL_GPIO_WritePin>
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	2000071c 	.word	0x2000071c

08001f0c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
	//while(!__HAL_SPI_GET_FLAG(&SSD1306_SPI_PORT, SPI_FLAG_TXE));
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001f16:	2200      	movs	r2, #0
 8001f18:	2110      	movs	r1, #16
 8001f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1e:	f001 f9c7 	bl	80032b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001f22:	2201      	movs	r2, #1
 8001f24:	2108      	movs	r1, #8
 8001f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2a:	f001 f9c1 	bl	80032b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4806      	ldr	r0, [pc, #24]	; (8001f54 <ssd1306_WriteData+0x48>)
 8001f3a:	f003 f8d6 	bl	80050ea <HAL_SPI_Transmit>

	//HAL_SPI_Transmit_DMA(&SSD1306_SPI_PORT, (uint8_t *)buffer, buff_size);

    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2110      	movs	r1, #16
 8001f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f46:	f001 f9b3 	bl	80032b0 <HAL_GPIO_WritePin>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2000071c 	.word	0x2000071c

08001f58 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001f5c:	f7ff ff95 	bl	8001e8a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001f60:	2064      	movs	r0, #100	; 0x64
 8001f62:	f000 fd5d 	bl	8002a20 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001f66:	2000      	movs	r0, #0
 8001f68:	f000 f9e8 	bl	800233c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001f6c:	2020      	movs	r0, #32
 8001f6e:	f7ff ffa9 	bl	8001ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7ff ffa6 	bl	8001ec4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f78:	20b0      	movs	r0, #176	; 0xb0
 8001f7a:	f7ff ffa3 	bl	8001ec4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001f7e:	20c8      	movs	r0, #200	; 0xc8
 8001f80:	f7ff ffa0 	bl	8001ec4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff ff9d 	bl	8001ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001f8a:	2010      	movs	r0, #16
 8001f8c:	f7ff ff9a 	bl	8001ec4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK 0x40
 8001f90:	2040      	movs	r0, #64	; 0x40
 8001f92:	f7ff ff97 	bl	8001ec4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001f96:	20ff      	movs	r0, #255	; 0xff
 8001f98:	f000 f9bc 	bl	8002314 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001f9c:	20a1      	movs	r0, #161	; 0xa1
 8001f9e:	f7ff ff91 	bl	8001ec4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001fa2:	20a6      	movs	r0, #166	; 0xa6
 8001fa4:	f7ff ff8e 	bl	8001ec4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001fa8:	20a8      	movs	r0, #168	; 0xa8
 8001faa:	f7ff ff8b 	bl	8001ec4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001fae:	203f      	movs	r0, #63	; 0x3f
 8001fb0:	f7ff ff88 	bl	8001ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001fb4:	20a4      	movs	r0, #164	; 0xa4
 8001fb6:	f7ff ff85 	bl	8001ec4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001fba:	20d3      	movs	r0, #211	; 0xd3
 8001fbc:	f7ff ff82 	bl	8001ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7ff ff7f 	bl	8001ec4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001fc6:	20d5      	movs	r0, #213	; 0xd5
 8001fc8:	f7ff ff7c 	bl	8001ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001fcc:	20f0      	movs	r0, #240	; 0xf0
 8001fce:	f7ff ff79 	bl	8001ec4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001fd2:	20d9      	movs	r0, #217	; 0xd9
 8001fd4:	f7ff ff76 	bl	8001ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001fd8:	2022      	movs	r0, #34	; 0x22
 8001fda:	f7ff ff73 	bl	8001ec4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001fde:	20da      	movs	r0, #218	; 0xda
 8001fe0:	f7ff ff70 	bl	8001ec4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001fe4:	2012      	movs	r0, #18
 8001fe6:	f7ff ff6d 	bl	8001ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001fea:	20db      	movs	r0, #219	; 0xdb
 8001fec:	f7ff ff6a 	bl	8001ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ff0:	2020      	movs	r0, #32
 8001ff2:	f7ff ff67 	bl	8001ec4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001ff6:	208d      	movs	r0, #141	; 0x8d
 8001ff8:	f7ff ff64 	bl	8001ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ffc:	2014      	movs	r0, #20
 8001ffe:	f7ff ff61 	bl	8001ec4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002002:	2001      	movs	r0, #1
 8002004:	f000 f99a 	bl	800233c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002008:	2000      	movs	r0, #0
 800200a:	f000 f80f 	bl	800202c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800200e:	f000 f831 	bl	8002074 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <ssd1306_Init+0xd0>)
 8002014:	2200      	movs	r2, #0
 8002016:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <ssd1306_Init+0xd0>)
 800201a:	2200      	movs	r2, #0
 800201c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800201e:	4b02      	ldr	r3, [pc, #8]	; (8002028 <ssd1306_Init+0xd0>)
 8002020:	2201      	movs	r2, #1
 8002022:	711a      	strb	r2, [r3, #4]
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000630 	.word	0x20000630

0800202c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e00d      	b.n	8002058 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <ssd1306_Fill+0x1a>
 8002042:	2100      	movs	r1, #0
 8002044:	e000      	b.n	8002048 <ssd1306_Fill+0x1c>
 8002046:	21ff      	movs	r1, #255	; 0xff
 8002048:	4a09      	ldr	r2, [pc, #36]	; (8002070 <ssd1306_Fill+0x44>)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	460a      	mov	r2, r1
 8002050:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	3301      	adds	r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800205e:	d3ed      	bcc.n	800203c <ssd1306_Fill+0x10>
    }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000220 	.word	0x20000220

08002074 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800207a:	2300      	movs	r3, #0
 800207c:	71fb      	strb	r3, [r7, #7]
 800207e:	e01a      	b.n	80020b6 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	3b50      	subs	r3, #80	; 0x50
 8002084:	b2db      	uxtb	r3, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff1c 	bl	8001ec4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800208c:	2000      	movs	r0, #0
 800208e:	f7ff ff19 	bl	8001ec4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);  //0x10
 8002092:	2010      	movs	r0, #16
 8002094:	f7ff ff16 	bl	8001ec4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002098:	79fa      	ldrb	r2, [r7, #7]
 800209a:	4613      	mov	r3, r2
 800209c:	019b      	lsls	r3, r3, #6
 800209e:	4413      	add	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <ssd1306_UpdateScreen+0x54>)
 80020a6:	4413      	add	r3, r2
 80020a8:	2182      	movs	r1, #130	; 0x82
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff2e 	bl	8001f0c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	3301      	adds	r3, #1
 80020b4:	71fb      	strb	r3, [r7, #7]
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	2b07      	cmp	r3, #7
 80020ba:	d9e1      	bls.n	8002080 <ssd1306_UpdateScreen+0xc>
    }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000220 	.word	0x20000220

080020cc <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80020cc:	b490      	push	{r4, r7}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
 80020d6:	460b      	mov	r3, r1
 80020d8:	71bb      	strb	r3, [r7, #6]
 80020da:	4613      	mov	r3, r2
 80020dc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b81      	cmp	r3, #129	; 0x81
 80020e2:	d849      	bhi.n	8002178 <ssd1306_DrawPixel+0xac>
 80020e4:	79bb      	ldrb	r3, [r7, #6]
 80020e6:	2b3f      	cmp	r3, #63	; 0x3f
 80020e8:	d846      	bhi.n	8002178 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80020ea:	797b      	ldrb	r3, [r7, #5]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d120      	bne.n	8002132 <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80020f0:	79fa      	ldrb	r2, [r7, #7]
 80020f2:	79bb      	ldrb	r3, [r7, #6]
 80020f4:	08db      	lsrs	r3, r3, #3
 80020f6:	b2d8      	uxtb	r0, r3
 80020f8:	4601      	mov	r1, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	019b      	lsls	r3, r3, #6
 80020fe:	440b      	add	r3, r1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <ssd1306_DrawPixel+0xb8>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	b25a      	sxtb	r2, r3
 800210a:	79bb      	ldrb	r3, [r7, #6]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	b25b      	sxtb	r3, r3
 8002118:	4313      	orrs	r3, r2
 800211a:	b25c      	sxtb	r4, r3
 800211c:	79fa      	ldrb	r2, [r7, #7]
 800211e:	4601      	mov	r1, r0
 8002120:	460b      	mov	r3, r1
 8002122:	019b      	lsls	r3, r3, #6
 8002124:	440b      	add	r3, r1
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	b2e1      	uxtb	r1, r4
 800212c:	4a15      	ldr	r2, [pc, #84]	; (8002184 <ssd1306_DrawPixel+0xb8>)
 800212e:	54d1      	strb	r1, [r2, r3]
 8002130:	e023      	b.n	800217a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002132:	79fa      	ldrb	r2, [r7, #7]
 8002134:	79bb      	ldrb	r3, [r7, #6]
 8002136:	08db      	lsrs	r3, r3, #3
 8002138:	b2d8      	uxtb	r0, r3
 800213a:	4601      	mov	r1, r0
 800213c:	460b      	mov	r3, r1
 800213e:	019b      	lsls	r3, r3, #6
 8002140:	440b      	add	r3, r1
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4413      	add	r3, r2
 8002146:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <ssd1306_DrawPixel+0xb8>)
 8002148:	5cd3      	ldrb	r3, [r2, r3]
 800214a:	b25a      	sxtb	r2, r3
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	b25b      	sxtb	r3, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	b25b      	sxtb	r3, r3
 800215e:	4013      	ands	r3, r2
 8002160:	b25c      	sxtb	r4, r3
 8002162:	79fa      	ldrb	r2, [r7, #7]
 8002164:	4601      	mov	r1, r0
 8002166:	460b      	mov	r3, r1
 8002168:	019b      	lsls	r3, r3, #6
 800216a:	440b      	add	r3, r1
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	b2e1      	uxtb	r1, r4
 8002172:	4a04      	ldr	r2, [pc, #16]	; (8002184 <ssd1306_DrawPixel+0xb8>)
 8002174:	54d1      	strb	r1, [r2, r3]
 8002176:	e000      	b.n	800217a <ssd1306_DrawPixel+0xae>
        return;
 8002178:	bf00      	nop
    }
}
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bc90      	pop	{r4, r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000220 	.word	0x20000220

08002188 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	4604      	mov	r4, r0
 8002190:	1d38      	adds	r0, r7, #4
 8002192:	e880 0006 	stmia.w	r0, {r1, r2}
 8002196:	461a      	mov	r2, r3
 8002198:	4623      	mov	r3, r4
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	4613      	mov	r3, r2
 800219e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	2b1f      	cmp	r3, #31
 80021a4:	d902      	bls.n	80021ac <ssd1306_WriteChar+0x24>
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b7e      	cmp	r3, #126	; 0x7e
 80021aa:	d901      	bls.n	80021b0 <ssd1306_WriteChar+0x28>
        return 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e06d      	b.n	800228c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80021b0:	4b38      	ldr	r3, [pc, #224]	; (8002294 <ssd1306_WriteChar+0x10c>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	793b      	ldrb	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	2b82      	cmp	r3, #130	; 0x82
 80021bc:	dc06      	bgt.n	80021cc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80021be:	4b35      	ldr	r3, [pc, #212]	; (8002294 <ssd1306_WriteChar+0x10c>)
 80021c0:	885b      	ldrh	r3, [r3, #2]
 80021c2:	461a      	mov	r2, r3
 80021c4:	797b      	ldrb	r3, [r7, #5]
 80021c6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80021c8:	2b40      	cmp	r3, #64	; 0x40
 80021ca:	dd01      	ble.n	80021d0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	e05d      	b.n	800228c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	e04c      	b.n	8002270 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	3b20      	subs	r3, #32
 80021dc:	7979      	ldrb	r1, [r7, #5]
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4619      	mov	r1, r3
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	440b      	add	r3, r1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80021f0:	2300      	movs	r3, #0
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	e034      	b.n	8002260 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d012      	beq.n	800222c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002206:	4b23      	ldr	r3, [pc, #140]	; (8002294 <ssd1306_WriteChar+0x10c>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	4413      	add	r3, r2
 8002212:	b2d8      	uxtb	r0, r3
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <ssd1306_WriteChar+0x10c>)
 8002216:	885b      	ldrh	r3, [r3, #2]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	4413      	add	r3, r2
 8002220:	b2db      	uxtb	r3, r3
 8002222:	7bba      	ldrb	r2, [r7, #14]
 8002224:	4619      	mov	r1, r3
 8002226:	f7ff ff51 	bl	80020cc <ssd1306_DrawPixel>
 800222a:	e016      	b.n	800225a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <ssd1306_WriteChar+0x10c>)
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	4413      	add	r3, r2
 8002238:	b2d8      	uxtb	r0, r3
 800223a:	4b16      	ldr	r3, [pc, #88]	; (8002294 <ssd1306_WriteChar+0x10c>)
 800223c:	885b      	ldrh	r3, [r3, #2]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	4413      	add	r3, r2
 8002246:	b2d9      	uxtb	r1, r3
 8002248:	7bbb      	ldrb	r3, [r7, #14]
 800224a:	2b00      	cmp	r3, #0
 800224c:	bf0c      	ite	eq
 800224e:	2301      	moveq	r3, #1
 8002250:	2300      	movne	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	f7ff ff39 	bl	80020cc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	3301      	adds	r3, #1
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	793b      	ldrb	r3, [r7, #4]
 8002262:	461a      	mov	r2, r3
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	4293      	cmp	r3, r2
 8002268:	d3c5      	bcc.n	80021f6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3301      	adds	r3, #1
 800226e:	61fb      	str	r3, [r7, #28]
 8002270:	797b      	ldrb	r3, [r7, #5]
 8002272:	461a      	mov	r2, r3
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	4293      	cmp	r3, r2
 8002278:	d3ad      	bcc.n	80021d6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <ssd1306_WriteChar+0x10c>)
 800227c:	881a      	ldrh	r2, [r3, #0]
 800227e:	793b      	ldrb	r3, [r7, #4]
 8002280:	b29b      	uxth	r3, r3
 8002282:	4413      	add	r3, r2
 8002284:	b29a      	uxth	r2, r3
 8002286:	4b03      	ldr	r3, [pc, #12]	; (8002294 <ssd1306_WriteChar+0x10c>)
 8002288:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800228a:	7bfb      	ldrb	r3, [r7, #15]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3724      	adds	r7, #36	; 0x24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd90      	pop	{r4, r7, pc}
 8002294:	20000630 	.word	0x20000630

08002298 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	1d38      	adds	r0, r7, #4
 80022a2:	e880 0006 	stmia.w	r0, {r1, r2}
 80022a6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80022a8:	e012      	b.n	80022d0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	7818      	ldrb	r0, [r3, #0]
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	1d3a      	adds	r2, r7, #4
 80022b2:	ca06      	ldmia	r2, {r1, r2}
 80022b4:	f7ff ff68 	bl	8002188 <ssd1306_WriteChar>
 80022b8:	4603      	mov	r3, r0
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d002      	beq.n	80022ca <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	e008      	b.n	80022dc <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	3301      	adds	r3, #1
 80022ce:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e8      	bne.n	80022aa <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	781b      	ldrb	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	460a      	mov	r2, r1
 80022ee:	71fb      	strb	r3, [r7, #7]
 80022f0:	4613      	mov	r3, r2
 80022f2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <ssd1306_SetCursor+0x2c>)
 80022fa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80022fc:	79bb      	ldrb	r3, [r7, #6]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <ssd1306_SetCursor+0x2c>)
 8002302:	805a      	strh	r2, [r3, #2]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	20000630 	.word	0x20000630

08002314 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800231e:	2381      	movs	r3, #129	; 0x81
 8002320:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fdcd 	bl	8001ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fdc9 	bl	8001ec4 <ssd1306_WriteCommand>
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800234c:	23af      	movs	r3, #175	; 0xaf
 800234e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <ssd1306_SetDisplayOn+0x38>)
 8002352:	2201      	movs	r2, #1
 8002354:	715a      	strb	r2, [r3, #5]
 8002356:	e004      	b.n	8002362 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002358:	23ae      	movs	r3, #174	; 0xae
 800235a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <ssd1306_SetDisplayOn+0x38>)
 800235e:	2200      	movs	r2, #0
 8002360:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fdad 	bl	8001ec4 <ssd1306_WriteCommand>
}
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000630 	.word	0x20000630

08002378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_MspInit+0x50>)
 8002380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002382:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <HAL_MspInit+0x50>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6613      	str	r3, [r2, #96]	; 0x60
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_MspInit+0x50>)
 800238c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <HAL_MspInit+0x50>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <HAL_MspInit+0x50>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a0:	6593      	str	r3, [r2, #88]	; 0x58
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_MspInit+0x50>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	2005      	movs	r0, #5
 80023b4:	f000 fc33 	bl	8002c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80023b8:	2005      	movs	r0, #5
 80023ba:	f000 fc4c 	bl	8002c56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000

080023cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b09e      	sub	sp, #120	; 0x78
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023e4:	f107 0310 	add.w	r3, r7, #16
 80023e8:	2254      	movs	r2, #84	; 0x54
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f004 f9ef 	bl	80067d0 <memset>
  if(hi2c->Instance==I2C1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <HAL_I2C_MspInit+0xa8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d137      	bne.n	800246c <HAL_I2C_MspInit+0xa0>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80023fc:	2340      	movs	r3, #64	; 0x40
 80023fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002400:	2300      	movs	r3, #0
 8002402:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	4618      	mov	r0, r3
 800240a:	f002 fae5 	bl	80049d8 <HAL_RCCEx_PeriphCLKConfig>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002414:	f7ff fd34 	bl	8001e80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_I2C_MspInit+0xac>)
 800241a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241c:	4a16      	ldr	r2, [pc, #88]	; (8002478 <HAL_I2C_MspInit+0xac>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <HAL_I2C_MspInit+0xac>)
 8002426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002430:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002434:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002436:	2312      	movs	r3, #18
 8002438:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002442:	2304      	movs	r3, #4
 8002444:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002446:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800244a:	4619      	mov	r1, r3
 800244c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002450:	f000 fdc4 	bl	8002fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_I2C_MspInit+0xac>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <HAL_I2C_MspInit+0xac>)
 800245a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800245e:	6593      	str	r3, [r2, #88]	; 0x58
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_I2C_MspInit+0xac>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800246c:	bf00      	nop
 800246e:	3778      	adds	r7, #120	; 0x78
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40005400 	.word	0x40005400
 8002478:	40021000 	.word	0x40021000

0800247c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a30      	ldr	r2, [pc, #192]	; (800255c <HAL_SPI_MspInit+0xe0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d159      	bne.n	8002552 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800249e:	4b30      	ldr	r3, [pc, #192]	; (8002560 <HAL_SPI_MspInit+0xe4>)
 80024a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a2:	4a2f      	ldr	r2, [pc, #188]	; (8002560 <HAL_SPI_MspInit+0xe4>)
 80024a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024a8:	6613      	str	r3, [r2, #96]	; 0x60
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_SPI_MspInit+0xe4>)
 80024ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <HAL_SPI_MspInit+0xe4>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	4a29      	ldr	r2, [pc, #164]	; (8002560 <HAL_SPI_MspInit+0xe4>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c2:	4b27      	ldr	r3, [pc, #156]	; (8002560 <HAL_SPI_MspInit+0xe4>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80024ce:	23a0      	movs	r3, #160	; 0xa0
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024da:	2303      	movs	r3, #3
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024de:	2305      	movs	r3, #5
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ec:	f000 fd76 	bl	8002fdc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80024f0:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <HAL_SPI_MspInit+0xe8>)
 80024f2:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <HAL_SPI_MspInit+0xec>)
 80024f4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80024f6:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_SPI_MspInit+0xe8>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_SPI_MspInit+0xe8>)
 80024fe:	2210      	movs	r2, #16
 8002500:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <HAL_SPI_MspInit+0xe8>)
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_SPI_MspInit+0xe8>)
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_SPI_MspInit+0xe8>)
 8002510:	2200      	movs	r2, #0
 8002512:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <HAL_SPI_MspInit+0xe8>)
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_SPI_MspInit+0xe8>)
 800251c:	2200      	movs	r2, #0
 800251e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_SPI_MspInit+0xe8>)
 8002522:	2200      	movs	r2, #0
 8002524:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002526:	480f      	ldr	r0, [pc, #60]	; (8002564 <HAL_SPI_MspInit+0xe8>)
 8002528:	f000 fbb0 	bl	8002c8c <HAL_DMA_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8002532:	f7ff fca5 	bl	8001e80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <HAL_SPI_MspInit+0xe8>)
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
 800253c:	4a09      	ldr	r2, [pc, #36]	; (8002564 <HAL_SPI_MspInit+0xe8>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	2023      	movs	r0, #35	; 0x23
 8002548:	f000 fb69 	bl	8002c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800254c:	2023      	movs	r0, #35	; 0x23
 800254e:	f000 fb82 	bl	8002c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002552:	bf00      	nop
 8002554:	3728      	adds	r7, #40	; 0x28
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40013000 	.word	0x40013000
 8002560:	40021000 	.word	0x40021000
 8002564:	20000804 	.word	0x20000804
 8002568:	40020030 	.word	0x40020030

0800256c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <HAL_TIM_Base_MspInit+0x44>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d113      	bne.n	80025a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <HAL_TIM_Base_MspInit+0x48>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	4a0c      	ldr	r2, [pc, #48]	; (80025b4 <HAL_TIM_Base_MspInit+0x48>)
 8002584:	f043 0310 	orr.w	r3, r3, #16
 8002588:	6593      	str	r3, [r2, #88]	; 0x58
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_TIM_Base_MspInit+0x48>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2036      	movs	r0, #54	; 0x36
 800259c:	f000 fb3f 	bl	8002c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025a0:	2036      	movs	r0, #54	; 0x36
 80025a2:	f000 fb58 	bl	8002c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40001000 	.word	0x40001000
 80025b4:	40021000 	.word	0x40021000

080025b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b09e      	sub	sp, #120	; 0x78
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	2254      	movs	r2, #84	; 0x54
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f004 f8f9 	bl	80067d0 <memset>
  if(huart->Instance==USART2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a28      	ldr	r2, [pc, #160]	; (8002684 <HAL_UART_MspInit+0xcc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d148      	bne.n	800267a <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025e8:	2302      	movs	r3, #2
 80025ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 f9ef 	bl	80049d8 <HAL_RCCEx_PeriphCLKConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002600:	f7ff fc3e 	bl	8001e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_UART_MspInit+0xd0>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <HAL_UART_MspInit+0xd0>)
 800260a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260e:	6593      	str	r3, [r2, #88]	; 0x58
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_UART_MspInit+0xd0>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261c:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <HAL_UART_MspInit+0xd0>)
 800261e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002620:	4a19      	ldr	r2, [pc, #100]	; (8002688 <HAL_UART_MspInit+0xd0>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002628:	4b17      	ldr	r3, [pc, #92]	; (8002688 <HAL_UART_MspInit+0xd0>)
 800262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002634:	2304      	movs	r3, #4
 8002636:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002640:	2303      	movs	r3, #3
 8002642:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002644:	2307      	movs	r3, #7
 8002646:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002648:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800264c:	4619      	mov	r1, r3
 800264e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002652:	f000 fcc3 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800265a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	2302      	movs	r3, #2
 800265e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002664:	2303      	movs	r3, #3
 8002666:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002668:	2303      	movs	r3, #3
 800266a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800266c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002670:	4619      	mov	r1, r3
 8002672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002676:	f000 fcb1 	bl	8002fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800267a:	bf00      	nop
 800267c:	3778      	adds	r7, #120	; 0x78
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40004400 	.word	0x40004400
 8002688:	40021000 	.word	0x40021000

0800268c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002690:	e7fe      	b.n	8002690 <NMI_Handler+0x4>

08002692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002696:	e7fe      	b.n	8002696 <HardFault_Handler+0x4>

08002698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800269c:	e7fe      	b.n	800269c <MemManage_Handler+0x4>

0800269e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a2:	e7fe      	b.n	80026a2 <BusFault_Handler+0x4>

080026a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <UsageFault_Handler+0x4>

080026aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d8:	f000 f982 	bl	80029e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}

080026e0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <DMA1_Channel3_IRQHandler+0x10>)
 80026f6:	f000 fbc2 	bl	8002e7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000804 	.word	0x20000804

08002704 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002708:	4802      	ldr	r0, [pc, #8]	; (8002714 <SPI1_IRQHandler+0x10>)
 800270a:	f002 fe5d 	bl	80053c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	2000071c 	.word	0x2000071c

08002718 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <TIM6_DAC_IRQHandler+0x10>)
 800271e:	f003 f97f 	bl	8005a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200006d0 	.word	0x200006d0

0800272c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
	return 1;
 8002730:	2301      	movs	r3, #1
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <_kill>:

int _kill(int pid, int sig)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002746:	f003 fff1 	bl	800672c <__errno>
 800274a:	4603      	mov	r3, r0
 800274c:	2216      	movs	r2, #22
 800274e:	601a      	str	r2, [r3, #0]
	return -1;
 8002750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <_exit>:

void _exit (int status)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002764:	f04f 31ff 	mov.w	r1, #4294967295
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff ffe7 	bl	800273c <_kill>
	while (1) {}		/* Make sure we hang here */
 800276e:	e7fe      	b.n	800276e <_exit+0x12>

08002770 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	e00a      	b.n	8002798 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002782:	f3af 8000 	nop.w
 8002786:	4601      	mov	r1, r0
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	60ba      	str	r2, [r7, #8]
 800278e:	b2ca      	uxtb	r2, r1
 8002790:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3301      	adds	r3, #1
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	dbf0      	blt.n	8002782 <_read+0x12>
	}

return len;
 80027a0:	687b      	ldr	r3, [r7, #4]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <_close>:
	}
	return len;
}

int _close(int file)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
	return -1;
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027d2:	605a      	str	r2, [r3, #4]
	return 0;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <_isatty>:

int _isatty(int file)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
	return 1;
 80027ea:	2301      	movs	r3, #1
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
	return 0;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800281c:	4a14      	ldr	r2, [pc, #80]	; (8002870 <_sbrk+0x5c>)
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <_sbrk+0x60>)
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002828:	4b13      	ldr	r3, [pc, #76]	; (8002878 <_sbrk+0x64>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <_sbrk+0x64>)
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <_sbrk+0x68>)
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <_sbrk+0x64>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	429a      	cmp	r2, r3
 8002842:	d207      	bcs.n	8002854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002844:	f003 ff72 	bl	800672c <__errno>
 8002848:	4603      	mov	r3, r0
 800284a:	220c      	movs	r2, #12
 800284c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
 8002852:	e009      	b.n	8002868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800285a:	4b07      	ldr	r3, [pc, #28]	; (8002878 <_sbrk+0x64>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	4a05      	ldr	r2, [pc, #20]	; (8002878 <_sbrk+0x64>)
 8002864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002866:	68fb      	ldr	r3, [r7, #12]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20010000 	.word	0x20010000
 8002874:	00000400 	.word	0x00000400
 8002878:	20000638 	.word	0x20000638
 800287c:	20000860 	.word	0x20000860

08002880 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <SystemInit+0x5c>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	4a14      	ldr	r2, [pc, #80]	; (80028dc <SystemInit+0x5c>)
 800288c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <SystemInit+0x60>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <SystemInit+0x60>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <SystemInit+0x60>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80028a6:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <SystemInit+0x60>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a0d      	ldr	r2, [pc, #52]	; (80028e0 <SystemInit+0x60>)
 80028ac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80028b0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80028b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <SystemInit+0x60>)
 80028b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028bc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <SystemInit+0x60>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <SystemInit+0x60>)
 80028c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <SystemInit+0x60>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000ed00 	.word	0xe000ed00
 80028e0:	40021000 	.word	0x40021000

080028e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800291c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028e8:	f7ff ffca 	bl	8002880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80028ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80028ee:	e003      	b.n	80028f8 <LoopCopyDataInit>

080028f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80028f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80028f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80028f6:	3104      	adds	r1, #4

080028f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80028f8:	480a      	ldr	r0, [pc, #40]	; (8002924 <LoopForever+0xa>)
	ldr	r3, =_edata
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <LoopForever+0xe>)
	adds	r2, r0, r1
 80028fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80028fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002900:	d3f6      	bcc.n	80028f0 <CopyDataInit>
	ldr	r2, =_sbss
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002904:	e002      	b.n	800290c <LoopFillZerobss>

08002906 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002906:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002908:	f842 3b04 	str.w	r3, [r2], #4

0800290c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <LoopForever+0x16>)
	cmp	r2, r3
 800290e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002910:	d3f9      	bcc.n	8002906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002912:	f003 ff11 	bl	8006738 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002916:	f7ff f81b 	bl	8001950 <main>

0800291a <LoopForever>:

LoopForever:
    b LoopForever
 800291a:	e7fe      	b.n	800291a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800291c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002920:	0800b5b8 	.word	0x0800b5b8
	ldr	r0, =_sdata
 8002924:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002928:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 800292c:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8002930:	20000860 	.word	0x20000860

08002934 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002934:	e7fe      	b.n	8002934 <ADC1_IRQHandler>

08002936 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002940:	2003      	movs	r0, #3
 8002942:	f000 f961 	bl	8002c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002946:	2000      	movs	r0, #0
 8002948:	f000 f80e 	bl	8002968 <HAL_InitTick>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	71fb      	strb	r3, [r7, #7]
 8002956:	e001      	b.n	800295c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002958:	f7ff fd0e 	bl	8002378 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800295c:	79fb      	ldrb	r3, [r7, #7]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002974:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <HAL_InitTick+0x6c>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d023      	beq.n	80029c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800297c:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <HAL_InitTick+0x70>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <HAL_InitTick+0x6c>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	4619      	mov	r1, r3
 8002986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298a:	fbb3 f3f1 	udiv	r3, r3, r1
 800298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f96d 	bl	8002c72 <HAL_SYSTICK_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b0f      	cmp	r3, #15
 80029a2:	d809      	bhi.n	80029b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029a4:	2200      	movs	r2, #0
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ac:	f000 f937 	bl	8002c1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029b0:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <HAL_InitTick+0x74>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e007      	b.n	80029c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	e004      	b.n	80029c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
 80029c2:	e001      	b.n	80029c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000018 	.word	0x20000018
 80029d8:	20000010 	.word	0x20000010
 80029dc:	20000014 	.word	0x20000014

080029e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_IncTick+0x20>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_IncTick+0x24>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4413      	add	r3, r2
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <HAL_IncTick+0x24>)
 80029f2:	6013      	str	r3, [r2, #0]
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000018 	.word	0x20000018
 8002a04:	2000084c 	.word	0x2000084c

08002a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_GetTick+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	2000084c 	.word	0x2000084c

08002a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a28:	f7ff ffee 	bl	8002a08 <HAL_GetTick>
 8002a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d005      	beq.n	8002a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <HAL_Delay+0x44>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4413      	add	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a46:	bf00      	nop
 8002a48:	f7ff ffde 	bl	8002a08 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d8f7      	bhi.n	8002a48 <HAL_Delay+0x28>
  {
  }
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000018 	.word	0x20000018

08002a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <__NVIC_SetPriorityGrouping+0x44>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a84:	4013      	ands	r3, r2
 8002a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9a:	4a04      	ldr	r2, [pc, #16]	; (8002aac <__NVIC_SetPriorityGrouping+0x44>)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	60d3      	str	r3, [r2, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	0a1b      	lsrs	r3, r3, #8
 8002aba:	f003 0307 	and.w	r3, r3, #7
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	db0b      	blt.n	8002af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	4907      	ldr	r1, [pc, #28]	; (8002b04 <__NVIC_EnableIRQ+0x38>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	2001      	movs	r0, #1
 8002aee:	fa00 f202 	lsl.w	r2, r0, r2
 8002af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000e100 	.word	0xe000e100

08002b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	db0a      	blt.n	8002b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	490c      	ldr	r1, [pc, #48]	; (8002b54 <__NVIC_SetPriority+0x4c>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	0112      	lsls	r2, r2, #4
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b30:	e00a      	b.n	8002b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	4908      	ldr	r1, [pc, #32]	; (8002b58 <__NVIC_SetPriority+0x50>)
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	3b04      	subs	r3, #4
 8002b40:	0112      	lsls	r2, r2, #4
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	440b      	add	r3, r1
 8002b46:	761a      	strb	r2, [r3, #24]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000e100 	.word	0xe000e100
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	; 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f1c3 0307 	rsb	r3, r3, #7
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	bf28      	it	cs
 8002b7a:	2304      	movcs	r3, #4
 8002b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3304      	adds	r3, #4
 8002b82:	2b06      	cmp	r3, #6
 8002b84:	d902      	bls.n	8002b8c <NVIC_EncodePriority+0x30>
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3b03      	subs	r3, #3
 8002b8a:	e000      	b.n	8002b8e <NVIC_EncodePriority+0x32>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b90:	f04f 32ff 	mov.w	r2, #4294967295
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	43d9      	mvns	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	4313      	orrs	r3, r2
         );
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3724      	adds	r7, #36	; 0x24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd4:	d301      	bcc.n	8002bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e00f      	b.n	8002bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <SysTick_Config+0x40>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be2:	210f      	movs	r1, #15
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295
 8002be8:	f7ff ff8e 	bl	8002b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <SysTick_Config+0x40>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <SysTick_Config+0x40>)
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	e000e010 	.word	0xe000e010

08002c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ff29 	bl	8002a68 <__NVIC_SetPriorityGrouping>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c30:	f7ff ff3e 	bl	8002ab0 <__NVIC_GetPriorityGrouping>
 8002c34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	6978      	ldr	r0, [r7, #20]
 8002c3c:	f7ff ff8e 	bl	8002b5c <NVIC_EncodePriority>
 8002c40:	4602      	mov	r2, r0
 8002c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff5d 	bl	8002b08 <__NVIC_SetPriority>
}
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff31 	bl	8002acc <__NVIC_EnableIRQ>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ffa2 	bl	8002bc4 <SysTick_Config>
 8002c80:	4603      	mov	r3, r0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e098      	b.n	8002dd0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b4d      	ldr	r3, [pc, #308]	; (8002ddc <HAL_DMA_Init+0x150>)
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d80f      	bhi.n	8002cca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b4b      	ldr	r3, [pc, #300]	; (8002de0 <HAL_DMA_Init+0x154>)
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a4b      	ldr	r2, [pc, #300]	; (8002de4 <HAL_DMA_Init+0x158>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	009a      	lsls	r2, r3, #2
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a48      	ldr	r2, [pc, #288]	; (8002de8 <HAL_DMA_Init+0x15c>)
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
 8002cc8:	e00e      	b.n	8002ce8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	4b46      	ldr	r3, [pc, #280]	; (8002dec <HAL_DMA_Init+0x160>)
 8002cd2:	4413      	add	r3, r2
 8002cd4:	4a43      	ldr	r2, [pc, #268]	; (8002de4 <HAL_DMA_Init+0x158>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	009a      	lsls	r2, r3, #2
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a42      	ldr	r2, [pc, #264]	; (8002df0 <HAL_DMA_Init+0x164>)
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d42:	d039      	beq.n	8002db8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	4a27      	ldr	r2, [pc, #156]	; (8002de8 <HAL_DMA_Init+0x15c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d11a      	bne.n	8002d84 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d4e:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <HAL_DMA_Init+0x168>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f003 031c 	and.w	r3, r3, #28
 8002d5a:	210f      	movs	r1, #15
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	4924      	ldr	r1, [pc, #144]	; (8002df4 <HAL_DMA_Init+0x168>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d68:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <HAL_DMA_Init+0x168>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	f003 031c 	and.w	r3, r3, #28
 8002d78:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7c:	491d      	ldr	r1, [pc, #116]	; (8002df4 <HAL_DMA_Init+0x168>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]
 8002d82:	e019      	b.n	8002db8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d84:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <HAL_DMA_Init+0x16c>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8c:	f003 031c 	and.w	r3, r3, #28
 8002d90:	210f      	movs	r1, #15
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	4917      	ldr	r1, [pc, #92]	; (8002df8 <HAL_DMA_Init+0x16c>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d9e:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <HAL_DMA_Init+0x16c>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f003 031c 	and.w	r3, r3, #28
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	4911      	ldr	r1, [pc, #68]	; (8002df8 <HAL_DMA_Init+0x16c>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	40020407 	.word	0x40020407
 8002de0:	bffdfff8 	.word	0xbffdfff8
 8002de4:	cccccccd 	.word	0xcccccccd
 8002de8:	40020000 	.word	0x40020000
 8002dec:	bffdfbf8 	.word	0xbffdfbf8
 8002df0:	40020400 	.word	0x40020400
 8002df4:	400200a8 	.word	0x400200a8
 8002df8:	400204a8 	.word	0x400204a8

08002dfc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d005      	beq.n	8002e20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2204      	movs	r2, #4
 8002e18:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
 8002e1e:	e029      	b.n	8002e74 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 020e 	bic.w	r2, r2, #14
 8002e2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e44:	f003 021c 	and.w	r2, r3, #28
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e52:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
    }
  }
  return status;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f003 031c 	and.w	r3, r3, #28
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d026      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x7a>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d021      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d107      	bne.n	8002ed2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0204 	bic.w	r2, r2, #4
 8002ed0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	f003 021c 	and.w	r2, r3, #28
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	2104      	movs	r1, #4
 8002ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d071      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002ef6:	e06c      	b.n	8002fd2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	f003 031c 	and.w	r3, r3, #28
 8002f00:	2202      	movs	r2, #2
 8002f02:	409a      	lsls	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d02e      	beq.n	8002f6a <HAL_DMA_IRQHandler+0xec>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d029      	beq.n	8002f6a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 020a 	bic.w	r2, r2, #10
 8002f32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	f003 021c 	and.w	r2, r3, #28
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	2102      	movs	r1, #2
 8002f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d038      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f68:	e033      	b.n	8002fd2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f003 031c 	and.w	r3, r3, #28
 8002f72:	2208      	movs	r2, #8
 8002f74:	409a      	lsls	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d02a      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x156>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d025      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 020e 	bic.w	r2, r2, #14
 8002f96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9c:	f003 021c 	and.w	r2, r3, #28
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002faa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d004      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fd2:	bf00      	nop
 8002fd4:	bf00      	nop
}
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fea:	e148      	b.n	800327e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 813a 	beq.w	8003278 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d00b      	beq.n	8003024 <HAL_GPIO_Init+0x48>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d007      	beq.n	8003024 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003018:	2b11      	cmp	r3, #17
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b12      	cmp	r3, #18
 8003022:	d130      	bne.n	8003086 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	2203      	movs	r2, #3
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800305a:	2201      	movs	r2, #1
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4013      	ands	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	f003 0201 	and.w	r2, r3, #1
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	2203      	movs	r2, #3
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_Init+0xea>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b12      	cmp	r3, #18
 80030c4:	d123      	bne.n	800310e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	08da      	lsrs	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3208      	adds	r2, #8
 80030ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	220f      	movs	r2, #15
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	08da      	lsrs	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3208      	adds	r2, #8
 8003108:	6939      	ldr	r1, [r7, #16]
 800310a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	2203      	movs	r2, #3
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0203 	and.w	r2, r3, #3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 8094 	beq.w	8003278 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003150:	4b52      	ldr	r3, [pc, #328]	; (800329c <HAL_GPIO_Init+0x2c0>)
 8003152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003154:	4a51      	ldr	r2, [pc, #324]	; (800329c <HAL_GPIO_Init+0x2c0>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6613      	str	r3, [r2, #96]	; 0x60
 800315c:	4b4f      	ldr	r3, [pc, #316]	; (800329c <HAL_GPIO_Init+0x2c0>)
 800315e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003168:	4a4d      	ldr	r2, [pc, #308]	; (80032a0 <HAL_GPIO_Init+0x2c4>)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	3302      	adds	r3, #2
 8003170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	220f      	movs	r2, #15
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003192:	d00d      	beq.n	80031b0 <HAL_GPIO_Init+0x1d4>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a43      	ldr	r2, [pc, #268]	; (80032a4 <HAL_GPIO_Init+0x2c8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d007      	beq.n	80031ac <HAL_GPIO_Init+0x1d0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a42      	ldr	r2, [pc, #264]	; (80032a8 <HAL_GPIO_Init+0x2cc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <HAL_GPIO_Init+0x1cc>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e004      	b.n	80031b2 <HAL_GPIO_Init+0x1d6>
 80031a8:	2307      	movs	r3, #7
 80031aa:	e002      	b.n	80031b2 <HAL_GPIO_Init+0x1d6>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_GPIO_Init+0x1d6>
 80031b0:	2300      	movs	r3, #0
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	f002 0203 	and.w	r2, r2, #3
 80031b8:	0092      	lsls	r2, r2, #2
 80031ba:	4093      	lsls	r3, r2
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031c2:	4937      	ldr	r1, [pc, #220]	; (80032a0 <HAL_GPIO_Init+0x2c4>)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	3302      	adds	r3, #2
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031d0:	4b36      	ldr	r3, [pc, #216]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031f4:	4a2d      	ldr	r2, [pc, #180]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80031fa:	4b2c      	ldr	r3, [pc, #176]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800321e:	4a23      	ldr	r2, [pc, #140]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003224:	4b21      	ldr	r3, [pc, #132]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	43db      	mvns	r3, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003248:	4a18      	ldr	r2, [pc, #96]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800324e:	4b17      	ldr	r3, [pc, #92]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003272:	4a0e      	ldr	r2, [pc, #56]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3301      	adds	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	f47f aeaf 	bne.w	8002fec <HAL_GPIO_Init+0x10>
  }
}
 800328e:	bf00      	nop
 8003290:	bf00      	nop
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40021000 	.word	0x40021000
 80032a0:	40010000 	.word	0x40010000
 80032a4:	48000400 	.word	0x48000400
 80032a8:	48000800 	.word	0x48000800
 80032ac:	40010400 	.word	0x40010400

080032b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	807b      	strh	r3, [r7, #2]
 80032bc:	4613      	mov	r3, r2
 80032be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c0:	787b      	ldrb	r3, [r7, #1]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032c6:	887a      	ldrh	r2, [r7, #2]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032cc:	e002      	b.n	80032d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032ce:	887a      	ldrh	r2, [r7, #2]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e081      	b.n	80033f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff f860 	bl	80023cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2224      	movs	r2, #36	; 0x24
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003330:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003340:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d107      	bne.n	800335a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	e006      	b.n	8003368 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003366:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d104      	bne.n	800337a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003378:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800338c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800339c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	ea42 0103 	orr.w	r1, r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	021a      	lsls	r2, r3, #8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69d9      	ldr	r1, [r3, #28]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1a      	ldr	r2, [r3, #32]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af02      	add	r7, sp, #8
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	461a      	mov	r2, r3
 800340c:	460b      	mov	r3, r1
 800340e:	817b      	strh	r3, [r7, #10]
 8003410:	4613      	mov	r3, r2
 8003412:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b20      	cmp	r3, #32
 800341e:	f040 80da 	bne.w	80035d6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_I2C_Master_Transmit+0x30>
 800342c:	2302      	movs	r3, #2
 800342e:	e0d3      	b.n	80035d8 <HAL_I2C_Master_Transmit+0x1d8>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003438:	f7ff fae6 	bl	8002a08 <HAL_GetTick>
 800343c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	2319      	movs	r3, #25
 8003444:	2201      	movs	r2, #1
 8003446:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f9e6 	bl	800381c <I2C_WaitOnFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0be      	b.n	80035d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2221      	movs	r2, #33	; 0x21
 800345e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2210      	movs	r2, #16
 8003466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	893a      	ldrh	r2, [r7, #8]
 800347a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	2bff      	cmp	r3, #255	; 0xff
 800348a:	d90e      	bls.n	80034aa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	22ff      	movs	r2, #255	; 0xff
 8003490:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003496:	b2da      	uxtb	r2, r3
 8003498:	8979      	ldrh	r1, [r7, #10]
 800349a:	4b51      	ldr	r3, [pc, #324]	; (80035e0 <HAL_I2C_Master_Transmit+0x1e0>)
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 fb48 	bl	8003b38 <I2C_TransferConfig>
 80034a8:	e06c      	b.n	8003584 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	8979      	ldrh	r1, [r7, #10]
 80034bc:	4b48      	ldr	r3, [pc, #288]	; (80035e0 <HAL_I2C_Master_Transmit+0x1e0>)
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 fb37 	bl	8003b38 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80034ca:	e05b      	b.n	8003584 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	6a39      	ldr	r1, [r7, #32]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f9e3 	bl	800389c <I2C_WaitOnTXISFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e07b      	b.n	80035d8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	781a      	ldrb	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d034      	beq.n	8003584 <HAL_I2C_Master_Transmit+0x184>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351e:	2b00      	cmp	r3, #0
 8003520:	d130      	bne.n	8003584 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	2200      	movs	r2, #0
 800352a:	2180      	movs	r1, #128	; 0x80
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f975 	bl	800381c <I2C_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e04d      	b.n	80035d8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	2bff      	cmp	r3, #255	; 0xff
 8003544:	d90e      	bls.n	8003564 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	22ff      	movs	r2, #255	; 0xff
 800354a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003550:	b2da      	uxtb	r2, r3
 8003552:	8979      	ldrh	r1, [r7, #10]
 8003554:	2300      	movs	r3, #0
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 faeb 	bl	8003b38 <I2C_TransferConfig>
 8003562:	e00f      	b.n	8003584 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	b2da      	uxtb	r2, r3
 8003574:	8979      	ldrh	r1, [r7, #10]
 8003576:	2300      	movs	r3, #0
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fada 	bl	8003b38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d19e      	bne.n	80034cc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	6a39      	ldr	r1, [r7, #32]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f9c2 	bl	800391c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e01a      	b.n	80035d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2220      	movs	r2, #32
 80035a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_I2C_Master_Transmit+0x1e4>)
 80035b6:	400b      	ands	r3, r1
 80035b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e000      	b.n	80035d8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	80002000 	.word	0x80002000
 80035e4:	fe00e800 	.word	0xfe00e800

080035e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	461a      	mov	r2, r3
 80035f4:	460b      	mov	r3, r1
 80035f6:	817b      	strh	r3, [r7, #10]
 80035f8:	4613      	mov	r3, r2
 80035fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b20      	cmp	r3, #32
 8003606:	f040 80db 	bne.w	80037c0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_I2C_Master_Receive+0x30>
 8003614:	2302      	movs	r3, #2
 8003616:	e0d4      	b.n	80037c2 <HAL_I2C_Master_Receive+0x1da>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003620:	f7ff f9f2 	bl	8002a08 <HAL_GetTick>
 8003624:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	2319      	movs	r3, #25
 800362c:	2201      	movs	r2, #1
 800362e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f8f2 	bl	800381c <I2C_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e0bf      	b.n	80037c2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2222      	movs	r2, #34	; 0x22
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2210      	movs	r2, #16
 800364e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	893a      	ldrh	r2, [r7, #8]
 8003662:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	2bff      	cmp	r3, #255	; 0xff
 8003672:	d90e      	bls.n	8003692 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	22ff      	movs	r2, #255	; 0xff
 8003678:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367e:	b2da      	uxtb	r2, r3
 8003680:	8979      	ldrh	r1, [r7, #10]
 8003682:	4b52      	ldr	r3, [pc, #328]	; (80037cc <HAL_I2C_Master_Receive+0x1e4>)
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fa54 	bl	8003b38 <I2C_TransferConfig>
 8003690:	e06d      	b.n	800376e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	8979      	ldrh	r1, [r7, #10]
 80036a4:	4b49      	ldr	r3, [pc, #292]	; (80037cc <HAL_I2C_Master_Receive+0x1e4>)
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fa43 	bl	8003b38 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80036b2:	e05c      	b.n	800376e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	6a39      	ldr	r1, [r7, #32]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f96b 	bl	8003994 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e07c      	b.n	80037c2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d034      	beq.n	800376e <HAL_I2C_Master_Receive+0x186>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	2b00      	cmp	r3, #0
 800370a:	d130      	bne.n	800376e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	2200      	movs	r2, #0
 8003714:	2180      	movs	r1, #128	; 0x80
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f880 	bl	800381c <I2C_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e04d      	b.n	80037c2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372a:	b29b      	uxth	r3, r3
 800372c:	2bff      	cmp	r3, #255	; 0xff
 800372e:	d90e      	bls.n	800374e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	22ff      	movs	r2, #255	; 0xff
 8003734:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	b2da      	uxtb	r2, r3
 800373c:	8979      	ldrh	r1, [r7, #10]
 800373e:	2300      	movs	r3, #0
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f9f6 	bl	8003b38 <I2C_TransferConfig>
 800374c:	e00f      	b.n	800376e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375c:	b2da      	uxtb	r2, r3
 800375e:	8979      	ldrh	r1, [r7, #10]
 8003760:	2300      	movs	r3, #0
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f9e5 	bl	8003b38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d19d      	bne.n	80036b4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	6a39      	ldr	r1, [r7, #32]
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f8cd 	bl	800391c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e01a      	b.n	80037c2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2220      	movs	r2, #32
 8003792:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <HAL_I2C_Master_Receive+0x1e8>)
 80037a0:	400b      	ands	r3, r1
 80037a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
  }
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	80002400 	.word	0x80002400
 80037d0:	fe00e800 	.word	0xfe00e800

080037d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d103      	bne.n	80037f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d007      	beq.n	8003810 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	619a      	str	r2, [r3, #24]
  }
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800382c:	e022      	b.n	8003874 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d01e      	beq.n	8003874 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003836:	f7ff f8e7 	bl	8002a08 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d302      	bcc.n	800384c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d113      	bne.n	8003874 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003850:	f043 0220 	orr.w	r2, r3, #32
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e00f      	b.n	8003894 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4013      	ands	r3, r2
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	429a      	cmp	r2, r3
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	429a      	cmp	r2, r3
 8003890:	d0cd      	beq.n	800382e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038a8:	e02c      	b.n	8003904 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f8dc 	bl	8003a6c <I2C_IsAcknowledgeFailed>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e02a      	b.n	8003914 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d01e      	beq.n	8003904 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7ff f89f 	bl	8002a08 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d302      	bcc.n	80038dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d113      	bne.n	8003904 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e007      	b.n	8003914 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b02      	cmp	r3, #2
 8003910:	d1cb      	bne.n	80038aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003928:	e028      	b.n	800397c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f89c 	bl	8003a6c <I2C_IsAcknowledgeFailed>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e026      	b.n	800398c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393e:	f7ff f863 	bl	8002a08 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d113      	bne.n	800397c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e007      	b.n	800398c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b20      	cmp	r3, #32
 8003988:	d1cf      	bne.n	800392a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039a0:	e055      	b.n	8003a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f860 	bl	8003a6c <I2C_IsAcknowledgeFailed>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e053      	b.n	8003a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d129      	bne.n	8003a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d105      	bne.n	80039de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e03f      	b.n	8003a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2220      	movs	r2, #32
 80039e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80039f2:	400b      	ands	r3, r1
 80039f4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e022      	b.n	8003a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a18:	f7fe fff6 	bl	8002a08 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d302      	bcc.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10f      	bne.n	8003a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e007      	b.n	8003a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d1a2      	bne.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	fe00e800 	.word	0xfe00e800

08003a6c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b10      	cmp	r3, #16
 8003a84:	d151      	bne.n	8003b2a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a86:	e022      	b.n	8003ace <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d01e      	beq.n	8003ace <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a90:	f7fe ffba 	bl	8002a08 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d302      	bcc.n	8003aa6 <I2C_IsAcknowledgeFailed+0x3a>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d113      	bne.n	8003ace <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f043 0220 	orr.w	r2, r3, #32
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e02e      	b.n	8003b2c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d1d5      	bne.n	8003a88 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2210      	movs	r2, #16
 8003ae2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f7ff fe71 	bl	80037d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6859      	ldr	r1, [r3, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <I2C_IsAcknowledgeFailed+0xc8>)
 8003afe:	400b      	ands	r3, r1
 8003b00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	f043 0204 	orr.w	r2, r3, #4
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	fe00e800 	.word	0xfe00e800

08003b38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	460b      	mov	r3, r1
 8003b44:	817b      	strh	r3, [r7, #10]
 8003b46:	4613      	mov	r3, r2
 8003b48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	0d5b      	lsrs	r3, r3, #21
 8003b54:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b58:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <I2C_TransferConfig+0x58>)
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	ea02 0103 	and.w	r1, r2, r3
 8003b62:	897b      	ldrh	r3, [r7, #10]
 8003b64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b68:	7a7b      	ldrb	r3, [r7, #9]
 8003b6a:	041b      	lsls	r3, r3, #16
 8003b6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	431a      	orrs	r2, r3
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	03ff63ff 	.word	0x03ff63ff

08003b94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d138      	bne.n	8003c1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e032      	b.n	8003c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2224      	movs	r2, #36	; 0x24
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003be6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e000      	b.n	8003c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d139      	bne.n	8003cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e033      	b.n	8003cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2224      	movs	r2, #36	; 0x24
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0201 	bic.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <HAL_PWREx_GetVoltageRange+0x18>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40007000 	.word	0x40007000

08003ce0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cee:	d130      	bne.n	8003d52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cf0:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cfc:	d038      	beq.n	8003d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cfe:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d06:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2232      	movs	r2, #50	; 0x32
 8003d14:	fb02 f303 	mul.w	r3, r2, r3
 8003d18:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	0c9b      	lsrs	r3, r3, #18
 8003d20:	3301      	adds	r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d24:	e002      	b.n	8003d2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d2c:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d38:	d102      	bne.n	8003d40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f2      	bne.n	8003d26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4c:	d110      	bne.n	8003d70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e00f      	b.n	8003d72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5e:	d007      	beq.n	8003d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d60:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d68:	4a05      	ldr	r2, [pc, #20]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40007000 	.word	0x40007000
 8003d84:	20000010 	.word	0x20000010
 8003d88:	431bde83 	.word	0x431bde83

08003d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f000 bc11 	b.w	80045c2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003da0:	4ba0      	ldr	r3, [pc, #640]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 030c 	and.w	r3, r3, #12
 8003da8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003daa:	4b9e      	ldr	r3, [pc, #632]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80e4 	beq.w	8003f8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d007      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x4c>
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2b0c      	cmp	r3, #12
 8003dcc:	f040 808b 	bne.w	8003ee6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	f040 8087 	bne.w	8003ee6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dd8:	4b92      	ldr	r3, [pc, #584]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_OscConfig+0x64>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e3e8      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1a      	ldr	r2, [r3, #32]
 8003df4:	4b8b      	ldr	r3, [pc, #556]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_RCC_OscConfig+0x7e>
 8003e00:	4b88      	ldr	r3, [pc, #544]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e08:	e005      	b.n	8003e16 <HAL_RCC_OscConfig+0x8a>
 8003e0a:	4b86      	ldr	r3, [pc, #536]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d223      	bcs.n	8003e62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fd7a 	bl	8004918 <RCC_SetFlashLatencyFromMSIRange>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e3c9      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e2e:	4b7d      	ldr	r3, [pc, #500]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a7c      	ldr	r2, [pc, #496]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003e34:	f043 0308 	orr.w	r3, r3, #8
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b7a      	ldr	r3, [pc, #488]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	4977      	ldr	r1, [pc, #476]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e4c:	4b75      	ldr	r3, [pc, #468]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	4972      	ldr	r1, [pc, #456]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	604b      	str	r3, [r1, #4]
 8003e60:	e025      	b.n	8003eae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e62:	4b70      	ldr	r3, [pc, #448]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a6f      	ldr	r2, [pc, #444]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003e68:	f043 0308 	orr.w	r3, r3, #8
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	4b6d      	ldr	r3, [pc, #436]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	496a      	ldr	r1, [pc, #424]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e80:	4b68      	ldr	r3, [pc, #416]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	4965      	ldr	r1, [pc, #404]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fd3a 	bl	8004918 <RCC_SetFlashLatencyFromMSIRange>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e389      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eae:	f000 fc6f 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	4b5b      	ldr	r3, [pc, #364]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	495a      	ldr	r1, [pc, #360]	; (8004028 <HAL_RCC_OscConfig+0x29c>)
 8003ec0:	5ccb      	ldrb	r3, [r1, r3]
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eca:	4a58      	ldr	r2, [pc, #352]	; (800402c <HAL_RCC_OscConfig+0x2a0>)
 8003ecc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ece:	4b58      	ldr	r3, [pc, #352]	; (8004030 <HAL_RCC_OscConfig+0x2a4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fd48 	bl	8002968 <HAL_InitTick>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d052      	beq.n	8003f88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	e36d      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d032      	beq.n	8003f54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003eee:	4b4d      	ldr	r3, [pc, #308]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a4c      	ldr	r2, [pc, #304]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003efa:	f7fe fd85 	bl	8002a08 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f02:	f7fe fd81 	bl	8002a08 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e356      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f14:	4b43      	ldr	r3, [pc, #268]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f20:	4b40      	ldr	r3, [pc, #256]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a3f      	ldr	r2, [pc, #252]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003f26:	f043 0308 	orr.w	r3, r3, #8
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	4b3d      	ldr	r3, [pc, #244]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	493a      	ldr	r1, [pc, #232]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f3e:	4b39      	ldr	r3, [pc, #228]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	4935      	ldr	r1, [pc, #212]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	604b      	str	r3, [r1, #4]
 8003f52:	e01a      	b.n	8003f8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f54:	4b33      	ldr	r3, [pc, #204]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a32      	ldr	r2, [pc, #200]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f60:	f7fe fd52 	bl	8002a08 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f68:	f7fe fd4e 	bl	8002a08 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e323      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f7a:	4b2a      	ldr	r3, [pc, #168]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x1dc>
 8003f86:	e000      	b.n	8003f8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d073      	beq.n	800407e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d005      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x21c>
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d10e      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa8:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d063      	beq.n	800407c <HAL_RCC_OscConfig+0x2f0>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d15f      	bne.n	800407c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e300      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x24c>
 8003fca:	4b16      	ldr	r3, [pc, #88]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a15      	ldr	r2, [pc, #84]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e01d      	b.n	8004014 <HAL_RCC_OscConfig+0x288>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x270>
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a0f      	ldr	r2, [pc, #60]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a0c      	ldr	r2, [pc, #48]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0x288>
 8003ffc:	4b09      	ldr	r3, [pc, #36]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a08      	ldr	r2, [pc, #32]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 8004002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a05      	ldr	r2, [pc, #20]	; (8004024 <HAL_RCC_OscConfig+0x298>)
 800400e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01b      	beq.n	8004054 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fe fcf4 	bl	8002a08 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004022:	e010      	b.n	8004046 <HAL_RCC_OscConfig+0x2ba>
 8004024:	40021000 	.word	0x40021000
 8004028:	0800b0c8 	.word	0x0800b0c8
 800402c:	20000010 	.word	0x20000010
 8004030:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004034:	f7fe fce8 	bl	8002a08 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e2bd      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004046:	4baf      	ldr	r3, [pc, #700]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x2a8>
 8004052:	e014      	b.n	800407e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7fe fcd8 	bl	8002a08 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800405c:	f7fe fcd4 	bl	8002a08 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b64      	cmp	r3, #100	; 0x64
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e2a9      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800406e:	4ba5      	ldr	r3, [pc, #660]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x2d0>
 800407a:	e000      	b.n	800407e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d060      	beq.n	800414c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b04      	cmp	r3, #4
 800408e:	d005      	beq.n	800409c <HAL_RCC_OscConfig+0x310>
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b0c      	cmp	r3, #12
 8004094:	d119      	bne.n	80040ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d116      	bne.n	80040ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800409c:	4b99      	ldr	r3, [pc, #612]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_OscConfig+0x328>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e286      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b4:	4b93      	ldr	r3, [pc, #588]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	061b      	lsls	r3, r3, #24
 80040c2:	4990      	ldr	r1, [pc, #576]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040c8:	e040      	b.n	800414c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d023      	beq.n	800411a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d2:	4b8c      	ldr	r3, [pc, #560]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a8b      	ldr	r2, [pc, #556]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040de:	f7fe fc93 	bl	8002a08 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e6:	f7fe fc8f 	bl	8002a08 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e264      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f8:	4b82      	ldr	r3, [pc, #520]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004104:	4b7f      	ldr	r3, [pc, #508]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	061b      	lsls	r3, r3, #24
 8004112:	497c      	ldr	r1, [pc, #496]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 8004114:	4313      	orrs	r3, r2
 8004116:	604b      	str	r3, [r1, #4]
 8004118:	e018      	b.n	800414c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800411a:	4b7a      	ldr	r3, [pc, #488]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a79      	ldr	r2, [pc, #484]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 8004120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fe fc6f 	bl	8002a08 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412e:	f7fe fc6b 	bl	8002a08 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e240      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004140:	4b70      	ldr	r3, [pc, #448]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f0      	bne.n	800412e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d03c      	beq.n	80041d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01c      	beq.n	800419a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004160:	4b68      	ldr	r3, [pc, #416]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 8004162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004166:	4a67      	ldr	r2, [pc, #412]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004170:	f7fe fc4a 	bl	8002a08 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004178:	f7fe fc46 	bl	8002a08 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e21b      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800418a:	4b5e      	ldr	r3, [pc, #376]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 800418c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ef      	beq.n	8004178 <HAL_RCC_OscConfig+0x3ec>
 8004198:	e01b      	b.n	80041d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800419a:	4b5a      	ldr	r3, [pc, #360]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 800419c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a0:	4a58      	ldr	r2, [pc, #352]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041aa:	f7fe fc2d 	bl	8002a08 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b2:	f7fe fc29 	bl	8002a08 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e1fe      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041c4:	4b4f      	ldr	r3, [pc, #316]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 80041c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1ef      	bne.n	80041b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80a6 	beq.w	800432c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e0:	2300      	movs	r3, #0
 80041e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041e4:	4b47      	ldr	r3, [pc, #284]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10d      	bne.n	800420c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f0:	4b44      	ldr	r3, [pc, #272]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	4a43      	ldr	r2, [pc, #268]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 80041f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fa:	6593      	str	r3, [r2, #88]	; 0x58
 80041fc:	4b41      	ldr	r3, [pc, #260]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004208:	2301      	movs	r3, #1
 800420a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800420c:	4b3e      	ldr	r3, [pc, #248]	; (8004308 <HAL_RCC_OscConfig+0x57c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d118      	bne.n	800424a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004218:	4b3b      	ldr	r3, [pc, #236]	; (8004308 <HAL_RCC_OscConfig+0x57c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a3a      	ldr	r2, [pc, #232]	; (8004308 <HAL_RCC_OscConfig+0x57c>)
 800421e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004222:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004224:	f7fe fbf0 	bl	8002a08 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422c:	f7fe fbec 	bl	8002a08 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e1c1      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423e:	4b32      	ldr	r3, [pc, #200]	; (8004308 <HAL_RCC_OscConfig+0x57c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d108      	bne.n	8004264 <HAL_RCC_OscConfig+0x4d8>
 8004252:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	4a2a      	ldr	r2, [pc, #168]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004262:	e024      	b.n	80042ae <HAL_RCC_OscConfig+0x522>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b05      	cmp	r3, #5
 800426a:	d110      	bne.n	800428e <HAL_RCC_OscConfig+0x502>
 800426c:	4b25      	ldr	r3, [pc, #148]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	4a24      	ldr	r2, [pc, #144]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 8004274:	f043 0304 	orr.w	r3, r3, #4
 8004278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800427c:	4b21      	ldr	r3, [pc, #132]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	4a20      	ldr	r2, [pc, #128]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800428c:	e00f      	b.n	80042ae <HAL_RCC_OscConfig+0x522>
 800428e:	4b1d      	ldr	r3, [pc, #116]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004294:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800429e:	4b19      	ldr	r3, [pc, #100]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	4a17      	ldr	r2, [pc, #92]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 80042a6:	f023 0304 	bic.w	r3, r3, #4
 80042aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d016      	beq.n	80042e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b6:	f7fe fba7 	bl	8002a08 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fe fba3 	bl	8002a08 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e176      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d4:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <HAL_RCC_OscConfig+0x578>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0ed      	beq.n	80042be <HAL_RCC_OscConfig+0x532>
 80042e2:	e01a      	b.n	800431a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fe fb90 	bl	8002a08 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042ea:	e00f      	b.n	800430c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ec:	f7fe fb8c 	bl	8002a08 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d906      	bls.n	800430c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e15f      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
 8004302:	bf00      	nop
 8004304:	40021000 	.word	0x40021000
 8004308:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800430c:	4baa      	ldr	r3, [pc, #680]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e8      	bne.n	80042ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800431a:	7ffb      	ldrb	r3, [r7, #31]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d105      	bne.n	800432c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004320:	4ba5      	ldr	r3, [pc, #660]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	4aa4      	ldr	r2, [pc, #656]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800432a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d03c      	beq.n	80043b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01c      	beq.n	800437a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004340:	4b9d      	ldr	r3, [pc, #628]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004342:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004346:	4a9c      	ldr	r2, [pc, #624]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004350:	f7fe fb5a 	bl	8002a08 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004358:	f7fe fb56 	bl	8002a08 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e12b      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800436a:	4b93      	ldr	r3, [pc, #588]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 800436c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0ef      	beq.n	8004358 <HAL_RCC_OscConfig+0x5cc>
 8004378:	e01b      	b.n	80043b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800437a:	4b8f      	ldr	r3, [pc, #572]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 800437c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004380:	4a8d      	ldr	r2, [pc, #564]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004382:	f023 0301 	bic.w	r3, r3, #1
 8004386:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438a:	f7fe fb3d 	bl	8002a08 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004392:	f7fe fb39 	bl	8002a08 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e10e      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043a4:	4b84      	ldr	r3, [pc, #528]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 80043a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1ef      	bne.n	8004392 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 8102 	beq.w	80045c0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	f040 80c5 	bne.w	8004550 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043c6:	4b7c      	ldr	r3, [pc, #496]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f003 0203 	and.w	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d12c      	bne.n	8004434 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	3b01      	subs	r3, #1
 80043e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d123      	bne.n	8004434 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d11b      	bne.n	8004434 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d113      	bne.n	8004434 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	3b01      	subs	r3, #1
 800441a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d109      	bne.n	8004434 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	3b01      	subs	r3, #1
 800442e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d067      	beq.n	8004504 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b0c      	cmp	r3, #12
 8004438:	d062      	beq.n	8004500 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800443a:	4b5f      	ldr	r3, [pc, #380]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e0bb      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800444a:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a5a      	ldr	r2, [pc, #360]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004450:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004454:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004456:	f7fe fad7 	bl	8002a08 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445e:	f7fe fad3 	bl	8002a08 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e0a8      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004470:	4b51      	ldr	r3, [pc, #324]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800447c:	4b4e      	ldr	r3, [pc, #312]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	4b4e      	ldr	r3, [pc, #312]	; (80045bc <HAL_RCC_OscConfig+0x830>)
 8004482:	4013      	ands	r3, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800448c:	3a01      	subs	r2, #1
 800448e:	0112      	lsls	r2, r2, #4
 8004490:	4311      	orrs	r1, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004496:	0212      	lsls	r2, r2, #8
 8004498:	4311      	orrs	r1, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800449e:	0852      	lsrs	r2, r2, #1
 80044a0:	3a01      	subs	r2, #1
 80044a2:	0552      	lsls	r2, r2, #21
 80044a4:	4311      	orrs	r1, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044aa:	0852      	lsrs	r2, r2, #1
 80044ac:	3a01      	subs	r2, #1
 80044ae:	0652      	lsls	r2, r2, #25
 80044b0:	4311      	orrs	r1, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044b6:	06d2      	lsls	r2, r2, #27
 80044b8:	430a      	orrs	r2, r1
 80044ba:	493f      	ldr	r1, [pc, #252]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044c0:	4b3d      	ldr	r3, [pc, #244]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a3c      	ldr	r2, [pc, #240]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 80044c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044cc:	4b3a      	ldr	r3, [pc, #232]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4a39      	ldr	r2, [pc, #228]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 80044d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044d8:	f7fe fa96 	bl	8002a08 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fe fa92 	bl	8002a08 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e067      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f2:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044fe:	e05f      	b.n	80045c0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e05e      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004504:	4b2c      	ldr	r3, [pc, #176]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d157      	bne.n	80045c0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004510:	4b29      	ldr	r3, [pc, #164]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a28      	ldr	r2, [pc, #160]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800451a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800451c:	4b26      	ldr	r3, [pc, #152]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4a25      	ldr	r2, [pc, #148]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004526:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004528:	f7fe fa6e 	bl	8002a08 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004530:	f7fe fa6a 	bl	8002a08 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e03f      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004542:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x7a4>
 800454e:	e037      	b.n	80045c0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b0c      	cmp	r3, #12
 8004554:	d02d      	beq.n	80045b2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004556:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 800455c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004560:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d105      	bne.n	800457a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	4a11      	ldr	r2, [pc, #68]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004574:	f023 0303 	bic.w	r3, r3, #3
 8004578:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800457a:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 8004580:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004588:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458a:	f7fe fa3d 	bl	8002a08 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004592:	f7fe fa39 	bl	8002a08 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e00e      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a4:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <HAL_RCC_OscConfig+0x82c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f0      	bne.n	8004592 <HAL_RCC_OscConfig+0x806>
 80045b0:	e006      	b.n	80045c0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e005      	b.n	80045c2 <HAL_RCC_OscConfig+0x836>
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000
 80045bc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop

080045cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0c8      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e0:	4b66      	ldr	r3, [pc, #408]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d910      	bls.n	8004610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b63      	ldr	r3, [pc, #396]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 0207 	bic.w	r2, r3, #7
 80045f6:	4961      	ldr	r1, [pc, #388]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b5f      	ldr	r3, [pc, #380]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0b0      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d04c      	beq.n	80046b6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d107      	bne.n	8004634 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004624:	4b56      	ldr	r3, [pc, #344]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d121      	bne.n	8004674 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e09e      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d107      	bne.n	800464c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800463c:	4b50      	ldr	r3, [pc, #320]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d115      	bne.n	8004674 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e092      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d107      	bne.n	8004664 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004654:	4b4a      	ldr	r3, [pc, #296]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d109      	bne.n	8004674 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e086      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004664:	4b46      	ldr	r3, [pc, #280]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e07e      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004674:	4b42      	ldr	r3, [pc, #264]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f023 0203 	bic.w	r2, r3, #3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	493f      	ldr	r1, [pc, #252]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 8004682:	4313      	orrs	r3, r2
 8004684:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004686:	f7fe f9bf 	bl	8002a08 <HAL_GetTick>
 800468a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468e:	f7fe f9bb 	bl	8002a08 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e066      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a4:	4b36      	ldr	r3, [pc, #216]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 020c 	and.w	r2, r3, #12
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d1eb      	bne.n	800468e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c2:	4b2f      	ldr	r3, [pc, #188]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	492c      	ldr	r1, [pc, #176]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046d4:	4b29      	ldr	r3, [pc, #164]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d210      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b26      	ldr	r3, [pc, #152]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 0207 	bic.w	r2, r3, #7
 80046ea:	4924      	ldr	r1, [pc, #144]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b22      	ldr	r3, [pc, #136]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e036      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004710:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4918      	ldr	r1, [pc, #96]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472e:	4b14      	ldr	r3, [pc, #80]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4910      	ldr	r1, [pc, #64]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004742:	f000 f825 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8004746:	4602      	mov	r2, r0
 8004748:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	490c      	ldr	r1, [pc, #48]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 8004754:	5ccb      	ldrb	r3, [r1, r3]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004762:	4b0a      	ldr	r3, [pc, #40]	; (800478c <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe f8fe 	bl	8002968 <HAL_InitTick>
 800476c:	4603      	mov	r3, r0
 800476e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004770:	7afb      	ldrb	r3, [r7, #11]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40022000 	.word	0x40022000
 8004780:	40021000 	.word	0x40021000
 8004784:	0800b0c8 	.word	0x0800b0c8
 8004788:	20000010 	.word	0x20000010
 800478c:	20000014 	.word	0x20000014

08004790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004790:	b480      	push	{r7}
 8004792:	b089      	sub	sp, #36	; 0x24
 8004794:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	2300      	movs	r3, #0
 800479c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800479e:	4b3e      	ldr	r3, [pc, #248]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a8:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_GetSysClockFreq+0x34>
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b0c      	cmp	r3, #12
 80047bc:	d121      	bne.n	8004802 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d11e      	bne.n	8004802 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047c4:	4b34      	ldr	r3, [pc, #208]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d107      	bne.n	80047e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047d0:	4b31      	ldr	r3, [pc, #196]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	61fb      	str	r3, [r7, #28]
 80047de:	e005      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047e0:	4b2d      	ldr	r3, [pc, #180]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047ec:	4a2b      	ldr	r2, [pc, #172]	; (800489c <HAL_RCC_GetSysClockFreq+0x10c>)
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10d      	bne.n	8004818 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004800:	e00a      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d102      	bne.n	800480e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004808:	4b25      	ldr	r3, [pc, #148]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	e004      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d101      	bne.n	8004818 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004814:	4b23      	ldr	r3, [pc, #140]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004816:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	2b0c      	cmp	r3, #12
 800481c:	d134      	bne.n	8004888 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800481e:	4b1e      	ldr	r3, [pc, #120]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d003      	beq.n	8004836 <HAL_RCC_GetSysClockFreq+0xa6>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d003      	beq.n	800483c <HAL_RCC_GetSysClockFreq+0xac>
 8004834:	e005      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004836:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004838:	617b      	str	r3, [r7, #20]
      break;
 800483a:	e005      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800483c:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800483e:	617b      	str	r3, [r7, #20]
      break;
 8004840:	e002      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	617b      	str	r3, [r7, #20]
      break;
 8004846:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004848:	4b13      	ldr	r3, [pc, #76]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	3301      	adds	r3, #1
 8004854:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	0a1b      	lsrs	r3, r3, #8
 800485c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	fb02 f203 	mul.w	r2, r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800486e:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	0e5b      	lsrs	r3, r3, #25
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	3301      	adds	r3, #1
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004888:	69bb      	ldr	r3, [r7, #24]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3724      	adds	r7, #36	; 0x24
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000
 800489c:	0800b0e0 	.word	0x0800b0e0
 80048a0:	00f42400 	.word	0x00f42400
 80048a4:	007a1200 	.word	0x007a1200

080048a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ac:	4b03      	ldr	r3, [pc, #12]	; (80048bc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ae:	681b      	ldr	r3, [r3, #0]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000010 	.word	0x20000010

080048c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048c4:	f7ff fff0 	bl	80048a8 <HAL_RCC_GetHCLKFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	0a1b      	lsrs	r3, r3, #8
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4904      	ldr	r1, [pc, #16]	; (80048e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000
 80048e8:	0800b0d8 	.word	0x0800b0d8

080048ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048f0:	f7ff ffda 	bl	80048a8 <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0adb      	lsrs	r3, r3, #11
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4904      	ldr	r1, [pc, #16]	; (8004914 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000
 8004914:	0800b0d8 	.word	0x0800b0d8

08004918 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004920:	2300      	movs	r3, #0
 8004922:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004924:	4b2a      	ldr	r3, [pc, #168]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004930:	f7ff f9c8 	bl	8003cc4 <HAL_PWREx_GetVoltageRange>
 8004934:	6178      	str	r0, [r7, #20]
 8004936:	e014      	b.n	8004962 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800493a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493c:	4a24      	ldr	r2, [pc, #144]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800493e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004942:	6593      	str	r3, [r2, #88]	; 0x58
 8004944:	4b22      	ldr	r3, [pc, #136]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004950:	f7ff f9b8 	bl	8003cc4 <HAL_PWREx_GetVoltageRange>
 8004954:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004956:	4b1e      	ldr	r3, [pc, #120]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495a:	4a1d      	ldr	r2, [pc, #116]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800495c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004960:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004968:	d10b      	bne.n	8004982 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b80      	cmp	r3, #128	; 0x80
 800496e:	d919      	bls.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2ba0      	cmp	r3, #160	; 0xa0
 8004974:	d902      	bls.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004976:	2302      	movs	r3, #2
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	e013      	b.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800497c:	2301      	movs	r3, #1
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	e010      	b.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b80      	cmp	r3, #128	; 0x80
 8004986:	d902      	bls.n	800498e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004988:	2303      	movs	r3, #3
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	e00a      	b.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b80      	cmp	r3, #128	; 0x80
 8004992:	d102      	bne.n	800499a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004994:	2302      	movs	r3, #2
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	e004      	b.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b70      	cmp	r3, #112	; 0x70
 800499e:	d101      	bne.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049a0:	2301      	movs	r3, #1
 80049a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f023 0207 	bic.w	r2, r3, #7
 80049ac:	4909      	ldr	r1, [pc, #36]	; (80049d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049b4:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d001      	beq.n	80049c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40022000 	.word	0x40022000

080049d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049e0:	2300      	movs	r3, #0
 80049e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049e4:	2300      	movs	r3, #0
 80049e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d031      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049fc:	d01a      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80049fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a02:	d814      	bhi.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d009      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a0c:	d10f      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004a0e:	4bac      	ldr	r3, [pc, #688]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	4aab      	ldr	r2, [pc, #684]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a18:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a1a:	e00c      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	2100      	movs	r1, #0
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 f9cc 	bl	8004dc0 <RCCEx_PLLSAI1_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a2c:	e003      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	74fb      	strb	r3, [r7, #19]
      break;
 8004a32:	e000      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a36:	7cfb      	ldrb	r3, [r7, #19]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10b      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a3c:	4ba0      	ldr	r3, [pc, #640]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4a:	499d      	ldr	r1, [pc, #628]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a52:	e001      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 8099 	beq.w	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a66:	2300      	movs	r3, #0
 8004a68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a6a:	4b95      	ldr	r3, [pc, #596]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00d      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a80:	4b8f      	ldr	r3, [pc, #572]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a84:	4a8e      	ldr	r2, [pc, #568]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a8c:	4b8c      	ldr	r3, [pc, #560]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a9c:	4b89      	ldr	r3, [pc, #548]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a88      	ldr	r2, [pc, #544]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004aa8:	f7fd ffae 	bl	8002a08 <HAL_GetTick>
 8004aac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004aae:	e009      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab0:	f7fd ffaa 	bl	8002a08 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d902      	bls.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ac2:	e005      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ac4:	4b7f      	ldr	r3, [pc, #508]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0ef      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d155      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ad6:	4b7a      	ldr	r3, [pc, #488]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01e      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d019      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004af2:	4b73      	ldr	r3, [pc, #460]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004afe:	4b70      	ldr	r3, [pc, #448]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b04:	4a6e      	ldr	r2, [pc, #440]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b0e:	4b6c      	ldr	r3, [pc, #432]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b14:	4a6a      	ldr	r2, [pc, #424]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b1e:	4a68      	ldr	r2, [pc, #416]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d016      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b30:	f7fd ff6a 	bl	8002a08 <HAL_GetTick>
 8004b34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b36:	e00b      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b38:	f7fd ff66 	bl	8002a08 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d902      	bls.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	74fb      	strb	r3, [r7, #19]
            break;
 8004b4e:	e006      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b50:	4b5b      	ldr	r3, [pc, #364]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0ec      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004b5e:	7cfb      	ldrb	r3, [r7, #19]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10b      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b64:	4b56      	ldr	r3, [pc, #344]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b72:	4953      	ldr	r1, [pc, #332]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b7a:	e004      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b7c:	7cfb      	ldrb	r3, [r7, #19]
 8004b7e:	74bb      	strb	r3, [r7, #18]
 8004b80:	e001      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b82:	7cfb      	ldrb	r3, [r7, #19]
 8004b84:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b86:	7c7b      	ldrb	r3, [r7, #17]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d105      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b8c:	4b4c      	ldr	r3, [pc, #304]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b90:	4a4b      	ldr	r2, [pc, #300]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ba4:	4b46      	ldr	r3, [pc, #280]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f023 0203 	bic.w	r2, r3, #3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	4943      	ldr	r1, [pc, #268]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bc6:	4b3e      	ldr	r3, [pc, #248]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bcc:	f023 020c 	bic.w	r2, r3, #12
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	493a      	ldr	r1, [pc, #232]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004be8:	4b35      	ldr	r3, [pc, #212]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	4932      	ldr	r1, [pc, #200]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c0a:	4b2d      	ldr	r3, [pc, #180]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c18:	4929      	ldr	r1, [pc, #164]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c2c:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	4921      	ldr	r1, [pc, #132]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c4e:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	4918      	ldr	r1, [pc, #96]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c70:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	4910      	ldr	r1, [pc, #64]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d02c      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c92:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	4907      	ldr	r1, [pc, #28]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cb0:	d10a      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb2:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	4a02      	ldr	r2, [pc, #8]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cbc:	60d3      	str	r3, [r2, #12]
 8004cbe:	e015      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f871 	bl	8004dc0 <RCCEx_PLLSAI1_Config>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ce2:	7cfb      	ldrb	r3, [r7, #19]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004ce8:	7cfb      	ldrb	r3, [r7, #19]
 8004cea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d028      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cf8:	4b30      	ldr	r3, [pc, #192]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d06:	492d      	ldr	r1, [pc, #180]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d16:	d106      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d18:	4b28      	ldr	r3, [pc, #160]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a27      	ldr	r2, [pc, #156]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d22:	60d3      	str	r3, [r2, #12]
 8004d24:	e011      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d2e:	d10c      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3304      	adds	r3, #4
 8004d34:	2101      	movs	r1, #1
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 f842 	bl	8004dc0 <RCCEx_PLLSAI1_Config>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d40:	7cfb      	ldrb	r3, [r7, #19]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01c      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d56:	4b19      	ldr	r3, [pc, #100]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d64:	4915      	ldr	r1, [pc, #84]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	2102      	movs	r1, #2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 f81f 	bl	8004dc0 <RCCEx_PLLSAI1_Config>
 8004d82:	4603      	mov	r3, r0
 8004d84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d86:	7cfb      	ldrb	r3, [r7, #19]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004d8c:	7cfb      	ldrb	r3, [r7, #19]
 8004d8e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d9c:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004daa:	4904      	ldr	r1, [pc, #16]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004db2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40021000 	.word	0x40021000

08004dc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dce:	4b74      	ldr	r3, [pc, #464]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d018      	beq.n	8004e0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dda:	4b71      	ldr	r3, [pc, #452]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0203 	and.w	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d10d      	bne.n	8004e06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
       ||
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004df2:	4b6b      	ldr	r3, [pc, #428]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	091b      	lsrs	r3, r3, #4
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
       ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d047      	beq.n	8004e96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
 8004e0a:	e044      	b.n	8004e96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d018      	beq.n	8004e46 <RCCEx_PLLSAI1_Config+0x86>
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d825      	bhi.n	8004e64 <RCCEx_PLLSAI1_Config+0xa4>
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d002      	beq.n	8004e22 <RCCEx_PLLSAI1_Config+0x62>
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d009      	beq.n	8004e34 <RCCEx_PLLSAI1_Config+0x74>
 8004e20:	e020      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e22:	4b5f      	ldr	r3, [pc, #380]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d11d      	bne.n	8004e6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e32:	e01a      	b.n	8004e6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e34:	4b5a      	ldr	r3, [pc, #360]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d116      	bne.n	8004e6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e44:	e013      	b.n	8004e6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e46:	4b56      	ldr	r3, [pc, #344]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10f      	bne.n	8004e72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e52:	4b53      	ldr	r3, [pc, #332]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d109      	bne.n	8004e72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e62:	e006      	b.n	8004e72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
      break;
 8004e68:	e004      	b.n	8004e74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e002      	b.n	8004e74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e000      	b.n	8004e74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e72:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10d      	bne.n	8004e96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e7a:	4b49      	ldr	r3, [pc, #292]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6819      	ldr	r1, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	4943      	ldr	r1, [pc, #268]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d17c      	bne.n	8004f96 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e9c:	4b40      	ldr	r3, [pc, #256]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a3f      	ldr	r2, [pc, #252]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea8:	f7fd fdae 	bl	8002a08 <HAL_GetTick>
 8004eac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eae:	e009      	b.n	8004ec4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eb0:	f7fd fdaa 	bl	8002a08 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d902      	bls.n	8004ec4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ec2:	e005      	b.n	8004ed0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ec4:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ef      	bne.n	8004eb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d15f      	bne.n	8004f96 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d110      	bne.n	8004efe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004edc:	4b30      	ldr	r3, [pc, #192]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ee4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6892      	ldr	r2, [r2, #8]
 8004eec:	0211      	lsls	r1, r2, #8
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	68d2      	ldr	r2, [r2, #12]
 8004ef2:	06d2      	lsls	r2, r2, #27
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	492a      	ldr	r1, [pc, #168]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	610b      	str	r3, [r1, #16]
 8004efc:	e027      	b.n	8004f4e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d112      	bne.n	8004f2a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f04:	4b26      	ldr	r3, [pc, #152]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6892      	ldr	r2, [r2, #8]
 8004f14:	0211      	lsls	r1, r2, #8
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6912      	ldr	r2, [r2, #16]
 8004f1a:	0852      	lsrs	r2, r2, #1
 8004f1c:	3a01      	subs	r2, #1
 8004f1e:	0552      	lsls	r2, r2, #21
 8004f20:	430a      	orrs	r2, r1
 8004f22:	491f      	ldr	r1, [pc, #124]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	610b      	str	r3, [r1, #16]
 8004f28:	e011      	b.n	8004f4e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f2a:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6892      	ldr	r2, [r2, #8]
 8004f3a:	0211      	lsls	r1, r2, #8
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6952      	ldr	r2, [r2, #20]
 8004f40:	0852      	lsrs	r2, r2, #1
 8004f42:	3a01      	subs	r2, #1
 8004f44:	0652      	lsls	r2, r2, #25
 8004f46:	430a      	orrs	r2, r1
 8004f48:	4915      	ldr	r1, [pc, #84]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f4e:	4b14      	ldr	r3, [pc, #80]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a13      	ldr	r2, [pc, #76]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5a:	f7fd fd55 	bl	8002a08 <HAL_GetTick>
 8004f5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f60:	e009      	b.n	8004f76 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f62:	f7fd fd51 	bl	8002a08 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d902      	bls.n	8004f76 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	73fb      	strb	r3, [r7, #15]
          break;
 8004f74:	e005      	b.n	8004f82 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0ef      	beq.n	8004f62 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d106      	bne.n	8004f96 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f88:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	4903      	ldr	r1, [pc, #12]	; (8004fa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40021000 	.word	0x40021000

08004fa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e095      	b.n	80050e2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d108      	bne.n	8004fd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc6:	d009      	beq.n	8004fdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	61da      	str	r2, [r3, #28]
 8004fce:	e005      	b.n	8004fdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fd fa40 	bl	800247c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005012:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800501c:	d902      	bls.n	8005024 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e002      	b.n	800502a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005028:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005032:	d007      	beq.n	8005044 <HAL_SPI_Init+0xa0>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800503c:	d002      	beq.n	8005044 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005086:	ea42 0103 	orr.w	r1, r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	0c1b      	lsrs	r3, r3, #16
 80050a0:	f003 0204 	and.w	r2, r3, #4
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050c0:	ea42 0103 	orr.w	r1, r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b088      	sub	sp, #32
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_SPI_Transmit+0x22>
 8005108:	2302      	movs	r3, #2
 800510a:	e158      	b.n	80053be <HAL_SPI_Transmit+0x2d4>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005114:	f7fd fc78 	bl	8002a08 <HAL_GetTick>
 8005118:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b01      	cmp	r3, #1
 8005128:	d002      	beq.n	8005130 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800512a:	2302      	movs	r3, #2
 800512c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800512e:	e13d      	b.n	80053ac <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <HAL_SPI_Transmit+0x52>
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d102      	bne.n	8005142 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005140:	e134      	b.n	80053ac <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2203      	movs	r2, #3
 8005146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	88fa      	ldrh	r2, [r7, #6]
 800515a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	88fa      	ldrh	r2, [r7, #6]
 8005160:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518c:	d10f      	bne.n	80051ae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	d007      	beq.n	80051cc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051d4:	d94b      	bls.n	800526e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <HAL_SPI_Transmit+0xfa>
 80051de:	8afb      	ldrh	r3, [r7, #22]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d13e      	bne.n	8005262 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	881a      	ldrh	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	1c9a      	adds	r2, r3, #2
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005208:	e02b      	b.n	8005262 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b02      	cmp	r3, #2
 8005216:	d112      	bne.n	800523e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	881a      	ldrh	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	1c9a      	adds	r2, r3, #2
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800523c:	e011      	b.n	8005262 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800523e:	f7fd fbe3 	bl	8002a08 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d803      	bhi.n	8005256 <HAL_SPI_Transmit+0x16c>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d102      	bne.n	800525c <HAL_SPI_Transmit+0x172>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d102      	bne.n	8005262 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005260:	e0a4      	b.n	80053ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1ce      	bne.n	800520a <HAL_SPI_Transmit+0x120>
 800526c:	e07c      	b.n	8005368 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_SPI_Transmit+0x192>
 8005276:	8afb      	ldrh	r3, [r7, #22]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d170      	bne.n	800535e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d912      	bls.n	80052ac <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	881a      	ldrh	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	1c9a      	adds	r2, r3, #2
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b02      	subs	r3, #2
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052aa:	e058      	b.n	800535e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	7812      	ldrb	r2, [r2, #0]
 80052b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80052d2:	e044      	b.n	800535e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d12b      	bne.n	800533a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d912      	bls.n	8005312 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	881a      	ldrh	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	1c9a      	adds	r2, r3, #2
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b02      	subs	r3, #2
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005310:	e025      	b.n	800535e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	7812      	ldrb	r2, [r2, #0]
 800531e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005338:	e011      	b.n	800535e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800533a:	f7fd fb65 	bl	8002a08 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d803      	bhi.n	8005352 <HAL_SPI_Transmit+0x268>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005350:	d102      	bne.n	8005358 <HAL_SPI_Transmit+0x26e>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800535c:	e026      	b.n	80053ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1b5      	bne.n	80052d4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 fa65 	bl	800583c <SPI_EndRxTxTransaction>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	77fb      	strb	r3, [r7, #31]
 80053a8:	e000      	b.n	80053ac <HAL_SPI_Transmit+0x2c2>
  }

error:
 80053aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80053bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	099b      	lsrs	r3, r3, #6
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10f      	bne.n	800540c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	099b      	lsrs	r3, r3, #6
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	4798      	blx	r3
    return;
 800540a:	e0d7      	b.n	80055bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_SPI_IRQHandler+0x66>
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	09db      	lsrs	r3, r3, #7
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	4798      	blx	r3
    return;
 800542c:	e0c6      	b.n	80055bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10c      	bne.n	8005454 <HAL_SPI_IRQHandler+0x8c>
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	099b      	lsrs	r3, r3, #6
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	0a1b      	lsrs	r3, r3, #8
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 80b4 	beq.w	80055bc <HAL_SPI_IRQHandler+0x1f4>
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80ad 	beq.w	80055bc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	099b      	lsrs	r3, r3, #6
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d023      	beq.n	80054b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b03      	cmp	r3, #3
 8005478:	d011      	beq.n	800549e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547e:	f043 0204 	orr.w	r2, r3, #4
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	e00b      	b.n	80054b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	693b      	ldr	r3, [r7, #16]
        return;
 80054b4:	e082      	b.n	80055bc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d014      	beq.n	80054ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c6:	f043 0201 	orr.w	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	0a1b      	lsrs	r3, r3, #8
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00c      	beq.n	8005512 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054fc:	f043 0208 	orr.w	r2, r3, #8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005504:	2300      	movs	r3, #0
 8005506:	60bb      	str	r3, [r7, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	60bb      	str	r3, [r7, #8]
 8005510:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005516:	2b00      	cmp	r3, #0
 8005518:	d04f      	beq.n	80055ba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005528:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d104      	bne.n	8005546 <HAL_SPI_IRQHandler+0x17e>
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d034      	beq.n	80055b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0203 	bic.w	r2, r2, #3
 8005554:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555a:	2b00      	cmp	r3, #0
 800555c:	d011      	beq.n	8005582 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	4a18      	ldr	r2, [pc, #96]	; (80055c4 <HAL_SPI_IRQHandler+0x1fc>)
 8005564:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556a:	4618      	mov	r0, r3
 800556c:	f7fd fc46 	bl	8002dfc <HAL_DMA_Abort_IT>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800557a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005586:	2b00      	cmp	r3, #0
 8005588:	d016      	beq.n	80055b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	4a0d      	ldr	r2, [pc, #52]	; (80055c4 <HAL_SPI_IRQHandler+0x1fc>)
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005596:	4618      	mov	r0, r3
 8005598:	f7fd fc30 	bl	8002dfc <HAL_DMA_Abort_IT>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80055ae:	e003      	b.n	80055b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f809 	bl	80055c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80055b6:	e000      	b.n	80055ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80055b8:	bf00      	nop
    return;
 80055ba:	bf00      	nop
  }
}
 80055bc:	3720      	adds	r7, #32
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	080055dd 	.word	0x080055dd

080055c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7ff ffe5 	bl	80055c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	4613      	mov	r3, r2
 8005616:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005618:	f7fd f9f6 	bl	8002a08 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	4413      	add	r3, r2
 8005626:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005628:	f7fd f9ee 	bl	8002a08 <HAL_GetTick>
 800562c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800562e:	4b39      	ldr	r3, [pc, #228]	; (8005714 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	015b      	lsls	r3, r3, #5
 8005634:	0d1b      	lsrs	r3, r3, #20
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	fb02 f303 	mul.w	r3, r2, r3
 800563c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800563e:	e054      	b.n	80056ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d050      	beq.n	80056ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005648:	f7fd f9de 	bl	8002a08 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	429a      	cmp	r2, r3
 8005656:	d902      	bls.n	800565e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d13d      	bne.n	80056da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800566c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005676:	d111      	bne.n	800569c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005680:	d004      	beq.n	800568c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800568a:	d107      	bne.n	800569c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800569a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a4:	d10f      	bne.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e017      	b.n	800570a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4013      	ands	r3, r2
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	bf0c      	ite	eq
 80056fa:	2301      	moveq	r3, #1
 80056fc:	2300      	movne	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	429a      	cmp	r2, r3
 8005706:	d19b      	bne.n	8005640 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3720      	adds	r7, #32
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000010 	.word	0x20000010

08005718 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005726:	f7fd f96f 	bl	8002a08 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	4413      	add	r3, r2
 8005734:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005736:	f7fd f967 	bl	8002a08 <HAL_GetTick>
 800573a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800573c:	4b3e      	ldr	r3, [pc, #248]	; (8005838 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	00da      	lsls	r2, r3, #3
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	0d1b      	lsrs	r3, r3, #20
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	fb02 f303 	mul.w	r3, r2, r3
 8005752:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005754:	e062      	b.n	800581c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800575c:	d109      	bne.n	8005772 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d106      	bne.n	8005772 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	330c      	adds	r3, #12
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005770:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005778:	d050      	beq.n	800581c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800577a:	f7fd f945 	bl	8002a08 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	69fa      	ldr	r2, [r7, #28]
 8005786:	429a      	cmp	r2, r3
 8005788:	d902      	bls.n	8005790 <SPI_WaitFifoStateUntilTimeout+0x78>
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d13d      	bne.n	800580c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800579e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057a8:	d111      	bne.n	80057ce <SPI_WaitFifoStateUntilTimeout+0xb6>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b2:	d004      	beq.n	80057be <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057bc:	d107      	bne.n	80057ce <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d6:	d10f      	bne.n	80057f8 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e010      	b.n	800582e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	3b01      	subs	r3, #1
 800581a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4013      	ands	r3, r2
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	429a      	cmp	r2, r3
 800582a:	d194      	bne.n	8005756 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3720      	adds	r7, #32
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20000010 	.word	0x20000010

0800583c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af02      	add	r7, sp, #8
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2200      	movs	r2, #0
 8005850:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7ff ff5f 	bl	8005718 <SPI_WaitFifoStateUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005864:	f043 0220 	orr.w	r2, r3, #32
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e027      	b.n	80058c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2200      	movs	r2, #0
 8005878:	2180      	movs	r1, #128	; 0x80
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f7ff fec4 	bl	8005608 <SPI_WaitFlagStateUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e014      	b.n	80058c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2200      	movs	r2, #0
 800589e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f7ff ff38 	bl	8005718 <SPI_WaitFifoStateUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b2:	f043 0220 	orr.w	r2, r3, #32
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e000      	b.n	80058c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e049      	b.n	800596e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fc fe3c 	bl	800256c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f000 f9d2 	bl	8005cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	d001      	beq.n	8005990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e03b      	b.n	8005a08 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a19      	ldr	r2, [pc, #100]	; (8005a14 <HAL_TIM_Base_Start_IT+0x9c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d009      	beq.n	80059c6 <HAL_TIM_Base_Start_IT+0x4e>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ba:	d004      	beq.n	80059c6 <HAL_TIM_Base_Start_IT+0x4e>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a15      	ldr	r2, [pc, #84]	; (8005a18 <HAL_TIM_Base_Start_IT+0xa0>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d115      	bne.n	80059f2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <HAL_TIM_Base_Start_IT+0xa4>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b06      	cmp	r3, #6
 80059d6:	d015      	beq.n	8005a04 <HAL_TIM_Base_Start_IT+0x8c>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059de:	d011      	beq.n	8005a04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0201 	orr.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f0:	e008      	b.n	8005a04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0201 	orr.w	r2, r2, #1
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	e000      	b.n	8005a06 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	00010007 	.word	0x00010007

08005a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d122      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d11b      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0202 	mvn.w	r2, #2
 8005a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f905 	bl	8005c72 <HAL_TIM_IC_CaptureCallback>
 8005a68:	e005      	b.n	8005a76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f8f7 	bl	8005c5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f908 	bl	8005c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d122      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d11b      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0204 	mvn.w	r2, #4
 8005aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8db 	bl	8005c72 <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f8cd 	bl	8005c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f8de 	bl	8005c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d122      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d11b      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0208 	mvn.w	r2, #8
 8005af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2204      	movs	r2, #4
 8005afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f8b1 	bl	8005c72 <HAL_TIM_IC_CaptureCallback>
 8005b10:	e005      	b.n	8005b1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f8a3 	bl	8005c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f8b4 	bl	8005c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	2b10      	cmp	r3, #16
 8005b30:	d122      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d11b      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0210 	mvn.w	r2, #16
 8005b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2208      	movs	r2, #8
 8005b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f887 	bl	8005c72 <HAL_TIM_IC_CaptureCallback>
 8005b64:	e005      	b.n	8005b72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f879 	bl	8005c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f88a 	bl	8005c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d10e      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d107      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0201 	mvn.w	r2, #1
 8005b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb fec0 	bl	8001924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bae:	2b80      	cmp	r3, #128	; 0x80
 8005bb0:	d10e      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bbc:	2b80      	cmp	r3, #128	; 0x80
 8005bbe:	d107      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f944 	bl	8005e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bde:	d10e      	bne.n	8005bfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bea:	2b80      	cmp	r3, #128	; 0x80
 8005bec:	d107      	bne.n	8005bfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f937 	bl	8005e6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b40      	cmp	r3, #64	; 0x40
 8005c0a:	d10e      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d107      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f838 	bl	8005c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d10e      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d107      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f06f 0220 	mvn.w	r2, #32
 8005c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f8f7 	bl	8005e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a2a      	ldr	r2, [pc, #168]	; (8005d6c <TIM_Base_SetConfig+0xbc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d003      	beq.n	8005cd0 <TIM_Base_SetConfig+0x20>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cce:	d108      	bne.n	8005ce2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a21      	ldr	r2, [pc, #132]	; (8005d6c <TIM_Base_SetConfig+0xbc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00b      	beq.n	8005d02 <TIM_Base_SetConfig+0x52>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf0:	d007      	beq.n	8005d02 <TIM_Base_SetConfig+0x52>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a1e      	ldr	r2, [pc, #120]	; (8005d70 <TIM_Base_SetConfig+0xc0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d003      	beq.n	8005d02 <TIM_Base_SetConfig+0x52>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a1d      	ldr	r2, [pc, #116]	; (8005d74 <TIM_Base_SetConfig+0xc4>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d108      	bne.n	8005d14 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <TIM_Base_SetConfig+0xbc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d007      	beq.n	8005d50 <TIM_Base_SetConfig+0xa0>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a0b      	ldr	r2, [pc, #44]	; (8005d70 <TIM_Base_SetConfig+0xc0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d003      	beq.n	8005d50 <TIM_Base_SetConfig+0xa0>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a0a      	ldr	r2, [pc, #40]	; (8005d74 <TIM_Base_SetConfig+0xc4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d103      	bne.n	8005d58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	615a      	str	r2, [r3, #20]
}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40012c00 	.word	0x40012c00
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40014400 	.word	0x40014400

08005d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e04f      	b.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a21      	ldr	r2, [pc, #132]	; (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d108      	bne.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a14      	ldr	r2, [pc, #80]	; (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d009      	beq.n	8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df8:	d004      	beq.n	8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a10      	ldr	r2, [pc, #64]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d10c      	bne.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	40012c00 	.word	0x40012c00
 8005e40:	40014000 	.word	0x40014000

08005e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e040      	b.n	8005f14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fc fb88 	bl	80025b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2224      	movs	r2, #36	; 0x24
 8005eac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f8c0 	bl	8006044 <UART_SetConfig>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e022      	b.n	8005f14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fac0 	bl	800645c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0201 	orr.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fb47 	bl	80065a0 <UART_CheckIdleState>
 8005f12:	4603      	mov	r3, r0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	; 0x28
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	f040 8082 	bne.w	800603a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <HAL_UART_Transmit+0x26>
 8005f3c:	88fb      	ldrh	r3, [r7, #6]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e07a      	b.n	800603c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_UART_Transmit+0x38>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e073      	b.n	800603c <HAL_UART_Transmit+0x120>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2221      	movs	r2, #33	; 0x21
 8005f68:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f6a:	f7fc fd4d 	bl	8002a08 <HAL_GetTick>
 8005f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	88fa      	ldrh	r2, [r7, #6]
 8005f74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	88fa      	ldrh	r2, [r7, #6]
 8005f7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f88:	d108      	bne.n	8005f9c <HAL_UART_Transmit+0x80>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d104      	bne.n	8005f9c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	e003      	b.n	8005fa4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005fac:	e02d      	b.n	800600a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2180      	movs	r1, #128	; 0x80
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 fb3a 	bl	8006632 <UART_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e039      	b.n	800603c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	881a      	ldrh	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fda:	b292      	uxth	r2, r2
 8005fdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	e008      	b.n	8005ff8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	b292      	uxth	r2, r2
 8005ff0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1cb      	bne.n	8005fae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2200      	movs	r2, #0
 800601e:	2140      	movs	r1, #64	; 0x40
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fb06 	bl	8006632 <UART_WaitOnFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e005      	b.n	800603c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	e000      	b.n	800603c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800603a:	2302      	movs	r3, #2
  }
}
 800603c:	4618      	mov	r0, r3
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006044:	b5b0      	push	{r4, r5, r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	4313      	orrs	r3, r2
 8006066:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4baf      	ldr	r3, [pc, #700]	; (800632c <UART_SetConfig+0x2e8>)
 8006070:	4013      	ands	r3, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	69f9      	ldr	r1, [r7, #28]
 8006078:	430b      	orrs	r3, r1
 800607a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4aa4      	ldr	r2, [pc, #656]	; (8006330 <UART_SetConfig+0x2ec>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	430a      	orrs	r2, r1
 80060be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a9b      	ldr	r2, [pc, #620]	; (8006334 <UART_SetConfig+0x2f0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d121      	bne.n	800610e <UART_SetConfig+0xca>
 80060ca:	4b9b      	ldr	r3, [pc, #620]	; (8006338 <UART_SetConfig+0x2f4>)
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d817      	bhi.n	8006108 <UART_SetConfig+0xc4>
 80060d8:	a201      	add	r2, pc, #4	; (adr r2, 80060e0 <UART_SetConfig+0x9c>)
 80060da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060de:	bf00      	nop
 80060e0:	080060f1 	.word	0x080060f1
 80060e4:	080060fd 	.word	0x080060fd
 80060e8:	080060f7 	.word	0x080060f7
 80060ec:	08006103 	.word	0x08006103
 80060f0:	2301      	movs	r3, #1
 80060f2:	76fb      	strb	r3, [r7, #27]
 80060f4:	e070      	b.n	80061d8 <UART_SetConfig+0x194>
 80060f6:	2302      	movs	r3, #2
 80060f8:	76fb      	strb	r3, [r7, #27]
 80060fa:	e06d      	b.n	80061d8 <UART_SetConfig+0x194>
 80060fc:	2304      	movs	r3, #4
 80060fe:	76fb      	strb	r3, [r7, #27]
 8006100:	e06a      	b.n	80061d8 <UART_SetConfig+0x194>
 8006102:	2308      	movs	r3, #8
 8006104:	76fb      	strb	r3, [r7, #27]
 8006106:	e067      	b.n	80061d8 <UART_SetConfig+0x194>
 8006108:	2310      	movs	r3, #16
 800610a:	76fb      	strb	r3, [r7, #27]
 800610c:	e064      	b.n	80061d8 <UART_SetConfig+0x194>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a8a      	ldr	r2, [pc, #552]	; (800633c <UART_SetConfig+0x2f8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d132      	bne.n	800617e <UART_SetConfig+0x13a>
 8006118:	4b87      	ldr	r3, [pc, #540]	; (8006338 <UART_SetConfig+0x2f4>)
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611e:	f003 030c 	and.w	r3, r3, #12
 8006122:	2b0c      	cmp	r3, #12
 8006124:	d828      	bhi.n	8006178 <UART_SetConfig+0x134>
 8006126:	a201      	add	r2, pc, #4	; (adr r2, 800612c <UART_SetConfig+0xe8>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	08006161 	.word	0x08006161
 8006130:	08006179 	.word	0x08006179
 8006134:	08006179 	.word	0x08006179
 8006138:	08006179 	.word	0x08006179
 800613c:	0800616d 	.word	0x0800616d
 8006140:	08006179 	.word	0x08006179
 8006144:	08006179 	.word	0x08006179
 8006148:	08006179 	.word	0x08006179
 800614c:	08006167 	.word	0x08006167
 8006150:	08006179 	.word	0x08006179
 8006154:	08006179 	.word	0x08006179
 8006158:	08006179 	.word	0x08006179
 800615c:	08006173 	.word	0x08006173
 8006160:	2300      	movs	r3, #0
 8006162:	76fb      	strb	r3, [r7, #27]
 8006164:	e038      	b.n	80061d8 <UART_SetConfig+0x194>
 8006166:	2302      	movs	r3, #2
 8006168:	76fb      	strb	r3, [r7, #27]
 800616a:	e035      	b.n	80061d8 <UART_SetConfig+0x194>
 800616c:	2304      	movs	r3, #4
 800616e:	76fb      	strb	r3, [r7, #27]
 8006170:	e032      	b.n	80061d8 <UART_SetConfig+0x194>
 8006172:	2308      	movs	r3, #8
 8006174:	76fb      	strb	r3, [r7, #27]
 8006176:	e02f      	b.n	80061d8 <UART_SetConfig+0x194>
 8006178:	2310      	movs	r3, #16
 800617a:	76fb      	strb	r3, [r7, #27]
 800617c:	e02c      	b.n	80061d8 <UART_SetConfig+0x194>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a6b      	ldr	r2, [pc, #428]	; (8006330 <UART_SetConfig+0x2ec>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d125      	bne.n	80061d4 <UART_SetConfig+0x190>
 8006188:	4b6b      	ldr	r3, [pc, #428]	; (8006338 <UART_SetConfig+0x2f4>)
 800618a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006192:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006196:	d017      	beq.n	80061c8 <UART_SetConfig+0x184>
 8006198:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800619c:	d817      	bhi.n	80061ce <UART_SetConfig+0x18a>
 800619e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061a2:	d00b      	beq.n	80061bc <UART_SetConfig+0x178>
 80061a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061a8:	d811      	bhi.n	80061ce <UART_SetConfig+0x18a>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <UART_SetConfig+0x172>
 80061ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b2:	d006      	beq.n	80061c2 <UART_SetConfig+0x17e>
 80061b4:	e00b      	b.n	80061ce <UART_SetConfig+0x18a>
 80061b6:	2300      	movs	r3, #0
 80061b8:	76fb      	strb	r3, [r7, #27]
 80061ba:	e00d      	b.n	80061d8 <UART_SetConfig+0x194>
 80061bc:	2302      	movs	r3, #2
 80061be:	76fb      	strb	r3, [r7, #27]
 80061c0:	e00a      	b.n	80061d8 <UART_SetConfig+0x194>
 80061c2:	2304      	movs	r3, #4
 80061c4:	76fb      	strb	r3, [r7, #27]
 80061c6:	e007      	b.n	80061d8 <UART_SetConfig+0x194>
 80061c8:	2308      	movs	r3, #8
 80061ca:	76fb      	strb	r3, [r7, #27]
 80061cc:	e004      	b.n	80061d8 <UART_SetConfig+0x194>
 80061ce:	2310      	movs	r3, #16
 80061d0:	76fb      	strb	r3, [r7, #27]
 80061d2:	e001      	b.n	80061d8 <UART_SetConfig+0x194>
 80061d4:	2310      	movs	r3, #16
 80061d6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a54      	ldr	r2, [pc, #336]	; (8006330 <UART_SetConfig+0x2ec>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d173      	bne.n	80062ca <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061e2:	7efb      	ldrb	r3, [r7, #27]
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d824      	bhi.n	8006232 <UART_SetConfig+0x1ee>
 80061e8:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <UART_SetConfig+0x1ac>)
 80061ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ee:	bf00      	nop
 80061f0:	08006215 	.word	0x08006215
 80061f4:	08006233 	.word	0x08006233
 80061f8:	0800621d 	.word	0x0800621d
 80061fc:	08006233 	.word	0x08006233
 8006200:	08006223 	.word	0x08006223
 8006204:	08006233 	.word	0x08006233
 8006208:	08006233 	.word	0x08006233
 800620c:	08006233 	.word	0x08006233
 8006210:	0800622b 	.word	0x0800622b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006214:	f7fe fb54 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 8006218:	6178      	str	r0, [r7, #20]
        break;
 800621a:	e00f      	b.n	800623c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800621c:	4b48      	ldr	r3, [pc, #288]	; (8006340 <UART_SetConfig+0x2fc>)
 800621e:	617b      	str	r3, [r7, #20]
        break;
 8006220:	e00c      	b.n	800623c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006222:	f7fe fab5 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8006226:	6178      	str	r0, [r7, #20]
        break;
 8006228:	e008      	b.n	800623c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800622e:	617b      	str	r3, [r7, #20]
        break;
 8006230:	e004      	b.n	800623c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	76bb      	strb	r3, [r7, #26]
        break;
 800623a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 80fe 	beq.w	8006440 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	4613      	mov	r3, r2
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	4413      	add	r3, r2
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	429a      	cmp	r2, r3
 8006252:	d305      	bcc.n	8006260 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	429a      	cmp	r2, r3
 800625e:	d902      	bls.n	8006266 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	76bb      	strb	r3, [r7, #26]
 8006264:	e0ec      	b.n	8006440 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	4618      	mov	r0, r3
 800626a:	f04f 0100 	mov.w	r1, #0
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	020b      	lsls	r3, r1, #8
 8006278:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800627c:	0202      	lsls	r2, r0, #8
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	6849      	ldr	r1, [r1, #4]
 8006282:	0849      	lsrs	r1, r1, #1
 8006284:	4608      	mov	r0, r1
 8006286:	f04f 0100 	mov.w	r1, #0
 800628a:	1814      	adds	r4, r2, r0
 800628c:	eb43 0501 	adc.w	r5, r3, r1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	461a      	mov	r2, r3
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	4620      	mov	r0, r4
 800629c:	4629      	mov	r1, r5
 800629e:	f7fa fcd3 	bl	8000c48 <__aeabi_uldivmod>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4613      	mov	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062b0:	d308      	bcc.n	80062c4 <UART_SetConfig+0x280>
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062b8:	d204      	bcs.n	80062c4 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	60da      	str	r2, [r3, #12]
 80062c2:	e0bd      	b.n	8006440 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	76bb      	strb	r3, [r7, #26]
 80062c8:	e0ba      	b.n	8006440 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d2:	d168      	bne.n	80063a6 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80062d4:	7efb      	ldrb	r3, [r7, #27]
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d834      	bhi.n	8006344 <UART_SetConfig+0x300>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <UART_SetConfig+0x29c>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	08006305 	.word	0x08006305
 80062e4:	0800630d 	.word	0x0800630d
 80062e8:	08006315 	.word	0x08006315
 80062ec:	08006345 	.word	0x08006345
 80062f0:	0800631b 	.word	0x0800631b
 80062f4:	08006345 	.word	0x08006345
 80062f8:	08006345 	.word	0x08006345
 80062fc:	08006345 	.word	0x08006345
 8006300:	08006323 	.word	0x08006323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006304:	f7fe fadc 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 8006308:	6178      	str	r0, [r7, #20]
        break;
 800630a:	e020      	b.n	800634e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800630c:	f7fe faee 	bl	80048ec <HAL_RCC_GetPCLK2Freq>
 8006310:	6178      	str	r0, [r7, #20]
        break;
 8006312:	e01c      	b.n	800634e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006314:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <UART_SetConfig+0x2fc>)
 8006316:	617b      	str	r3, [r7, #20]
        break;
 8006318:	e019      	b.n	800634e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800631a:	f7fe fa39 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 800631e:	6178      	str	r0, [r7, #20]
        break;
 8006320:	e015      	b.n	800634e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006326:	617b      	str	r3, [r7, #20]
        break;
 8006328:	e011      	b.n	800634e <UART_SetConfig+0x30a>
 800632a:	bf00      	nop
 800632c:	efff69f3 	.word	0xefff69f3
 8006330:	40008000 	.word	0x40008000
 8006334:	40013800 	.word	0x40013800
 8006338:	40021000 	.word	0x40021000
 800633c:	40004400 	.word	0x40004400
 8006340:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	76bb      	strb	r3, [r7, #26]
        break;
 800634c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d075      	beq.n	8006440 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	005a      	lsls	r2, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	085b      	lsrs	r3, r3, #1
 800635e:	441a      	add	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	fbb2 f3f3 	udiv	r3, r2, r3
 8006368:	b29b      	uxth	r3, r3
 800636a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	2b0f      	cmp	r3, #15
 8006370:	d916      	bls.n	80063a0 <UART_SetConfig+0x35c>
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006378:	d212      	bcs.n	80063a0 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	b29b      	uxth	r3, r3
 800637e:	f023 030f 	bic.w	r3, r3, #15
 8006382:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	b29b      	uxth	r3, r3
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	b29a      	uxth	r2, r3
 8006390:	89fb      	ldrh	r3, [r7, #14]
 8006392:	4313      	orrs	r3, r2
 8006394:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	89fa      	ldrh	r2, [r7, #14]
 800639c:	60da      	str	r2, [r3, #12]
 800639e:	e04f      	b.n	8006440 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	76bb      	strb	r3, [r7, #26]
 80063a4:	e04c      	b.n	8006440 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063a6:	7efb      	ldrb	r3, [r7, #27]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d828      	bhi.n	80063fe <UART_SetConfig+0x3ba>
 80063ac:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <UART_SetConfig+0x370>)
 80063ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b2:	bf00      	nop
 80063b4:	080063d9 	.word	0x080063d9
 80063b8:	080063e1 	.word	0x080063e1
 80063bc:	080063e9 	.word	0x080063e9
 80063c0:	080063ff 	.word	0x080063ff
 80063c4:	080063ef 	.word	0x080063ef
 80063c8:	080063ff 	.word	0x080063ff
 80063cc:	080063ff 	.word	0x080063ff
 80063d0:	080063ff 	.word	0x080063ff
 80063d4:	080063f7 	.word	0x080063f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d8:	f7fe fa72 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 80063dc:	6178      	str	r0, [r7, #20]
        break;
 80063de:	e013      	b.n	8006408 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063e0:	f7fe fa84 	bl	80048ec <HAL_RCC_GetPCLK2Freq>
 80063e4:	6178      	str	r0, [r7, #20]
        break;
 80063e6:	e00f      	b.n	8006408 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063e8:	4b1b      	ldr	r3, [pc, #108]	; (8006458 <UART_SetConfig+0x414>)
 80063ea:	617b      	str	r3, [r7, #20]
        break;
 80063ec:	e00c      	b.n	8006408 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ee:	f7fe f9cf 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 80063f2:	6178      	str	r0, [r7, #20]
        break;
 80063f4:	e008      	b.n	8006408 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063fa:	617b      	str	r3, [r7, #20]
        break;
 80063fc:	e004      	b.n	8006408 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	76bb      	strb	r3, [r7, #26]
        break;
 8006406:	bf00      	nop
    }

    if (pclk != 0U)
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d018      	beq.n	8006440 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	085a      	lsrs	r2, r3, #1
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	441a      	add	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006420:	b29b      	uxth	r3, r3
 8006422:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b0f      	cmp	r3, #15
 8006428:	d908      	bls.n	800643c <UART_SetConfig+0x3f8>
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006430:	d204      	bcs.n	800643c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	60da      	str	r2, [r3, #12]
 800643a:	e001      	b.n	8006440 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800644c:	7ebb      	ldrb	r3, [r7, #26]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3720      	adds	r7, #32
 8006452:	46bd      	mov	sp, r7
 8006454:	bdb0      	pop	{r4, r5, r7, pc}
 8006456:	bf00      	nop
 8006458:	00f42400 	.word	0x00f42400

0800645c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006538:	2b00      	cmp	r3, #0
 800653a:	d01a      	beq.n	8006572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800655a:	d10a      	bne.n	8006572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	605a      	str	r2, [r3, #4]
  }
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065b0:	f7fc fa2a 	bl	8002a08 <HAL_GetTick>
 80065b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d10e      	bne.n	80065e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f82d 	bl	8006632 <UART_WaitOnFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e023      	b.n	800662a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d10e      	bne.n	800660e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f817 	bl	8006632 <UART_WaitOnFlagUntilTimeout>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e00d      	b.n	800662a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2220      	movs	r2, #32
 8006618:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b084      	sub	sp, #16
 8006636:	af00      	add	r7, sp, #0
 8006638:	60f8      	str	r0, [r7, #12]
 800663a:	60b9      	str	r1, [r7, #8]
 800663c:	603b      	str	r3, [r7, #0]
 800663e:	4613      	mov	r3, r2
 8006640:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006642:	e05e      	b.n	8006702 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d05a      	beq.n	8006702 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800664c:	f7fc f9dc 	bl	8002a08 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	429a      	cmp	r2, r3
 800665a:	d302      	bcc.n	8006662 <UART_WaitOnFlagUntilTimeout+0x30>
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d11b      	bne.n	800669a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006670:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0201 	bic.w	r2, r2, #1
 8006680:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e043      	b.n	8006722 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d02c      	beq.n	8006702 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b6:	d124      	bne.n	8006702 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066c0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066d0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0201 	bic.w	r2, r2, #1
 80066e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2220      	movs	r2, #32
 80066e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e00f      	b.n	8006722 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69da      	ldr	r2, [r3, #28]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4013      	ands	r3, r2
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	429a      	cmp	r2, r3
 8006710:	bf0c      	ite	eq
 8006712:	2301      	moveq	r3, #1
 8006714:	2300      	movne	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	429a      	cmp	r2, r3
 800671e:	d091      	beq.n	8006644 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <__errno>:
 800672c:	4b01      	ldr	r3, [pc, #4]	; (8006734 <__errno+0x8>)
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	2000001c 	.word	0x2000001c

08006738 <__libc_init_array>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	4d0d      	ldr	r5, [pc, #52]	; (8006770 <__libc_init_array+0x38>)
 800673c:	4c0d      	ldr	r4, [pc, #52]	; (8006774 <__libc_init_array+0x3c>)
 800673e:	1b64      	subs	r4, r4, r5
 8006740:	10a4      	asrs	r4, r4, #2
 8006742:	2600      	movs	r6, #0
 8006744:	42a6      	cmp	r6, r4
 8006746:	d109      	bne.n	800675c <__libc_init_array+0x24>
 8006748:	4d0b      	ldr	r5, [pc, #44]	; (8006778 <__libc_init_array+0x40>)
 800674a:	4c0c      	ldr	r4, [pc, #48]	; (800677c <__libc_init_array+0x44>)
 800674c:	f004 f8da 	bl	800a904 <_init>
 8006750:	1b64      	subs	r4, r4, r5
 8006752:	10a4      	asrs	r4, r4, #2
 8006754:	2600      	movs	r6, #0
 8006756:	42a6      	cmp	r6, r4
 8006758:	d105      	bne.n	8006766 <__libc_init_array+0x2e>
 800675a:	bd70      	pop	{r4, r5, r6, pc}
 800675c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006760:	4798      	blx	r3
 8006762:	3601      	adds	r6, #1
 8006764:	e7ee      	b.n	8006744 <__libc_init_array+0xc>
 8006766:	f855 3b04 	ldr.w	r3, [r5], #4
 800676a:	4798      	blx	r3
 800676c:	3601      	adds	r6, #1
 800676e:	e7f2      	b.n	8006756 <__libc_init_array+0x1e>
 8006770:	0800b5b0 	.word	0x0800b5b0
 8006774:	0800b5b0 	.word	0x0800b5b0
 8006778:	0800b5b0 	.word	0x0800b5b0
 800677c:	0800b5b4 	.word	0x0800b5b4

08006780 <memcpy>:
 8006780:	440a      	add	r2, r1
 8006782:	4291      	cmp	r1, r2
 8006784:	f100 33ff 	add.w	r3, r0, #4294967295
 8006788:	d100      	bne.n	800678c <memcpy+0xc>
 800678a:	4770      	bx	lr
 800678c:	b510      	push	{r4, lr}
 800678e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006792:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006796:	4291      	cmp	r1, r2
 8006798:	d1f9      	bne.n	800678e <memcpy+0xe>
 800679a:	bd10      	pop	{r4, pc}

0800679c <memmove>:
 800679c:	4288      	cmp	r0, r1
 800679e:	b510      	push	{r4, lr}
 80067a0:	eb01 0402 	add.w	r4, r1, r2
 80067a4:	d902      	bls.n	80067ac <memmove+0x10>
 80067a6:	4284      	cmp	r4, r0
 80067a8:	4623      	mov	r3, r4
 80067aa:	d807      	bhi.n	80067bc <memmove+0x20>
 80067ac:	1e43      	subs	r3, r0, #1
 80067ae:	42a1      	cmp	r1, r4
 80067b0:	d008      	beq.n	80067c4 <memmove+0x28>
 80067b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067ba:	e7f8      	b.n	80067ae <memmove+0x12>
 80067bc:	4402      	add	r2, r0
 80067be:	4601      	mov	r1, r0
 80067c0:	428a      	cmp	r2, r1
 80067c2:	d100      	bne.n	80067c6 <memmove+0x2a>
 80067c4:	bd10      	pop	{r4, pc}
 80067c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067ce:	e7f7      	b.n	80067c0 <memmove+0x24>

080067d0 <memset>:
 80067d0:	4402      	add	r2, r0
 80067d2:	4603      	mov	r3, r0
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d100      	bne.n	80067da <memset+0xa>
 80067d8:	4770      	bx	lr
 80067da:	f803 1b01 	strb.w	r1, [r3], #1
 80067de:	e7f9      	b.n	80067d4 <memset+0x4>

080067e0 <__cvt>:
 80067e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067e4:	ec55 4b10 	vmov	r4, r5, d0
 80067e8:	2d00      	cmp	r5, #0
 80067ea:	460e      	mov	r6, r1
 80067ec:	4619      	mov	r1, r3
 80067ee:	462b      	mov	r3, r5
 80067f0:	bfbb      	ittet	lt
 80067f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80067f6:	461d      	movlt	r5, r3
 80067f8:	2300      	movge	r3, #0
 80067fa:	232d      	movlt	r3, #45	; 0x2d
 80067fc:	700b      	strb	r3, [r1, #0]
 80067fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006800:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006804:	4691      	mov	r9, r2
 8006806:	f023 0820 	bic.w	r8, r3, #32
 800680a:	bfbc      	itt	lt
 800680c:	4622      	movlt	r2, r4
 800680e:	4614      	movlt	r4, r2
 8006810:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006814:	d005      	beq.n	8006822 <__cvt+0x42>
 8006816:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800681a:	d100      	bne.n	800681e <__cvt+0x3e>
 800681c:	3601      	adds	r6, #1
 800681e:	2102      	movs	r1, #2
 8006820:	e000      	b.n	8006824 <__cvt+0x44>
 8006822:	2103      	movs	r1, #3
 8006824:	ab03      	add	r3, sp, #12
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	ab02      	add	r3, sp, #8
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	ec45 4b10 	vmov	d0, r4, r5
 8006830:	4653      	mov	r3, sl
 8006832:	4632      	mov	r2, r6
 8006834:	f000 fcec 	bl	8007210 <_dtoa_r>
 8006838:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800683c:	4607      	mov	r7, r0
 800683e:	d102      	bne.n	8006846 <__cvt+0x66>
 8006840:	f019 0f01 	tst.w	r9, #1
 8006844:	d022      	beq.n	800688c <__cvt+0xac>
 8006846:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800684a:	eb07 0906 	add.w	r9, r7, r6
 800684e:	d110      	bne.n	8006872 <__cvt+0x92>
 8006850:	783b      	ldrb	r3, [r7, #0]
 8006852:	2b30      	cmp	r3, #48	; 0x30
 8006854:	d10a      	bne.n	800686c <__cvt+0x8c>
 8006856:	2200      	movs	r2, #0
 8006858:	2300      	movs	r3, #0
 800685a:	4620      	mov	r0, r4
 800685c:	4629      	mov	r1, r5
 800685e:	f7fa f933 	bl	8000ac8 <__aeabi_dcmpeq>
 8006862:	b918      	cbnz	r0, 800686c <__cvt+0x8c>
 8006864:	f1c6 0601 	rsb	r6, r6, #1
 8006868:	f8ca 6000 	str.w	r6, [sl]
 800686c:	f8da 3000 	ldr.w	r3, [sl]
 8006870:	4499      	add	r9, r3
 8006872:	2200      	movs	r2, #0
 8006874:	2300      	movs	r3, #0
 8006876:	4620      	mov	r0, r4
 8006878:	4629      	mov	r1, r5
 800687a:	f7fa f925 	bl	8000ac8 <__aeabi_dcmpeq>
 800687e:	b108      	cbz	r0, 8006884 <__cvt+0xa4>
 8006880:	f8cd 900c 	str.w	r9, [sp, #12]
 8006884:	2230      	movs	r2, #48	; 0x30
 8006886:	9b03      	ldr	r3, [sp, #12]
 8006888:	454b      	cmp	r3, r9
 800688a:	d307      	bcc.n	800689c <__cvt+0xbc>
 800688c:	9b03      	ldr	r3, [sp, #12]
 800688e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006890:	1bdb      	subs	r3, r3, r7
 8006892:	4638      	mov	r0, r7
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	b004      	add	sp, #16
 8006898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800689c:	1c59      	adds	r1, r3, #1
 800689e:	9103      	str	r1, [sp, #12]
 80068a0:	701a      	strb	r2, [r3, #0]
 80068a2:	e7f0      	b.n	8006886 <__cvt+0xa6>

080068a4 <__exponent>:
 80068a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068a6:	4603      	mov	r3, r0
 80068a8:	2900      	cmp	r1, #0
 80068aa:	bfb8      	it	lt
 80068ac:	4249      	neglt	r1, r1
 80068ae:	f803 2b02 	strb.w	r2, [r3], #2
 80068b2:	bfb4      	ite	lt
 80068b4:	222d      	movlt	r2, #45	; 0x2d
 80068b6:	222b      	movge	r2, #43	; 0x2b
 80068b8:	2909      	cmp	r1, #9
 80068ba:	7042      	strb	r2, [r0, #1]
 80068bc:	dd2a      	ble.n	8006914 <__exponent+0x70>
 80068be:	f10d 0407 	add.w	r4, sp, #7
 80068c2:	46a4      	mov	ip, r4
 80068c4:	270a      	movs	r7, #10
 80068c6:	46a6      	mov	lr, r4
 80068c8:	460a      	mov	r2, r1
 80068ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80068ce:	fb07 1516 	mls	r5, r7, r6, r1
 80068d2:	3530      	adds	r5, #48	; 0x30
 80068d4:	2a63      	cmp	r2, #99	; 0x63
 80068d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80068da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80068de:	4631      	mov	r1, r6
 80068e0:	dcf1      	bgt.n	80068c6 <__exponent+0x22>
 80068e2:	3130      	adds	r1, #48	; 0x30
 80068e4:	f1ae 0502 	sub.w	r5, lr, #2
 80068e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80068ec:	1c44      	adds	r4, r0, #1
 80068ee:	4629      	mov	r1, r5
 80068f0:	4561      	cmp	r1, ip
 80068f2:	d30a      	bcc.n	800690a <__exponent+0x66>
 80068f4:	f10d 0209 	add.w	r2, sp, #9
 80068f8:	eba2 020e 	sub.w	r2, r2, lr
 80068fc:	4565      	cmp	r5, ip
 80068fe:	bf88      	it	hi
 8006900:	2200      	movhi	r2, #0
 8006902:	4413      	add	r3, r2
 8006904:	1a18      	subs	r0, r3, r0
 8006906:	b003      	add	sp, #12
 8006908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800690a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800690e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006912:	e7ed      	b.n	80068f0 <__exponent+0x4c>
 8006914:	2330      	movs	r3, #48	; 0x30
 8006916:	3130      	adds	r1, #48	; 0x30
 8006918:	7083      	strb	r3, [r0, #2]
 800691a:	70c1      	strb	r1, [r0, #3]
 800691c:	1d03      	adds	r3, r0, #4
 800691e:	e7f1      	b.n	8006904 <__exponent+0x60>

08006920 <_printf_float>:
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	ed2d 8b02 	vpush	{d8}
 8006928:	b08d      	sub	sp, #52	; 0x34
 800692a:	460c      	mov	r4, r1
 800692c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006930:	4616      	mov	r6, r2
 8006932:	461f      	mov	r7, r3
 8006934:	4605      	mov	r5, r0
 8006936:	f001 fa57 	bl	8007de8 <_localeconv_r>
 800693a:	f8d0 a000 	ldr.w	sl, [r0]
 800693e:	4650      	mov	r0, sl
 8006940:	f7f9 fc46 	bl	80001d0 <strlen>
 8006944:	2300      	movs	r3, #0
 8006946:	930a      	str	r3, [sp, #40]	; 0x28
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	9305      	str	r3, [sp, #20]
 800694c:	f8d8 3000 	ldr.w	r3, [r8]
 8006950:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006954:	3307      	adds	r3, #7
 8006956:	f023 0307 	bic.w	r3, r3, #7
 800695a:	f103 0208 	add.w	r2, r3, #8
 800695e:	f8c8 2000 	str.w	r2, [r8]
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800696a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800696e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006972:	9307      	str	r3, [sp, #28]
 8006974:	f8cd 8018 	str.w	r8, [sp, #24]
 8006978:	ee08 0a10 	vmov	s16, r0
 800697c:	4b9f      	ldr	r3, [pc, #636]	; (8006bfc <_printf_float+0x2dc>)
 800697e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006982:	f04f 32ff 	mov.w	r2, #4294967295
 8006986:	f7fa f8d1 	bl	8000b2c <__aeabi_dcmpun>
 800698a:	bb88      	cbnz	r0, 80069f0 <_printf_float+0xd0>
 800698c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006990:	4b9a      	ldr	r3, [pc, #616]	; (8006bfc <_printf_float+0x2dc>)
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	f7fa f8ab 	bl	8000af0 <__aeabi_dcmple>
 800699a:	bb48      	cbnz	r0, 80069f0 <_printf_float+0xd0>
 800699c:	2200      	movs	r2, #0
 800699e:	2300      	movs	r3, #0
 80069a0:	4640      	mov	r0, r8
 80069a2:	4649      	mov	r1, r9
 80069a4:	f7fa f89a 	bl	8000adc <__aeabi_dcmplt>
 80069a8:	b110      	cbz	r0, 80069b0 <_printf_float+0x90>
 80069aa:	232d      	movs	r3, #45	; 0x2d
 80069ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b0:	4b93      	ldr	r3, [pc, #588]	; (8006c00 <_printf_float+0x2e0>)
 80069b2:	4894      	ldr	r0, [pc, #592]	; (8006c04 <_printf_float+0x2e4>)
 80069b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80069b8:	bf94      	ite	ls
 80069ba:	4698      	movls	r8, r3
 80069bc:	4680      	movhi	r8, r0
 80069be:	2303      	movs	r3, #3
 80069c0:	6123      	str	r3, [r4, #16]
 80069c2:	9b05      	ldr	r3, [sp, #20]
 80069c4:	f023 0204 	bic.w	r2, r3, #4
 80069c8:	6022      	str	r2, [r4, #0]
 80069ca:	f04f 0900 	mov.w	r9, #0
 80069ce:	9700      	str	r7, [sp, #0]
 80069d0:	4633      	mov	r3, r6
 80069d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80069d4:	4621      	mov	r1, r4
 80069d6:	4628      	mov	r0, r5
 80069d8:	f000 f9d8 	bl	8006d8c <_printf_common>
 80069dc:	3001      	adds	r0, #1
 80069de:	f040 8090 	bne.w	8006b02 <_printf_float+0x1e2>
 80069e2:	f04f 30ff 	mov.w	r0, #4294967295
 80069e6:	b00d      	add	sp, #52	; 0x34
 80069e8:	ecbd 8b02 	vpop	{d8}
 80069ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f0:	4642      	mov	r2, r8
 80069f2:	464b      	mov	r3, r9
 80069f4:	4640      	mov	r0, r8
 80069f6:	4649      	mov	r1, r9
 80069f8:	f7fa f898 	bl	8000b2c <__aeabi_dcmpun>
 80069fc:	b140      	cbz	r0, 8006a10 <_printf_float+0xf0>
 80069fe:	464b      	mov	r3, r9
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bfbc      	itt	lt
 8006a04:	232d      	movlt	r3, #45	; 0x2d
 8006a06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a0a:	487f      	ldr	r0, [pc, #508]	; (8006c08 <_printf_float+0x2e8>)
 8006a0c:	4b7f      	ldr	r3, [pc, #508]	; (8006c0c <_printf_float+0x2ec>)
 8006a0e:	e7d1      	b.n	80069b4 <_printf_float+0x94>
 8006a10:	6863      	ldr	r3, [r4, #4]
 8006a12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a16:	9206      	str	r2, [sp, #24]
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	d13f      	bne.n	8006a9c <_printf_float+0x17c>
 8006a1c:	2306      	movs	r3, #6
 8006a1e:	6063      	str	r3, [r4, #4]
 8006a20:	9b05      	ldr	r3, [sp, #20]
 8006a22:	6861      	ldr	r1, [r4, #4]
 8006a24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a28:	2300      	movs	r3, #0
 8006a2a:	9303      	str	r3, [sp, #12]
 8006a2c:	ab0a      	add	r3, sp, #40	; 0x28
 8006a2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a32:	ab09      	add	r3, sp, #36	; 0x24
 8006a34:	ec49 8b10 	vmov	d0, r8, r9
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	6022      	str	r2, [r4, #0]
 8006a3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a40:	4628      	mov	r0, r5
 8006a42:	f7ff fecd 	bl	80067e0 <__cvt>
 8006a46:	9b06      	ldr	r3, [sp, #24]
 8006a48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a4a:	2b47      	cmp	r3, #71	; 0x47
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	d108      	bne.n	8006a62 <_printf_float+0x142>
 8006a50:	1cc8      	adds	r0, r1, #3
 8006a52:	db02      	blt.n	8006a5a <_printf_float+0x13a>
 8006a54:	6863      	ldr	r3, [r4, #4]
 8006a56:	4299      	cmp	r1, r3
 8006a58:	dd41      	ble.n	8006ade <_printf_float+0x1be>
 8006a5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a5e:	fa5f fb8b 	uxtb.w	fp, fp
 8006a62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a66:	d820      	bhi.n	8006aaa <_printf_float+0x18a>
 8006a68:	3901      	subs	r1, #1
 8006a6a:	465a      	mov	r2, fp
 8006a6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a70:	9109      	str	r1, [sp, #36]	; 0x24
 8006a72:	f7ff ff17 	bl	80068a4 <__exponent>
 8006a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a78:	1813      	adds	r3, r2, r0
 8006a7a:	2a01      	cmp	r2, #1
 8006a7c:	4681      	mov	r9, r0
 8006a7e:	6123      	str	r3, [r4, #16]
 8006a80:	dc02      	bgt.n	8006a88 <_printf_float+0x168>
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	07d2      	lsls	r2, r2, #31
 8006a86:	d501      	bpl.n	8006a8c <_printf_float+0x16c>
 8006a88:	3301      	adds	r3, #1
 8006a8a:	6123      	str	r3, [r4, #16]
 8006a8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d09c      	beq.n	80069ce <_printf_float+0xae>
 8006a94:	232d      	movs	r3, #45	; 0x2d
 8006a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a9a:	e798      	b.n	80069ce <_printf_float+0xae>
 8006a9c:	9a06      	ldr	r2, [sp, #24]
 8006a9e:	2a47      	cmp	r2, #71	; 0x47
 8006aa0:	d1be      	bne.n	8006a20 <_printf_float+0x100>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1bc      	bne.n	8006a20 <_printf_float+0x100>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e7b9      	b.n	8006a1e <_printf_float+0xfe>
 8006aaa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006aae:	d118      	bne.n	8006ae2 <_printf_float+0x1c2>
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	6863      	ldr	r3, [r4, #4]
 8006ab4:	dd0b      	ble.n	8006ace <_printf_float+0x1ae>
 8006ab6:	6121      	str	r1, [r4, #16]
 8006ab8:	b913      	cbnz	r3, 8006ac0 <_printf_float+0x1a0>
 8006aba:	6822      	ldr	r2, [r4, #0]
 8006abc:	07d0      	lsls	r0, r2, #31
 8006abe:	d502      	bpl.n	8006ac6 <_printf_float+0x1a6>
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	440b      	add	r3, r1
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ac8:	f04f 0900 	mov.w	r9, #0
 8006acc:	e7de      	b.n	8006a8c <_printf_float+0x16c>
 8006ace:	b913      	cbnz	r3, 8006ad6 <_printf_float+0x1b6>
 8006ad0:	6822      	ldr	r2, [r4, #0]
 8006ad2:	07d2      	lsls	r2, r2, #31
 8006ad4:	d501      	bpl.n	8006ada <_printf_float+0x1ba>
 8006ad6:	3302      	adds	r3, #2
 8006ad8:	e7f4      	b.n	8006ac4 <_printf_float+0x1a4>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e7f2      	b.n	8006ac4 <_printf_float+0x1a4>
 8006ade:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae4:	4299      	cmp	r1, r3
 8006ae6:	db05      	blt.n	8006af4 <_printf_float+0x1d4>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	6121      	str	r1, [r4, #16]
 8006aec:	07d8      	lsls	r0, r3, #31
 8006aee:	d5ea      	bpl.n	8006ac6 <_printf_float+0x1a6>
 8006af0:	1c4b      	adds	r3, r1, #1
 8006af2:	e7e7      	b.n	8006ac4 <_printf_float+0x1a4>
 8006af4:	2900      	cmp	r1, #0
 8006af6:	bfd4      	ite	le
 8006af8:	f1c1 0202 	rsble	r2, r1, #2
 8006afc:	2201      	movgt	r2, #1
 8006afe:	4413      	add	r3, r2
 8006b00:	e7e0      	b.n	8006ac4 <_printf_float+0x1a4>
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	055a      	lsls	r2, r3, #21
 8006b06:	d407      	bmi.n	8006b18 <_printf_float+0x1f8>
 8006b08:	6923      	ldr	r3, [r4, #16]
 8006b0a:	4642      	mov	r2, r8
 8006b0c:	4631      	mov	r1, r6
 8006b0e:	4628      	mov	r0, r5
 8006b10:	47b8      	blx	r7
 8006b12:	3001      	adds	r0, #1
 8006b14:	d12c      	bne.n	8006b70 <_printf_float+0x250>
 8006b16:	e764      	b.n	80069e2 <_printf_float+0xc2>
 8006b18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b1c:	f240 80e0 	bls.w	8006ce0 <_printf_float+0x3c0>
 8006b20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b24:	2200      	movs	r2, #0
 8006b26:	2300      	movs	r3, #0
 8006b28:	f7f9 ffce 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d034      	beq.n	8006b9a <_printf_float+0x27a>
 8006b30:	4a37      	ldr	r2, [pc, #220]	; (8006c10 <_printf_float+0x2f0>)
 8006b32:	2301      	movs	r3, #1
 8006b34:	4631      	mov	r1, r6
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b8      	blx	r7
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f43f af51 	beq.w	80069e2 <_printf_float+0xc2>
 8006b40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b44:	429a      	cmp	r2, r3
 8006b46:	db02      	blt.n	8006b4e <_printf_float+0x22e>
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	07d8      	lsls	r0, r3, #31
 8006b4c:	d510      	bpl.n	8006b70 <_printf_float+0x250>
 8006b4e:	ee18 3a10 	vmov	r3, s16
 8006b52:	4652      	mov	r2, sl
 8006b54:	4631      	mov	r1, r6
 8006b56:	4628      	mov	r0, r5
 8006b58:	47b8      	blx	r7
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	f43f af41 	beq.w	80069e2 <_printf_float+0xc2>
 8006b60:	f04f 0800 	mov.w	r8, #0
 8006b64:	f104 091a 	add.w	r9, r4, #26
 8006b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	4543      	cmp	r3, r8
 8006b6e:	dc09      	bgt.n	8006b84 <_printf_float+0x264>
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	079b      	lsls	r3, r3, #30
 8006b74:	f100 8105 	bmi.w	8006d82 <_printf_float+0x462>
 8006b78:	68e0      	ldr	r0, [r4, #12]
 8006b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b7c:	4298      	cmp	r0, r3
 8006b7e:	bfb8      	it	lt
 8006b80:	4618      	movlt	r0, r3
 8006b82:	e730      	b.n	80069e6 <_printf_float+0xc6>
 8006b84:	2301      	movs	r3, #1
 8006b86:	464a      	mov	r2, r9
 8006b88:	4631      	mov	r1, r6
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	47b8      	blx	r7
 8006b8e:	3001      	adds	r0, #1
 8006b90:	f43f af27 	beq.w	80069e2 <_printf_float+0xc2>
 8006b94:	f108 0801 	add.w	r8, r8, #1
 8006b98:	e7e6      	b.n	8006b68 <_printf_float+0x248>
 8006b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	dc39      	bgt.n	8006c14 <_printf_float+0x2f4>
 8006ba0:	4a1b      	ldr	r2, [pc, #108]	; (8006c10 <_printf_float+0x2f0>)
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	47b8      	blx	r7
 8006baa:	3001      	adds	r0, #1
 8006bac:	f43f af19 	beq.w	80069e2 <_printf_float+0xc2>
 8006bb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	d102      	bne.n	8006bbe <_printf_float+0x29e>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	07d9      	lsls	r1, r3, #31
 8006bbc:	d5d8      	bpl.n	8006b70 <_printf_float+0x250>
 8006bbe:	ee18 3a10 	vmov	r3, s16
 8006bc2:	4652      	mov	r2, sl
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	f43f af09 	beq.w	80069e2 <_printf_float+0xc2>
 8006bd0:	f04f 0900 	mov.w	r9, #0
 8006bd4:	f104 0a1a 	add.w	sl, r4, #26
 8006bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bda:	425b      	negs	r3, r3
 8006bdc:	454b      	cmp	r3, r9
 8006bde:	dc01      	bgt.n	8006be4 <_printf_float+0x2c4>
 8006be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be2:	e792      	b.n	8006b0a <_printf_float+0x1ea>
 8006be4:	2301      	movs	r3, #1
 8006be6:	4652      	mov	r2, sl
 8006be8:	4631      	mov	r1, r6
 8006bea:	4628      	mov	r0, r5
 8006bec:	47b8      	blx	r7
 8006bee:	3001      	adds	r0, #1
 8006bf0:	f43f aef7 	beq.w	80069e2 <_printf_float+0xc2>
 8006bf4:	f109 0901 	add.w	r9, r9, #1
 8006bf8:	e7ee      	b.n	8006bd8 <_printf_float+0x2b8>
 8006bfa:	bf00      	nop
 8006bfc:	7fefffff 	.word	0x7fefffff
 8006c00:	0800b114 	.word	0x0800b114
 8006c04:	0800b118 	.word	0x0800b118
 8006c08:	0800b120 	.word	0x0800b120
 8006c0c:	0800b11c 	.word	0x0800b11c
 8006c10:	0800b124 	.word	0x0800b124
 8006c14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	bfa8      	it	ge
 8006c1c:	461a      	movge	r2, r3
 8006c1e:	2a00      	cmp	r2, #0
 8006c20:	4691      	mov	r9, r2
 8006c22:	dc37      	bgt.n	8006c94 <_printf_float+0x374>
 8006c24:	f04f 0b00 	mov.w	fp, #0
 8006c28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c2c:	f104 021a 	add.w	r2, r4, #26
 8006c30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c32:	9305      	str	r3, [sp, #20]
 8006c34:	eba3 0309 	sub.w	r3, r3, r9
 8006c38:	455b      	cmp	r3, fp
 8006c3a:	dc33      	bgt.n	8006ca4 <_printf_float+0x384>
 8006c3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c40:	429a      	cmp	r2, r3
 8006c42:	db3b      	blt.n	8006cbc <_printf_float+0x39c>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	07da      	lsls	r2, r3, #31
 8006c48:	d438      	bmi.n	8006cbc <_printf_float+0x39c>
 8006c4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c4c:	9b05      	ldr	r3, [sp, #20]
 8006c4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	eba2 0901 	sub.w	r9, r2, r1
 8006c56:	4599      	cmp	r9, r3
 8006c58:	bfa8      	it	ge
 8006c5a:	4699      	movge	r9, r3
 8006c5c:	f1b9 0f00 	cmp.w	r9, #0
 8006c60:	dc35      	bgt.n	8006cce <_printf_float+0x3ae>
 8006c62:	f04f 0800 	mov.w	r8, #0
 8006c66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c6a:	f104 0a1a 	add.w	sl, r4, #26
 8006c6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c72:	1a9b      	subs	r3, r3, r2
 8006c74:	eba3 0309 	sub.w	r3, r3, r9
 8006c78:	4543      	cmp	r3, r8
 8006c7a:	f77f af79 	ble.w	8006b70 <_printf_float+0x250>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	4652      	mov	r2, sl
 8006c82:	4631      	mov	r1, r6
 8006c84:	4628      	mov	r0, r5
 8006c86:	47b8      	blx	r7
 8006c88:	3001      	adds	r0, #1
 8006c8a:	f43f aeaa 	beq.w	80069e2 <_printf_float+0xc2>
 8006c8e:	f108 0801 	add.w	r8, r8, #1
 8006c92:	e7ec      	b.n	8006c6e <_printf_float+0x34e>
 8006c94:	4613      	mov	r3, r2
 8006c96:	4631      	mov	r1, r6
 8006c98:	4642      	mov	r2, r8
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	47b8      	blx	r7
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	d1c0      	bne.n	8006c24 <_printf_float+0x304>
 8006ca2:	e69e      	b.n	80069e2 <_printf_float+0xc2>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	4628      	mov	r0, r5
 8006caa:	9205      	str	r2, [sp, #20]
 8006cac:	47b8      	blx	r7
 8006cae:	3001      	adds	r0, #1
 8006cb0:	f43f ae97 	beq.w	80069e2 <_printf_float+0xc2>
 8006cb4:	9a05      	ldr	r2, [sp, #20]
 8006cb6:	f10b 0b01 	add.w	fp, fp, #1
 8006cba:	e7b9      	b.n	8006c30 <_printf_float+0x310>
 8006cbc:	ee18 3a10 	vmov	r3, s16
 8006cc0:	4652      	mov	r2, sl
 8006cc2:	4631      	mov	r1, r6
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	47b8      	blx	r7
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d1be      	bne.n	8006c4a <_printf_float+0x32a>
 8006ccc:	e689      	b.n	80069e2 <_printf_float+0xc2>
 8006cce:	9a05      	ldr	r2, [sp, #20]
 8006cd0:	464b      	mov	r3, r9
 8006cd2:	4442      	add	r2, r8
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	47b8      	blx	r7
 8006cda:	3001      	adds	r0, #1
 8006cdc:	d1c1      	bne.n	8006c62 <_printf_float+0x342>
 8006cde:	e680      	b.n	80069e2 <_printf_float+0xc2>
 8006ce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ce2:	2a01      	cmp	r2, #1
 8006ce4:	dc01      	bgt.n	8006cea <_printf_float+0x3ca>
 8006ce6:	07db      	lsls	r3, r3, #31
 8006ce8:	d538      	bpl.n	8006d5c <_printf_float+0x43c>
 8006cea:	2301      	movs	r3, #1
 8006cec:	4642      	mov	r2, r8
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	47b8      	blx	r7
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	f43f ae74 	beq.w	80069e2 <_printf_float+0xc2>
 8006cfa:	ee18 3a10 	vmov	r3, s16
 8006cfe:	4652      	mov	r2, sl
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	f43f ae6b 	beq.w	80069e2 <_printf_float+0xc2>
 8006d0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d10:	2200      	movs	r2, #0
 8006d12:	2300      	movs	r3, #0
 8006d14:	f7f9 fed8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d18:	b9d8      	cbnz	r0, 8006d52 <_printf_float+0x432>
 8006d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d1c:	f108 0201 	add.w	r2, r8, #1
 8006d20:	3b01      	subs	r3, #1
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d10e      	bne.n	8006d4a <_printf_float+0x42a>
 8006d2c:	e659      	b.n	80069e2 <_printf_float+0xc2>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	4652      	mov	r2, sl
 8006d32:	4631      	mov	r1, r6
 8006d34:	4628      	mov	r0, r5
 8006d36:	47b8      	blx	r7
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f43f ae52 	beq.w	80069e2 <_printf_float+0xc2>
 8006d3e:	f108 0801 	add.w	r8, r8, #1
 8006d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d44:	3b01      	subs	r3, #1
 8006d46:	4543      	cmp	r3, r8
 8006d48:	dcf1      	bgt.n	8006d2e <_printf_float+0x40e>
 8006d4a:	464b      	mov	r3, r9
 8006d4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d50:	e6dc      	b.n	8006b0c <_printf_float+0x1ec>
 8006d52:	f04f 0800 	mov.w	r8, #0
 8006d56:	f104 0a1a 	add.w	sl, r4, #26
 8006d5a:	e7f2      	b.n	8006d42 <_printf_float+0x422>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	4642      	mov	r2, r8
 8006d60:	e7df      	b.n	8006d22 <_printf_float+0x402>
 8006d62:	2301      	movs	r3, #1
 8006d64:	464a      	mov	r2, r9
 8006d66:	4631      	mov	r1, r6
 8006d68:	4628      	mov	r0, r5
 8006d6a:	47b8      	blx	r7
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	f43f ae38 	beq.w	80069e2 <_printf_float+0xc2>
 8006d72:	f108 0801 	add.w	r8, r8, #1
 8006d76:	68e3      	ldr	r3, [r4, #12]
 8006d78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d7a:	1a5b      	subs	r3, r3, r1
 8006d7c:	4543      	cmp	r3, r8
 8006d7e:	dcf0      	bgt.n	8006d62 <_printf_float+0x442>
 8006d80:	e6fa      	b.n	8006b78 <_printf_float+0x258>
 8006d82:	f04f 0800 	mov.w	r8, #0
 8006d86:	f104 0919 	add.w	r9, r4, #25
 8006d8a:	e7f4      	b.n	8006d76 <_printf_float+0x456>

08006d8c <_printf_common>:
 8006d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d90:	4616      	mov	r6, r2
 8006d92:	4699      	mov	r9, r3
 8006d94:	688a      	ldr	r2, [r1, #8]
 8006d96:	690b      	ldr	r3, [r1, #16]
 8006d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	bfb8      	it	lt
 8006da0:	4613      	movlt	r3, r2
 8006da2:	6033      	str	r3, [r6, #0]
 8006da4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006da8:	4607      	mov	r7, r0
 8006daa:	460c      	mov	r4, r1
 8006dac:	b10a      	cbz	r2, 8006db2 <_printf_common+0x26>
 8006dae:	3301      	adds	r3, #1
 8006db0:	6033      	str	r3, [r6, #0]
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	0699      	lsls	r1, r3, #26
 8006db6:	bf42      	ittt	mi
 8006db8:	6833      	ldrmi	r3, [r6, #0]
 8006dba:	3302      	addmi	r3, #2
 8006dbc:	6033      	strmi	r3, [r6, #0]
 8006dbe:	6825      	ldr	r5, [r4, #0]
 8006dc0:	f015 0506 	ands.w	r5, r5, #6
 8006dc4:	d106      	bne.n	8006dd4 <_printf_common+0x48>
 8006dc6:	f104 0a19 	add.w	sl, r4, #25
 8006dca:	68e3      	ldr	r3, [r4, #12]
 8006dcc:	6832      	ldr	r2, [r6, #0]
 8006dce:	1a9b      	subs	r3, r3, r2
 8006dd0:	42ab      	cmp	r3, r5
 8006dd2:	dc26      	bgt.n	8006e22 <_printf_common+0x96>
 8006dd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006dd8:	1e13      	subs	r3, r2, #0
 8006dda:	6822      	ldr	r2, [r4, #0]
 8006ddc:	bf18      	it	ne
 8006dde:	2301      	movne	r3, #1
 8006de0:	0692      	lsls	r2, r2, #26
 8006de2:	d42b      	bmi.n	8006e3c <_printf_common+0xb0>
 8006de4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006de8:	4649      	mov	r1, r9
 8006dea:	4638      	mov	r0, r7
 8006dec:	47c0      	blx	r8
 8006dee:	3001      	adds	r0, #1
 8006df0:	d01e      	beq.n	8006e30 <_printf_common+0xa4>
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	68e5      	ldr	r5, [r4, #12]
 8006df6:	6832      	ldr	r2, [r6, #0]
 8006df8:	f003 0306 	and.w	r3, r3, #6
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	bf08      	it	eq
 8006e00:	1aad      	subeq	r5, r5, r2
 8006e02:	68a3      	ldr	r3, [r4, #8]
 8006e04:	6922      	ldr	r2, [r4, #16]
 8006e06:	bf0c      	ite	eq
 8006e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e0c:	2500      	movne	r5, #0
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	bfc4      	itt	gt
 8006e12:	1a9b      	subgt	r3, r3, r2
 8006e14:	18ed      	addgt	r5, r5, r3
 8006e16:	2600      	movs	r6, #0
 8006e18:	341a      	adds	r4, #26
 8006e1a:	42b5      	cmp	r5, r6
 8006e1c:	d11a      	bne.n	8006e54 <_printf_common+0xc8>
 8006e1e:	2000      	movs	r0, #0
 8006e20:	e008      	b.n	8006e34 <_printf_common+0xa8>
 8006e22:	2301      	movs	r3, #1
 8006e24:	4652      	mov	r2, sl
 8006e26:	4649      	mov	r1, r9
 8006e28:	4638      	mov	r0, r7
 8006e2a:	47c0      	blx	r8
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d103      	bne.n	8006e38 <_printf_common+0xac>
 8006e30:	f04f 30ff 	mov.w	r0, #4294967295
 8006e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e38:	3501      	adds	r5, #1
 8006e3a:	e7c6      	b.n	8006dca <_printf_common+0x3e>
 8006e3c:	18e1      	adds	r1, r4, r3
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	2030      	movs	r0, #48	; 0x30
 8006e42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e46:	4422      	add	r2, r4
 8006e48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e50:	3302      	adds	r3, #2
 8006e52:	e7c7      	b.n	8006de4 <_printf_common+0x58>
 8006e54:	2301      	movs	r3, #1
 8006e56:	4622      	mov	r2, r4
 8006e58:	4649      	mov	r1, r9
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	47c0      	blx	r8
 8006e5e:	3001      	adds	r0, #1
 8006e60:	d0e6      	beq.n	8006e30 <_printf_common+0xa4>
 8006e62:	3601      	adds	r6, #1
 8006e64:	e7d9      	b.n	8006e1a <_printf_common+0x8e>
	...

08006e68 <_printf_i>:
 8006e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	4691      	mov	r9, r2
 8006e70:	7e27      	ldrb	r7, [r4, #24]
 8006e72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e74:	2f78      	cmp	r7, #120	; 0x78
 8006e76:	4680      	mov	r8, r0
 8006e78:	469a      	mov	sl, r3
 8006e7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e7e:	d807      	bhi.n	8006e90 <_printf_i+0x28>
 8006e80:	2f62      	cmp	r7, #98	; 0x62
 8006e82:	d80a      	bhi.n	8006e9a <_printf_i+0x32>
 8006e84:	2f00      	cmp	r7, #0
 8006e86:	f000 80d8 	beq.w	800703a <_printf_i+0x1d2>
 8006e8a:	2f58      	cmp	r7, #88	; 0x58
 8006e8c:	f000 80a3 	beq.w	8006fd6 <_printf_i+0x16e>
 8006e90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e98:	e03a      	b.n	8006f10 <_printf_i+0xa8>
 8006e9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e9e:	2b15      	cmp	r3, #21
 8006ea0:	d8f6      	bhi.n	8006e90 <_printf_i+0x28>
 8006ea2:	a001      	add	r0, pc, #4	; (adr r0, 8006ea8 <_printf_i+0x40>)
 8006ea4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ea8:	08006f01 	.word	0x08006f01
 8006eac:	08006f15 	.word	0x08006f15
 8006eb0:	08006e91 	.word	0x08006e91
 8006eb4:	08006e91 	.word	0x08006e91
 8006eb8:	08006e91 	.word	0x08006e91
 8006ebc:	08006e91 	.word	0x08006e91
 8006ec0:	08006f15 	.word	0x08006f15
 8006ec4:	08006e91 	.word	0x08006e91
 8006ec8:	08006e91 	.word	0x08006e91
 8006ecc:	08006e91 	.word	0x08006e91
 8006ed0:	08006e91 	.word	0x08006e91
 8006ed4:	08007021 	.word	0x08007021
 8006ed8:	08006f45 	.word	0x08006f45
 8006edc:	08007003 	.word	0x08007003
 8006ee0:	08006e91 	.word	0x08006e91
 8006ee4:	08006e91 	.word	0x08006e91
 8006ee8:	08007043 	.word	0x08007043
 8006eec:	08006e91 	.word	0x08006e91
 8006ef0:	08006f45 	.word	0x08006f45
 8006ef4:	08006e91 	.word	0x08006e91
 8006ef8:	08006e91 	.word	0x08006e91
 8006efc:	0800700b 	.word	0x0800700b
 8006f00:	680b      	ldr	r3, [r1, #0]
 8006f02:	1d1a      	adds	r2, r3, #4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	600a      	str	r2, [r1, #0]
 8006f08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f10:	2301      	movs	r3, #1
 8006f12:	e0a3      	b.n	800705c <_printf_i+0x1f4>
 8006f14:	6825      	ldr	r5, [r4, #0]
 8006f16:	6808      	ldr	r0, [r1, #0]
 8006f18:	062e      	lsls	r6, r5, #24
 8006f1a:	f100 0304 	add.w	r3, r0, #4
 8006f1e:	d50a      	bpl.n	8006f36 <_printf_i+0xce>
 8006f20:	6805      	ldr	r5, [r0, #0]
 8006f22:	600b      	str	r3, [r1, #0]
 8006f24:	2d00      	cmp	r5, #0
 8006f26:	da03      	bge.n	8006f30 <_printf_i+0xc8>
 8006f28:	232d      	movs	r3, #45	; 0x2d
 8006f2a:	426d      	negs	r5, r5
 8006f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f30:	485e      	ldr	r0, [pc, #376]	; (80070ac <_printf_i+0x244>)
 8006f32:	230a      	movs	r3, #10
 8006f34:	e019      	b.n	8006f6a <_printf_i+0x102>
 8006f36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f3a:	6805      	ldr	r5, [r0, #0]
 8006f3c:	600b      	str	r3, [r1, #0]
 8006f3e:	bf18      	it	ne
 8006f40:	b22d      	sxthne	r5, r5
 8006f42:	e7ef      	b.n	8006f24 <_printf_i+0xbc>
 8006f44:	680b      	ldr	r3, [r1, #0]
 8006f46:	6825      	ldr	r5, [r4, #0]
 8006f48:	1d18      	adds	r0, r3, #4
 8006f4a:	6008      	str	r0, [r1, #0]
 8006f4c:	0628      	lsls	r0, r5, #24
 8006f4e:	d501      	bpl.n	8006f54 <_printf_i+0xec>
 8006f50:	681d      	ldr	r5, [r3, #0]
 8006f52:	e002      	b.n	8006f5a <_printf_i+0xf2>
 8006f54:	0669      	lsls	r1, r5, #25
 8006f56:	d5fb      	bpl.n	8006f50 <_printf_i+0xe8>
 8006f58:	881d      	ldrh	r5, [r3, #0]
 8006f5a:	4854      	ldr	r0, [pc, #336]	; (80070ac <_printf_i+0x244>)
 8006f5c:	2f6f      	cmp	r7, #111	; 0x6f
 8006f5e:	bf0c      	ite	eq
 8006f60:	2308      	moveq	r3, #8
 8006f62:	230a      	movne	r3, #10
 8006f64:	2100      	movs	r1, #0
 8006f66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f6a:	6866      	ldr	r6, [r4, #4]
 8006f6c:	60a6      	str	r6, [r4, #8]
 8006f6e:	2e00      	cmp	r6, #0
 8006f70:	bfa2      	ittt	ge
 8006f72:	6821      	ldrge	r1, [r4, #0]
 8006f74:	f021 0104 	bicge.w	r1, r1, #4
 8006f78:	6021      	strge	r1, [r4, #0]
 8006f7a:	b90d      	cbnz	r5, 8006f80 <_printf_i+0x118>
 8006f7c:	2e00      	cmp	r6, #0
 8006f7e:	d04d      	beq.n	800701c <_printf_i+0x1b4>
 8006f80:	4616      	mov	r6, r2
 8006f82:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f86:	fb03 5711 	mls	r7, r3, r1, r5
 8006f8a:	5dc7      	ldrb	r7, [r0, r7]
 8006f8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f90:	462f      	mov	r7, r5
 8006f92:	42bb      	cmp	r3, r7
 8006f94:	460d      	mov	r5, r1
 8006f96:	d9f4      	bls.n	8006f82 <_printf_i+0x11a>
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d10b      	bne.n	8006fb4 <_printf_i+0x14c>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	07df      	lsls	r7, r3, #31
 8006fa0:	d508      	bpl.n	8006fb4 <_printf_i+0x14c>
 8006fa2:	6923      	ldr	r3, [r4, #16]
 8006fa4:	6861      	ldr	r1, [r4, #4]
 8006fa6:	4299      	cmp	r1, r3
 8006fa8:	bfde      	ittt	le
 8006faa:	2330      	movle	r3, #48	; 0x30
 8006fac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fb4:	1b92      	subs	r2, r2, r6
 8006fb6:	6122      	str	r2, [r4, #16]
 8006fb8:	f8cd a000 	str.w	sl, [sp]
 8006fbc:	464b      	mov	r3, r9
 8006fbe:	aa03      	add	r2, sp, #12
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	f7ff fee2 	bl	8006d8c <_printf_common>
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d14c      	bne.n	8007066 <_printf_i+0x1fe>
 8006fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd0:	b004      	add	sp, #16
 8006fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd6:	4835      	ldr	r0, [pc, #212]	; (80070ac <_printf_i+0x244>)
 8006fd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	680e      	ldr	r6, [r1, #0]
 8006fe0:	061f      	lsls	r7, r3, #24
 8006fe2:	f856 5b04 	ldr.w	r5, [r6], #4
 8006fe6:	600e      	str	r6, [r1, #0]
 8006fe8:	d514      	bpl.n	8007014 <_printf_i+0x1ac>
 8006fea:	07d9      	lsls	r1, r3, #31
 8006fec:	bf44      	itt	mi
 8006fee:	f043 0320 	orrmi.w	r3, r3, #32
 8006ff2:	6023      	strmi	r3, [r4, #0]
 8006ff4:	b91d      	cbnz	r5, 8006ffe <_printf_i+0x196>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	f023 0320 	bic.w	r3, r3, #32
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	2310      	movs	r3, #16
 8007000:	e7b0      	b.n	8006f64 <_printf_i+0xfc>
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	f043 0320 	orr.w	r3, r3, #32
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	2378      	movs	r3, #120	; 0x78
 800700c:	4828      	ldr	r0, [pc, #160]	; (80070b0 <_printf_i+0x248>)
 800700e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007012:	e7e3      	b.n	8006fdc <_printf_i+0x174>
 8007014:	065e      	lsls	r6, r3, #25
 8007016:	bf48      	it	mi
 8007018:	b2ad      	uxthmi	r5, r5
 800701a:	e7e6      	b.n	8006fea <_printf_i+0x182>
 800701c:	4616      	mov	r6, r2
 800701e:	e7bb      	b.n	8006f98 <_printf_i+0x130>
 8007020:	680b      	ldr	r3, [r1, #0]
 8007022:	6826      	ldr	r6, [r4, #0]
 8007024:	6960      	ldr	r0, [r4, #20]
 8007026:	1d1d      	adds	r5, r3, #4
 8007028:	600d      	str	r5, [r1, #0]
 800702a:	0635      	lsls	r5, r6, #24
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	d501      	bpl.n	8007034 <_printf_i+0x1cc>
 8007030:	6018      	str	r0, [r3, #0]
 8007032:	e002      	b.n	800703a <_printf_i+0x1d2>
 8007034:	0671      	lsls	r1, r6, #25
 8007036:	d5fb      	bpl.n	8007030 <_printf_i+0x1c8>
 8007038:	8018      	strh	r0, [r3, #0]
 800703a:	2300      	movs	r3, #0
 800703c:	6123      	str	r3, [r4, #16]
 800703e:	4616      	mov	r6, r2
 8007040:	e7ba      	b.n	8006fb8 <_printf_i+0x150>
 8007042:	680b      	ldr	r3, [r1, #0]
 8007044:	1d1a      	adds	r2, r3, #4
 8007046:	600a      	str	r2, [r1, #0]
 8007048:	681e      	ldr	r6, [r3, #0]
 800704a:	6862      	ldr	r2, [r4, #4]
 800704c:	2100      	movs	r1, #0
 800704e:	4630      	mov	r0, r6
 8007050:	f7f9 f8c6 	bl	80001e0 <memchr>
 8007054:	b108      	cbz	r0, 800705a <_printf_i+0x1f2>
 8007056:	1b80      	subs	r0, r0, r6
 8007058:	6060      	str	r0, [r4, #4]
 800705a:	6863      	ldr	r3, [r4, #4]
 800705c:	6123      	str	r3, [r4, #16]
 800705e:	2300      	movs	r3, #0
 8007060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007064:	e7a8      	b.n	8006fb8 <_printf_i+0x150>
 8007066:	6923      	ldr	r3, [r4, #16]
 8007068:	4632      	mov	r2, r6
 800706a:	4649      	mov	r1, r9
 800706c:	4640      	mov	r0, r8
 800706e:	47d0      	blx	sl
 8007070:	3001      	adds	r0, #1
 8007072:	d0ab      	beq.n	8006fcc <_printf_i+0x164>
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	079b      	lsls	r3, r3, #30
 8007078:	d413      	bmi.n	80070a2 <_printf_i+0x23a>
 800707a:	68e0      	ldr	r0, [r4, #12]
 800707c:	9b03      	ldr	r3, [sp, #12]
 800707e:	4298      	cmp	r0, r3
 8007080:	bfb8      	it	lt
 8007082:	4618      	movlt	r0, r3
 8007084:	e7a4      	b.n	8006fd0 <_printf_i+0x168>
 8007086:	2301      	movs	r3, #1
 8007088:	4632      	mov	r2, r6
 800708a:	4649      	mov	r1, r9
 800708c:	4640      	mov	r0, r8
 800708e:	47d0      	blx	sl
 8007090:	3001      	adds	r0, #1
 8007092:	d09b      	beq.n	8006fcc <_printf_i+0x164>
 8007094:	3501      	adds	r5, #1
 8007096:	68e3      	ldr	r3, [r4, #12]
 8007098:	9903      	ldr	r1, [sp, #12]
 800709a:	1a5b      	subs	r3, r3, r1
 800709c:	42ab      	cmp	r3, r5
 800709e:	dcf2      	bgt.n	8007086 <_printf_i+0x21e>
 80070a0:	e7eb      	b.n	800707a <_printf_i+0x212>
 80070a2:	2500      	movs	r5, #0
 80070a4:	f104 0619 	add.w	r6, r4, #25
 80070a8:	e7f5      	b.n	8007096 <_printf_i+0x22e>
 80070aa:	bf00      	nop
 80070ac:	0800b126 	.word	0x0800b126
 80070b0:	0800b137 	.word	0x0800b137

080070b4 <siprintf>:
 80070b4:	b40e      	push	{r1, r2, r3}
 80070b6:	b500      	push	{lr}
 80070b8:	b09c      	sub	sp, #112	; 0x70
 80070ba:	ab1d      	add	r3, sp, #116	; 0x74
 80070bc:	9002      	str	r0, [sp, #8]
 80070be:	9006      	str	r0, [sp, #24]
 80070c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070c4:	4809      	ldr	r0, [pc, #36]	; (80070ec <siprintf+0x38>)
 80070c6:	9107      	str	r1, [sp, #28]
 80070c8:	9104      	str	r1, [sp, #16]
 80070ca:	4909      	ldr	r1, [pc, #36]	; (80070f0 <siprintf+0x3c>)
 80070cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80070d0:	9105      	str	r1, [sp, #20]
 80070d2:	6800      	ldr	r0, [r0, #0]
 80070d4:	9301      	str	r3, [sp, #4]
 80070d6:	a902      	add	r1, sp, #8
 80070d8:	f001 fb26 	bl	8008728 <_svfiprintf_r>
 80070dc:	9b02      	ldr	r3, [sp, #8]
 80070de:	2200      	movs	r2, #0
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	b01c      	add	sp, #112	; 0x70
 80070e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070e8:	b003      	add	sp, #12
 80070ea:	4770      	bx	lr
 80070ec:	2000001c 	.word	0x2000001c
 80070f0:	ffff0208 	.word	0xffff0208

080070f4 <quorem>:
 80070f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f8:	6903      	ldr	r3, [r0, #16]
 80070fa:	690c      	ldr	r4, [r1, #16]
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	4607      	mov	r7, r0
 8007100:	f2c0 8081 	blt.w	8007206 <quorem+0x112>
 8007104:	3c01      	subs	r4, #1
 8007106:	f101 0814 	add.w	r8, r1, #20
 800710a:	f100 0514 	add.w	r5, r0, #20
 800710e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007112:	9301      	str	r3, [sp, #4]
 8007114:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007118:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800711c:	3301      	adds	r3, #1
 800711e:	429a      	cmp	r2, r3
 8007120:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007124:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007128:	fbb2 f6f3 	udiv	r6, r2, r3
 800712c:	d331      	bcc.n	8007192 <quorem+0x9e>
 800712e:	f04f 0e00 	mov.w	lr, #0
 8007132:	4640      	mov	r0, r8
 8007134:	46ac      	mov	ip, r5
 8007136:	46f2      	mov	sl, lr
 8007138:	f850 2b04 	ldr.w	r2, [r0], #4
 800713c:	b293      	uxth	r3, r2
 800713e:	fb06 e303 	mla	r3, r6, r3, lr
 8007142:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007146:	b29b      	uxth	r3, r3
 8007148:	ebaa 0303 	sub.w	r3, sl, r3
 800714c:	0c12      	lsrs	r2, r2, #16
 800714e:	f8dc a000 	ldr.w	sl, [ip]
 8007152:	fb06 e202 	mla	r2, r6, r2, lr
 8007156:	fa13 f38a 	uxtah	r3, r3, sl
 800715a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800715e:	fa1f fa82 	uxth.w	sl, r2
 8007162:	f8dc 2000 	ldr.w	r2, [ip]
 8007166:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800716a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800716e:	b29b      	uxth	r3, r3
 8007170:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007174:	4581      	cmp	r9, r0
 8007176:	f84c 3b04 	str.w	r3, [ip], #4
 800717a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800717e:	d2db      	bcs.n	8007138 <quorem+0x44>
 8007180:	f855 300b 	ldr.w	r3, [r5, fp]
 8007184:	b92b      	cbnz	r3, 8007192 <quorem+0x9e>
 8007186:	9b01      	ldr	r3, [sp, #4]
 8007188:	3b04      	subs	r3, #4
 800718a:	429d      	cmp	r5, r3
 800718c:	461a      	mov	r2, r3
 800718e:	d32e      	bcc.n	80071ee <quorem+0xfa>
 8007190:	613c      	str	r4, [r7, #16]
 8007192:	4638      	mov	r0, r7
 8007194:	f001 f8b2 	bl	80082fc <__mcmp>
 8007198:	2800      	cmp	r0, #0
 800719a:	db24      	blt.n	80071e6 <quorem+0xf2>
 800719c:	3601      	adds	r6, #1
 800719e:	4628      	mov	r0, r5
 80071a0:	f04f 0c00 	mov.w	ip, #0
 80071a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80071a8:	f8d0 e000 	ldr.w	lr, [r0]
 80071ac:	b293      	uxth	r3, r2
 80071ae:	ebac 0303 	sub.w	r3, ip, r3
 80071b2:	0c12      	lsrs	r2, r2, #16
 80071b4:	fa13 f38e 	uxtah	r3, r3, lr
 80071b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071c6:	45c1      	cmp	r9, r8
 80071c8:	f840 3b04 	str.w	r3, [r0], #4
 80071cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071d0:	d2e8      	bcs.n	80071a4 <quorem+0xb0>
 80071d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071da:	b922      	cbnz	r2, 80071e6 <quorem+0xf2>
 80071dc:	3b04      	subs	r3, #4
 80071de:	429d      	cmp	r5, r3
 80071e0:	461a      	mov	r2, r3
 80071e2:	d30a      	bcc.n	80071fa <quorem+0x106>
 80071e4:	613c      	str	r4, [r7, #16]
 80071e6:	4630      	mov	r0, r6
 80071e8:	b003      	add	sp, #12
 80071ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ee:	6812      	ldr	r2, [r2, #0]
 80071f0:	3b04      	subs	r3, #4
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	d1cc      	bne.n	8007190 <quorem+0x9c>
 80071f6:	3c01      	subs	r4, #1
 80071f8:	e7c7      	b.n	800718a <quorem+0x96>
 80071fa:	6812      	ldr	r2, [r2, #0]
 80071fc:	3b04      	subs	r3, #4
 80071fe:	2a00      	cmp	r2, #0
 8007200:	d1f0      	bne.n	80071e4 <quorem+0xf0>
 8007202:	3c01      	subs	r4, #1
 8007204:	e7eb      	b.n	80071de <quorem+0xea>
 8007206:	2000      	movs	r0, #0
 8007208:	e7ee      	b.n	80071e8 <quorem+0xf4>
 800720a:	0000      	movs	r0, r0
 800720c:	0000      	movs	r0, r0
	...

08007210 <_dtoa_r>:
 8007210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	ed2d 8b02 	vpush	{d8}
 8007218:	ec57 6b10 	vmov	r6, r7, d0
 800721c:	b095      	sub	sp, #84	; 0x54
 800721e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007220:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007224:	9105      	str	r1, [sp, #20]
 8007226:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800722a:	4604      	mov	r4, r0
 800722c:	9209      	str	r2, [sp, #36]	; 0x24
 800722e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007230:	b975      	cbnz	r5, 8007250 <_dtoa_r+0x40>
 8007232:	2010      	movs	r0, #16
 8007234:	f000 fddc 	bl	8007df0 <malloc>
 8007238:	4602      	mov	r2, r0
 800723a:	6260      	str	r0, [r4, #36]	; 0x24
 800723c:	b920      	cbnz	r0, 8007248 <_dtoa_r+0x38>
 800723e:	4bb2      	ldr	r3, [pc, #712]	; (8007508 <_dtoa_r+0x2f8>)
 8007240:	21ea      	movs	r1, #234	; 0xea
 8007242:	48b2      	ldr	r0, [pc, #712]	; (800750c <_dtoa_r+0x2fc>)
 8007244:	f001 fb80 	bl	8008948 <__assert_func>
 8007248:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800724c:	6005      	str	r5, [r0, #0]
 800724e:	60c5      	str	r5, [r0, #12]
 8007250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007252:	6819      	ldr	r1, [r3, #0]
 8007254:	b151      	cbz	r1, 800726c <_dtoa_r+0x5c>
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	604a      	str	r2, [r1, #4]
 800725a:	2301      	movs	r3, #1
 800725c:	4093      	lsls	r3, r2
 800725e:	608b      	str	r3, [r1, #8]
 8007260:	4620      	mov	r0, r4
 8007262:	f000 fe0d 	bl	8007e80 <_Bfree>
 8007266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	1e3b      	subs	r3, r7, #0
 800726e:	bfb9      	ittee	lt
 8007270:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007274:	9303      	strlt	r3, [sp, #12]
 8007276:	2300      	movge	r3, #0
 8007278:	f8c8 3000 	strge.w	r3, [r8]
 800727c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007280:	4ba3      	ldr	r3, [pc, #652]	; (8007510 <_dtoa_r+0x300>)
 8007282:	bfbc      	itt	lt
 8007284:	2201      	movlt	r2, #1
 8007286:	f8c8 2000 	strlt.w	r2, [r8]
 800728a:	ea33 0309 	bics.w	r3, r3, r9
 800728e:	d11b      	bne.n	80072c8 <_dtoa_r+0xb8>
 8007290:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007292:	f242 730f 	movw	r3, #9999	; 0x270f
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800729c:	4333      	orrs	r3, r6
 800729e:	f000 857a 	beq.w	8007d96 <_dtoa_r+0xb86>
 80072a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072a4:	b963      	cbnz	r3, 80072c0 <_dtoa_r+0xb0>
 80072a6:	4b9b      	ldr	r3, [pc, #620]	; (8007514 <_dtoa_r+0x304>)
 80072a8:	e024      	b.n	80072f4 <_dtoa_r+0xe4>
 80072aa:	4b9b      	ldr	r3, [pc, #620]	; (8007518 <_dtoa_r+0x308>)
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	9800      	ldr	r0, [sp, #0]
 80072b6:	b015      	add	sp, #84	; 0x54
 80072b8:	ecbd 8b02 	vpop	{d8}
 80072bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c0:	4b94      	ldr	r3, [pc, #592]	; (8007514 <_dtoa_r+0x304>)
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	3303      	adds	r3, #3
 80072c6:	e7f3      	b.n	80072b0 <_dtoa_r+0xa0>
 80072c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072cc:	2200      	movs	r2, #0
 80072ce:	ec51 0b17 	vmov	r0, r1, d7
 80072d2:	2300      	movs	r3, #0
 80072d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80072d8:	f7f9 fbf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80072dc:	4680      	mov	r8, r0
 80072de:	b158      	cbz	r0, 80072f8 <_dtoa_r+0xe8>
 80072e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072e2:	2301      	movs	r3, #1
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8551 	beq.w	8007d90 <_dtoa_r+0xb80>
 80072ee:	488b      	ldr	r0, [pc, #556]	; (800751c <_dtoa_r+0x30c>)
 80072f0:	6018      	str	r0, [r3, #0]
 80072f2:	1e43      	subs	r3, r0, #1
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	e7dd      	b.n	80072b4 <_dtoa_r+0xa4>
 80072f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80072fc:	aa12      	add	r2, sp, #72	; 0x48
 80072fe:	a913      	add	r1, sp, #76	; 0x4c
 8007300:	4620      	mov	r0, r4
 8007302:	f001 f89f 	bl	8008444 <__d2b>
 8007306:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800730a:	4683      	mov	fp, r0
 800730c:	2d00      	cmp	r5, #0
 800730e:	d07c      	beq.n	800740a <_dtoa_r+0x1fa>
 8007310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007312:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007316:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800731a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800731e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007322:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800732a:	4b7d      	ldr	r3, [pc, #500]	; (8007520 <_dtoa_r+0x310>)
 800732c:	2200      	movs	r2, #0
 800732e:	4630      	mov	r0, r6
 8007330:	4639      	mov	r1, r7
 8007332:	f7f8 ffa9 	bl	8000288 <__aeabi_dsub>
 8007336:	a36e      	add	r3, pc, #440	; (adr r3, 80074f0 <_dtoa_r+0x2e0>)
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	f7f9 f95c 	bl	80005f8 <__aeabi_dmul>
 8007340:	a36d      	add	r3, pc, #436	; (adr r3, 80074f8 <_dtoa_r+0x2e8>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f7f8 ffa1 	bl	800028c <__adddf3>
 800734a:	4606      	mov	r6, r0
 800734c:	4628      	mov	r0, r5
 800734e:	460f      	mov	r7, r1
 8007350:	f7f9 f8e8 	bl	8000524 <__aeabi_i2d>
 8007354:	a36a      	add	r3, pc, #424	; (adr r3, 8007500 <_dtoa_r+0x2f0>)
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	f7f9 f94d 	bl	80005f8 <__aeabi_dmul>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	4630      	mov	r0, r6
 8007364:	4639      	mov	r1, r7
 8007366:	f7f8 ff91 	bl	800028c <__adddf3>
 800736a:	4606      	mov	r6, r0
 800736c:	460f      	mov	r7, r1
 800736e:	f7f9 fbf3 	bl	8000b58 <__aeabi_d2iz>
 8007372:	2200      	movs	r2, #0
 8007374:	4682      	mov	sl, r0
 8007376:	2300      	movs	r3, #0
 8007378:	4630      	mov	r0, r6
 800737a:	4639      	mov	r1, r7
 800737c:	f7f9 fbae 	bl	8000adc <__aeabi_dcmplt>
 8007380:	b148      	cbz	r0, 8007396 <_dtoa_r+0x186>
 8007382:	4650      	mov	r0, sl
 8007384:	f7f9 f8ce 	bl	8000524 <__aeabi_i2d>
 8007388:	4632      	mov	r2, r6
 800738a:	463b      	mov	r3, r7
 800738c:	f7f9 fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007390:	b908      	cbnz	r0, 8007396 <_dtoa_r+0x186>
 8007392:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007396:	f1ba 0f16 	cmp.w	sl, #22
 800739a:	d854      	bhi.n	8007446 <_dtoa_r+0x236>
 800739c:	4b61      	ldr	r3, [pc, #388]	; (8007524 <_dtoa_r+0x314>)
 800739e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073aa:	f7f9 fb97 	bl	8000adc <__aeabi_dcmplt>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d04b      	beq.n	800744a <_dtoa_r+0x23a>
 80073b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073b6:	2300      	movs	r3, #0
 80073b8:	930e      	str	r3, [sp, #56]	; 0x38
 80073ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073bc:	1b5d      	subs	r5, r3, r5
 80073be:	1e6b      	subs	r3, r5, #1
 80073c0:	9304      	str	r3, [sp, #16]
 80073c2:	bf43      	ittte	mi
 80073c4:	2300      	movmi	r3, #0
 80073c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80073ca:	9304      	strmi	r3, [sp, #16]
 80073cc:	f04f 0800 	movpl.w	r8, #0
 80073d0:	f1ba 0f00 	cmp.w	sl, #0
 80073d4:	db3b      	blt.n	800744e <_dtoa_r+0x23e>
 80073d6:	9b04      	ldr	r3, [sp, #16]
 80073d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80073dc:	4453      	add	r3, sl
 80073de:	9304      	str	r3, [sp, #16]
 80073e0:	2300      	movs	r3, #0
 80073e2:	9306      	str	r3, [sp, #24]
 80073e4:	9b05      	ldr	r3, [sp, #20]
 80073e6:	2b09      	cmp	r3, #9
 80073e8:	d869      	bhi.n	80074be <_dtoa_r+0x2ae>
 80073ea:	2b05      	cmp	r3, #5
 80073ec:	bfc4      	itt	gt
 80073ee:	3b04      	subgt	r3, #4
 80073f0:	9305      	strgt	r3, [sp, #20]
 80073f2:	9b05      	ldr	r3, [sp, #20]
 80073f4:	f1a3 0302 	sub.w	r3, r3, #2
 80073f8:	bfcc      	ite	gt
 80073fa:	2500      	movgt	r5, #0
 80073fc:	2501      	movle	r5, #1
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d869      	bhi.n	80074d6 <_dtoa_r+0x2c6>
 8007402:	e8df f003 	tbb	[pc, r3]
 8007406:	4e2c      	.short	0x4e2c
 8007408:	5a4c      	.short	0x5a4c
 800740a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800740e:	441d      	add	r5, r3
 8007410:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007414:	2b20      	cmp	r3, #32
 8007416:	bfc1      	itttt	gt
 8007418:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800741c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007420:	fa09 f303 	lslgt.w	r3, r9, r3
 8007424:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007428:	bfda      	itte	le
 800742a:	f1c3 0320 	rsble	r3, r3, #32
 800742e:	fa06 f003 	lslle.w	r0, r6, r3
 8007432:	4318      	orrgt	r0, r3
 8007434:	f7f9 f866 	bl	8000504 <__aeabi_ui2d>
 8007438:	2301      	movs	r3, #1
 800743a:	4606      	mov	r6, r0
 800743c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007440:	3d01      	subs	r5, #1
 8007442:	9310      	str	r3, [sp, #64]	; 0x40
 8007444:	e771      	b.n	800732a <_dtoa_r+0x11a>
 8007446:	2301      	movs	r3, #1
 8007448:	e7b6      	b.n	80073b8 <_dtoa_r+0x1a8>
 800744a:	900e      	str	r0, [sp, #56]	; 0x38
 800744c:	e7b5      	b.n	80073ba <_dtoa_r+0x1aa>
 800744e:	f1ca 0300 	rsb	r3, sl, #0
 8007452:	9306      	str	r3, [sp, #24]
 8007454:	2300      	movs	r3, #0
 8007456:	eba8 080a 	sub.w	r8, r8, sl
 800745a:	930d      	str	r3, [sp, #52]	; 0x34
 800745c:	e7c2      	b.n	80073e4 <_dtoa_r+0x1d4>
 800745e:	2300      	movs	r3, #0
 8007460:	9308      	str	r3, [sp, #32]
 8007462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	dc39      	bgt.n	80074dc <_dtoa_r+0x2cc>
 8007468:	f04f 0901 	mov.w	r9, #1
 800746c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007470:	464b      	mov	r3, r9
 8007472:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007476:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007478:	2200      	movs	r2, #0
 800747a:	6042      	str	r2, [r0, #4]
 800747c:	2204      	movs	r2, #4
 800747e:	f102 0614 	add.w	r6, r2, #20
 8007482:	429e      	cmp	r6, r3
 8007484:	6841      	ldr	r1, [r0, #4]
 8007486:	d92f      	bls.n	80074e8 <_dtoa_r+0x2d8>
 8007488:	4620      	mov	r0, r4
 800748a:	f000 fcb9 	bl	8007e00 <_Balloc>
 800748e:	9000      	str	r0, [sp, #0]
 8007490:	2800      	cmp	r0, #0
 8007492:	d14b      	bne.n	800752c <_dtoa_r+0x31c>
 8007494:	4b24      	ldr	r3, [pc, #144]	; (8007528 <_dtoa_r+0x318>)
 8007496:	4602      	mov	r2, r0
 8007498:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800749c:	e6d1      	b.n	8007242 <_dtoa_r+0x32>
 800749e:	2301      	movs	r3, #1
 80074a0:	e7de      	b.n	8007460 <_dtoa_r+0x250>
 80074a2:	2300      	movs	r3, #0
 80074a4:	9308      	str	r3, [sp, #32]
 80074a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a8:	eb0a 0903 	add.w	r9, sl, r3
 80074ac:	f109 0301 	add.w	r3, r9, #1
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	9301      	str	r3, [sp, #4]
 80074b4:	bfb8      	it	lt
 80074b6:	2301      	movlt	r3, #1
 80074b8:	e7dd      	b.n	8007476 <_dtoa_r+0x266>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e7f2      	b.n	80074a4 <_dtoa_r+0x294>
 80074be:	2501      	movs	r5, #1
 80074c0:	2300      	movs	r3, #0
 80074c2:	9305      	str	r3, [sp, #20]
 80074c4:	9508      	str	r5, [sp, #32]
 80074c6:	f04f 39ff 	mov.w	r9, #4294967295
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80074d0:	2312      	movs	r3, #18
 80074d2:	9209      	str	r2, [sp, #36]	; 0x24
 80074d4:	e7cf      	b.n	8007476 <_dtoa_r+0x266>
 80074d6:	2301      	movs	r3, #1
 80074d8:	9308      	str	r3, [sp, #32]
 80074da:	e7f4      	b.n	80074c6 <_dtoa_r+0x2b6>
 80074dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80074e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80074e4:	464b      	mov	r3, r9
 80074e6:	e7c6      	b.n	8007476 <_dtoa_r+0x266>
 80074e8:	3101      	adds	r1, #1
 80074ea:	6041      	str	r1, [r0, #4]
 80074ec:	0052      	lsls	r2, r2, #1
 80074ee:	e7c6      	b.n	800747e <_dtoa_r+0x26e>
 80074f0:	636f4361 	.word	0x636f4361
 80074f4:	3fd287a7 	.word	0x3fd287a7
 80074f8:	8b60c8b3 	.word	0x8b60c8b3
 80074fc:	3fc68a28 	.word	0x3fc68a28
 8007500:	509f79fb 	.word	0x509f79fb
 8007504:	3fd34413 	.word	0x3fd34413
 8007508:	0800b155 	.word	0x0800b155
 800750c:	0800b16c 	.word	0x0800b16c
 8007510:	7ff00000 	.word	0x7ff00000
 8007514:	0800b151 	.word	0x0800b151
 8007518:	0800b148 	.word	0x0800b148
 800751c:	0800b125 	.word	0x0800b125
 8007520:	3ff80000 	.word	0x3ff80000
 8007524:	0800b268 	.word	0x0800b268
 8007528:	0800b1cb 	.word	0x0800b1cb
 800752c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800752e:	9a00      	ldr	r2, [sp, #0]
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	9b01      	ldr	r3, [sp, #4]
 8007534:	2b0e      	cmp	r3, #14
 8007536:	f200 80ad 	bhi.w	8007694 <_dtoa_r+0x484>
 800753a:	2d00      	cmp	r5, #0
 800753c:	f000 80aa 	beq.w	8007694 <_dtoa_r+0x484>
 8007540:	f1ba 0f00 	cmp.w	sl, #0
 8007544:	dd36      	ble.n	80075b4 <_dtoa_r+0x3a4>
 8007546:	4ac3      	ldr	r2, [pc, #780]	; (8007854 <_dtoa_r+0x644>)
 8007548:	f00a 030f 	and.w	r3, sl, #15
 800754c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007550:	ed93 7b00 	vldr	d7, [r3]
 8007554:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007558:	ea4f 172a 	mov.w	r7, sl, asr #4
 800755c:	eeb0 8a47 	vmov.f32	s16, s14
 8007560:	eef0 8a67 	vmov.f32	s17, s15
 8007564:	d016      	beq.n	8007594 <_dtoa_r+0x384>
 8007566:	4bbc      	ldr	r3, [pc, #752]	; (8007858 <_dtoa_r+0x648>)
 8007568:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800756c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007570:	f7f9 f96c 	bl	800084c <__aeabi_ddiv>
 8007574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007578:	f007 070f 	and.w	r7, r7, #15
 800757c:	2503      	movs	r5, #3
 800757e:	4eb6      	ldr	r6, [pc, #728]	; (8007858 <_dtoa_r+0x648>)
 8007580:	b957      	cbnz	r7, 8007598 <_dtoa_r+0x388>
 8007582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007586:	ec53 2b18 	vmov	r2, r3, d8
 800758a:	f7f9 f95f 	bl	800084c <__aeabi_ddiv>
 800758e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007592:	e029      	b.n	80075e8 <_dtoa_r+0x3d8>
 8007594:	2502      	movs	r5, #2
 8007596:	e7f2      	b.n	800757e <_dtoa_r+0x36e>
 8007598:	07f9      	lsls	r1, r7, #31
 800759a:	d508      	bpl.n	80075ae <_dtoa_r+0x39e>
 800759c:	ec51 0b18 	vmov	r0, r1, d8
 80075a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075a4:	f7f9 f828 	bl	80005f8 <__aeabi_dmul>
 80075a8:	ec41 0b18 	vmov	d8, r0, r1
 80075ac:	3501      	adds	r5, #1
 80075ae:	107f      	asrs	r7, r7, #1
 80075b0:	3608      	adds	r6, #8
 80075b2:	e7e5      	b.n	8007580 <_dtoa_r+0x370>
 80075b4:	f000 80a6 	beq.w	8007704 <_dtoa_r+0x4f4>
 80075b8:	f1ca 0600 	rsb	r6, sl, #0
 80075bc:	4ba5      	ldr	r3, [pc, #660]	; (8007854 <_dtoa_r+0x644>)
 80075be:	4fa6      	ldr	r7, [pc, #664]	; (8007858 <_dtoa_r+0x648>)
 80075c0:	f006 020f 	and.w	r2, r6, #15
 80075c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075d0:	f7f9 f812 	bl	80005f8 <__aeabi_dmul>
 80075d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075d8:	1136      	asrs	r6, r6, #4
 80075da:	2300      	movs	r3, #0
 80075dc:	2502      	movs	r5, #2
 80075de:	2e00      	cmp	r6, #0
 80075e0:	f040 8085 	bne.w	80076ee <_dtoa_r+0x4de>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1d2      	bne.n	800758e <_dtoa_r+0x37e>
 80075e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 808c 	beq.w	8007708 <_dtoa_r+0x4f8>
 80075f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075f4:	4b99      	ldr	r3, [pc, #612]	; (800785c <_dtoa_r+0x64c>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	4630      	mov	r0, r6
 80075fa:	4639      	mov	r1, r7
 80075fc:	f7f9 fa6e 	bl	8000adc <__aeabi_dcmplt>
 8007600:	2800      	cmp	r0, #0
 8007602:	f000 8081 	beq.w	8007708 <_dtoa_r+0x4f8>
 8007606:	9b01      	ldr	r3, [sp, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d07d      	beq.n	8007708 <_dtoa_r+0x4f8>
 800760c:	f1b9 0f00 	cmp.w	r9, #0
 8007610:	dd3c      	ble.n	800768c <_dtoa_r+0x47c>
 8007612:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007616:	9307      	str	r3, [sp, #28]
 8007618:	2200      	movs	r2, #0
 800761a:	4b91      	ldr	r3, [pc, #580]	; (8007860 <_dtoa_r+0x650>)
 800761c:	4630      	mov	r0, r6
 800761e:	4639      	mov	r1, r7
 8007620:	f7f8 ffea 	bl	80005f8 <__aeabi_dmul>
 8007624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007628:	3501      	adds	r5, #1
 800762a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800762e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007632:	4628      	mov	r0, r5
 8007634:	f7f8 ff76 	bl	8000524 <__aeabi_i2d>
 8007638:	4632      	mov	r2, r6
 800763a:	463b      	mov	r3, r7
 800763c:	f7f8 ffdc 	bl	80005f8 <__aeabi_dmul>
 8007640:	4b88      	ldr	r3, [pc, #544]	; (8007864 <_dtoa_r+0x654>)
 8007642:	2200      	movs	r2, #0
 8007644:	f7f8 fe22 	bl	800028c <__adddf3>
 8007648:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800764c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007650:	9303      	str	r3, [sp, #12]
 8007652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007654:	2b00      	cmp	r3, #0
 8007656:	d15c      	bne.n	8007712 <_dtoa_r+0x502>
 8007658:	4b83      	ldr	r3, [pc, #524]	; (8007868 <_dtoa_r+0x658>)
 800765a:	2200      	movs	r2, #0
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	f7f8 fe12 	bl	8000288 <__aeabi_dsub>
 8007664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007668:	4606      	mov	r6, r0
 800766a:	460f      	mov	r7, r1
 800766c:	f7f9 fa54 	bl	8000b18 <__aeabi_dcmpgt>
 8007670:	2800      	cmp	r0, #0
 8007672:	f040 8296 	bne.w	8007ba2 <_dtoa_r+0x992>
 8007676:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800767a:	4630      	mov	r0, r6
 800767c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007680:	4639      	mov	r1, r7
 8007682:	f7f9 fa2b 	bl	8000adc <__aeabi_dcmplt>
 8007686:	2800      	cmp	r0, #0
 8007688:	f040 8288 	bne.w	8007b9c <_dtoa_r+0x98c>
 800768c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007690:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007694:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007696:	2b00      	cmp	r3, #0
 8007698:	f2c0 8158 	blt.w	800794c <_dtoa_r+0x73c>
 800769c:	f1ba 0f0e 	cmp.w	sl, #14
 80076a0:	f300 8154 	bgt.w	800794c <_dtoa_r+0x73c>
 80076a4:	4b6b      	ldr	r3, [pc, #428]	; (8007854 <_dtoa_r+0x644>)
 80076a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80076aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f280 80e3 	bge.w	800787c <_dtoa_r+0x66c>
 80076b6:	9b01      	ldr	r3, [sp, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f300 80df 	bgt.w	800787c <_dtoa_r+0x66c>
 80076be:	f040 826d 	bne.w	8007b9c <_dtoa_r+0x98c>
 80076c2:	4b69      	ldr	r3, [pc, #420]	; (8007868 <_dtoa_r+0x658>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	4640      	mov	r0, r8
 80076c8:	4649      	mov	r1, r9
 80076ca:	f7f8 ff95 	bl	80005f8 <__aeabi_dmul>
 80076ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076d2:	f7f9 fa17 	bl	8000b04 <__aeabi_dcmpge>
 80076d6:	9e01      	ldr	r6, [sp, #4]
 80076d8:	4637      	mov	r7, r6
 80076da:	2800      	cmp	r0, #0
 80076dc:	f040 8243 	bne.w	8007b66 <_dtoa_r+0x956>
 80076e0:	9d00      	ldr	r5, [sp, #0]
 80076e2:	2331      	movs	r3, #49	; 0x31
 80076e4:	f805 3b01 	strb.w	r3, [r5], #1
 80076e8:	f10a 0a01 	add.w	sl, sl, #1
 80076ec:	e23f      	b.n	8007b6e <_dtoa_r+0x95e>
 80076ee:	07f2      	lsls	r2, r6, #31
 80076f0:	d505      	bpl.n	80076fe <_dtoa_r+0x4ee>
 80076f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f6:	f7f8 ff7f 	bl	80005f8 <__aeabi_dmul>
 80076fa:	3501      	adds	r5, #1
 80076fc:	2301      	movs	r3, #1
 80076fe:	1076      	asrs	r6, r6, #1
 8007700:	3708      	adds	r7, #8
 8007702:	e76c      	b.n	80075de <_dtoa_r+0x3ce>
 8007704:	2502      	movs	r5, #2
 8007706:	e76f      	b.n	80075e8 <_dtoa_r+0x3d8>
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	f8cd a01c 	str.w	sl, [sp, #28]
 800770e:	930c      	str	r3, [sp, #48]	; 0x30
 8007710:	e78d      	b.n	800762e <_dtoa_r+0x41e>
 8007712:	9900      	ldr	r1, [sp, #0]
 8007714:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007718:	4b4e      	ldr	r3, [pc, #312]	; (8007854 <_dtoa_r+0x644>)
 800771a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800771e:	4401      	add	r1, r0
 8007720:	9102      	str	r1, [sp, #8]
 8007722:	9908      	ldr	r1, [sp, #32]
 8007724:	eeb0 8a47 	vmov.f32	s16, s14
 8007728:	eef0 8a67 	vmov.f32	s17, s15
 800772c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007730:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007734:	2900      	cmp	r1, #0
 8007736:	d045      	beq.n	80077c4 <_dtoa_r+0x5b4>
 8007738:	494c      	ldr	r1, [pc, #304]	; (800786c <_dtoa_r+0x65c>)
 800773a:	2000      	movs	r0, #0
 800773c:	f7f9 f886 	bl	800084c <__aeabi_ddiv>
 8007740:	ec53 2b18 	vmov	r2, r3, d8
 8007744:	f7f8 fda0 	bl	8000288 <__aeabi_dsub>
 8007748:	9d00      	ldr	r5, [sp, #0]
 800774a:	ec41 0b18 	vmov	d8, r0, r1
 800774e:	4639      	mov	r1, r7
 8007750:	4630      	mov	r0, r6
 8007752:	f7f9 fa01 	bl	8000b58 <__aeabi_d2iz>
 8007756:	900c      	str	r0, [sp, #48]	; 0x30
 8007758:	f7f8 fee4 	bl	8000524 <__aeabi_i2d>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4630      	mov	r0, r6
 8007762:	4639      	mov	r1, r7
 8007764:	f7f8 fd90 	bl	8000288 <__aeabi_dsub>
 8007768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800776a:	3330      	adds	r3, #48	; 0x30
 800776c:	f805 3b01 	strb.w	r3, [r5], #1
 8007770:	ec53 2b18 	vmov	r2, r3, d8
 8007774:	4606      	mov	r6, r0
 8007776:	460f      	mov	r7, r1
 8007778:	f7f9 f9b0 	bl	8000adc <__aeabi_dcmplt>
 800777c:	2800      	cmp	r0, #0
 800777e:	d165      	bne.n	800784c <_dtoa_r+0x63c>
 8007780:	4632      	mov	r2, r6
 8007782:	463b      	mov	r3, r7
 8007784:	4935      	ldr	r1, [pc, #212]	; (800785c <_dtoa_r+0x64c>)
 8007786:	2000      	movs	r0, #0
 8007788:	f7f8 fd7e 	bl	8000288 <__aeabi_dsub>
 800778c:	ec53 2b18 	vmov	r2, r3, d8
 8007790:	f7f9 f9a4 	bl	8000adc <__aeabi_dcmplt>
 8007794:	2800      	cmp	r0, #0
 8007796:	f040 80b9 	bne.w	800790c <_dtoa_r+0x6fc>
 800779a:	9b02      	ldr	r3, [sp, #8]
 800779c:	429d      	cmp	r5, r3
 800779e:	f43f af75 	beq.w	800768c <_dtoa_r+0x47c>
 80077a2:	4b2f      	ldr	r3, [pc, #188]	; (8007860 <_dtoa_r+0x650>)
 80077a4:	ec51 0b18 	vmov	r0, r1, d8
 80077a8:	2200      	movs	r2, #0
 80077aa:	f7f8 ff25 	bl	80005f8 <__aeabi_dmul>
 80077ae:	4b2c      	ldr	r3, [pc, #176]	; (8007860 <_dtoa_r+0x650>)
 80077b0:	ec41 0b18 	vmov	d8, r0, r1
 80077b4:	2200      	movs	r2, #0
 80077b6:	4630      	mov	r0, r6
 80077b8:	4639      	mov	r1, r7
 80077ba:	f7f8 ff1d 	bl	80005f8 <__aeabi_dmul>
 80077be:	4606      	mov	r6, r0
 80077c0:	460f      	mov	r7, r1
 80077c2:	e7c4      	b.n	800774e <_dtoa_r+0x53e>
 80077c4:	ec51 0b17 	vmov	r0, r1, d7
 80077c8:	f7f8 ff16 	bl	80005f8 <__aeabi_dmul>
 80077cc:	9b02      	ldr	r3, [sp, #8]
 80077ce:	9d00      	ldr	r5, [sp, #0]
 80077d0:	930c      	str	r3, [sp, #48]	; 0x30
 80077d2:	ec41 0b18 	vmov	d8, r0, r1
 80077d6:	4639      	mov	r1, r7
 80077d8:	4630      	mov	r0, r6
 80077da:	f7f9 f9bd 	bl	8000b58 <__aeabi_d2iz>
 80077de:	9011      	str	r0, [sp, #68]	; 0x44
 80077e0:	f7f8 fea0 	bl	8000524 <__aeabi_i2d>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4630      	mov	r0, r6
 80077ea:	4639      	mov	r1, r7
 80077ec:	f7f8 fd4c 	bl	8000288 <__aeabi_dsub>
 80077f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077f2:	3330      	adds	r3, #48	; 0x30
 80077f4:	f805 3b01 	strb.w	r3, [r5], #1
 80077f8:	9b02      	ldr	r3, [sp, #8]
 80077fa:	429d      	cmp	r5, r3
 80077fc:	4606      	mov	r6, r0
 80077fe:	460f      	mov	r7, r1
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	d134      	bne.n	8007870 <_dtoa_r+0x660>
 8007806:	4b19      	ldr	r3, [pc, #100]	; (800786c <_dtoa_r+0x65c>)
 8007808:	ec51 0b18 	vmov	r0, r1, d8
 800780c:	f7f8 fd3e 	bl	800028c <__adddf3>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4630      	mov	r0, r6
 8007816:	4639      	mov	r1, r7
 8007818:	f7f9 f97e 	bl	8000b18 <__aeabi_dcmpgt>
 800781c:	2800      	cmp	r0, #0
 800781e:	d175      	bne.n	800790c <_dtoa_r+0x6fc>
 8007820:	ec53 2b18 	vmov	r2, r3, d8
 8007824:	4911      	ldr	r1, [pc, #68]	; (800786c <_dtoa_r+0x65c>)
 8007826:	2000      	movs	r0, #0
 8007828:	f7f8 fd2e 	bl	8000288 <__aeabi_dsub>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	4630      	mov	r0, r6
 8007832:	4639      	mov	r1, r7
 8007834:	f7f9 f952 	bl	8000adc <__aeabi_dcmplt>
 8007838:	2800      	cmp	r0, #0
 800783a:	f43f af27 	beq.w	800768c <_dtoa_r+0x47c>
 800783e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007840:	1e6b      	subs	r3, r5, #1
 8007842:	930c      	str	r3, [sp, #48]	; 0x30
 8007844:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007848:	2b30      	cmp	r3, #48	; 0x30
 800784a:	d0f8      	beq.n	800783e <_dtoa_r+0x62e>
 800784c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007850:	e04a      	b.n	80078e8 <_dtoa_r+0x6d8>
 8007852:	bf00      	nop
 8007854:	0800b268 	.word	0x0800b268
 8007858:	0800b240 	.word	0x0800b240
 800785c:	3ff00000 	.word	0x3ff00000
 8007860:	40240000 	.word	0x40240000
 8007864:	401c0000 	.word	0x401c0000
 8007868:	40140000 	.word	0x40140000
 800786c:	3fe00000 	.word	0x3fe00000
 8007870:	4baf      	ldr	r3, [pc, #700]	; (8007b30 <_dtoa_r+0x920>)
 8007872:	f7f8 fec1 	bl	80005f8 <__aeabi_dmul>
 8007876:	4606      	mov	r6, r0
 8007878:	460f      	mov	r7, r1
 800787a:	e7ac      	b.n	80077d6 <_dtoa_r+0x5c6>
 800787c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007880:	9d00      	ldr	r5, [sp, #0]
 8007882:	4642      	mov	r2, r8
 8007884:	464b      	mov	r3, r9
 8007886:	4630      	mov	r0, r6
 8007888:	4639      	mov	r1, r7
 800788a:	f7f8 ffdf 	bl	800084c <__aeabi_ddiv>
 800788e:	f7f9 f963 	bl	8000b58 <__aeabi_d2iz>
 8007892:	9002      	str	r0, [sp, #8]
 8007894:	f7f8 fe46 	bl	8000524 <__aeabi_i2d>
 8007898:	4642      	mov	r2, r8
 800789a:	464b      	mov	r3, r9
 800789c:	f7f8 feac 	bl	80005f8 <__aeabi_dmul>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4630      	mov	r0, r6
 80078a6:	4639      	mov	r1, r7
 80078a8:	f7f8 fcee 	bl	8000288 <__aeabi_dsub>
 80078ac:	9e02      	ldr	r6, [sp, #8]
 80078ae:	9f01      	ldr	r7, [sp, #4]
 80078b0:	3630      	adds	r6, #48	; 0x30
 80078b2:	f805 6b01 	strb.w	r6, [r5], #1
 80078b6:	9e00      	ldr	r6, [sp, #0]
 80078b8:	1bae      	subs	r6, r5, r6
 80078ba:	42b7      	cmp	r7, r6
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	d137      	bne.n	8007932 <_dtoa_r+0x722>
 80078c2:	f7f8 fce3 	bl	800028c <__adddf3>
 80078c6:	4642      	mov	r2, r8
 80078c8:	464b      	mov	r3, r9
 80078ca:	4606      	mov	r6, r0
 80078cc:	460f      	mov	r7, r1
 80078ce:	f7f9 f923 	bl	8000b18 <__aeabi_dcmpgt>
 80078d2:	b9c8      	cbnz	r0, 8007908 <_dtoa_r+0x6f8>
 80078d4:	4642      	mov	r2, r8
 80078d6:	464b      	mov	r3, r9
 80078d8:	4630      	mov	r0, r6
 80078da:	4639      	mov	r1, r7
 80078dc:	f7f9 f8f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80078e0:	b110      	cbz	r0, 80078e8 <_dtoa_r+0x6d8>
 80078e2:	9b02      	ldr	r3, [sp, #8]
 80078e4:	07d9      	lsls	r1, r3, #31
 80078e6:	d40f      	bmi.n	8007908 <_dtoa_r+0x6f8>
 80078e8:	4620      	mov	r0, r4
 80078ea:	4659      	mov	r1, fp
 80078ec:	f000 fac8 	bl	8007e80 <_Bfree>
 80078f0:	2300      	movs	r3, #0
 80078f2:	702b      	strb	r3, [r5, #0]
 80078f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078f6:	f10a 0001 	add.w	r0, sl, #1
 80078fa:	6018      	str	r0, [r3, #0]
 80078fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f43f acd8 	beq.w	80072b4 <_dtoa_r+0xa4>
 8007904:	601d      	str	r5, [r3, #0]
 8007906:	e4d5      	b.n	80072b4 <_dtoa_r+0xa4>
 8007908:	f8cd a01c 	str.w	sl, [sp, #28]
 800790c:	462b      	mov	r3, r5
 800790e:	461d      	mov	r5, r3
 8007910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007914:	2a39      	cmp	r2, #57	; 0x39
 8007916:	d108      	bne.n	800792a <_dtoa_r+0x71a>
 8007918:	9a00      	ldr	r2, [sp, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d1f7      	bne.n	800790e <_dtoa_r+0x6fe>
 800791e:	9a07      	ldr	r2, [sp, #28]
 8007920:	9900      	ldr	r1, [sp, #0]
 8007922:	3201      	adds	r2, #1
 8007924:	9207      	str	r2, [sp, #28]
 8007926:	2230      	movs	r2, #48	; 0x30
 8007928:	700a      	strb	r2, [r1, #0]
 800792a:	781a      	ldrb	r2, [r3, #0]
 800792c:	3201      	adds	r2, #1
 800792e:	701a      	strb	r2, [r3, #0]
 8007930:	e78c      	b.n	800784c <_dtoa_r+0x63c>
 8007932:	4b7f      	ldr	r3, [pc, #508]	; (8007b30 <_dtoa_r+0x920>)
 8007934:	2200      	movs	r2, #0
 8007936:	f7f8 fe5f 	bl	80005f8 <__aeabi_dmul>
 800793a:	2200      	movs	r2, #0
 800793c:	2300      	movs	r3, #0
 800793e:	4606      	mov	r6, r0
 8007940:	460f      	mov	r7, r1
 8007942:	f7f9 f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007946:	2800      	cmp	r0, #0
 8007948:	d09b      	beq.n	8007882 <_dtoa_r+0x672>
 800794a:	e7cd      	b.n	80078e8 <_dtoa_r+0x6d8>
 800794c:	9a08      	ldr	r2, [sp, #32]
 800794e:	2a00      	cmp	r2, #0
 8007950:	f000 80c4 	beq.w	8007adc <_dtoa_r+0x8cc>
 8007954:	9a05      	ldr	r2, [sp, #20]
 8007956:	2a01      	cmp	r2, #1
 8007958:	f300 80a8 	bgt.w	8007aac <_dtoa_r+0x89c>
 800795c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800795e:	2a00      	cmp	r2, #0
 8007960:	f000 80a0 	beq.w	8007aa4 <_dtoa_r+0x894>
 8007964:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007968:	9e06      	ldr	r6, [sp, #24]
 800796a:	4645      	mov	r5, r8
 800796c:	9a04      	ldr	r2, [sp, #16]
 800796e:	2101      	movs	r1, #1
 8007970:	441a      	add	r2, r3
 8007972:	4620      	mov	r0, r4
 8007974:	4498      	add	r8, r3
 8007976:	9204      	str	r2, [sp, #16]
 8007978:	f000 fb3e 	bl	8007ff8 <__i2b>
 800797c:	4607      	mov	r7, r0
 800797e:	2d00      	cmp	r5, #0
 8007980:	dd0b      	ble.n	800799a <_dtoa_r+0x78a>
 8007982:	9b04      	ldr	r3, [sp, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	dd08      	ble.n	800799a <_dtoa_r+0x78a>
 8007988:	42ab      	cmp	r3, r5
 800798a:	9a04      	ldr	r2, [sp, #16]
 800798c:	bfa8      	it	ge
 800798e:	462b      	movge	r3, r5
 8007990:	eba8 0803 	sub.w	r8, r8, r3
 8007994:	1aed      	subs	r5, r5, r3
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	9304      	str	r3, [sp, #16]
 800799a:	9b06      	ldr	r3, [sp, #24]
 800799c:	b1fb      	cbz	r3, 80079de <_dtoa_r+0x7ce>
 800799e:	9b08      	ldr	r3, [sp, #32]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 809f 	beq.w	8007ae4 <_dtoa_r+0x8d4>
 80079a6:	2e00      	cmp	r6, #0
 80079a8:	dd11      	ble.n	80079ce <_dtoa_r+0x7be>
 80079aa:	4639      	mov	r1, r7
 80079ac:	4632      	mov	r2, r6
 80079ae:	4620      	mov	r0, r4
 80079b0:	f000 fbde 	bl	8008170 <__pow5mult>
 80079b4:	465a      	mov	r2, fp
 80079b6:	4601      	mov	r1, r0
 80079b8:	4607      	mov	r7, r0
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 fb32 	bl	8008024 <__multiply>
 80079c0:	4659      	mov	r1, fp
 80079c2:	9007      	str	r0, [sp, #28]
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 fa5b 	bl	8007e80 <_Bfree>
 80079ca:	9b07      	ldr	r3, [sp, #28]
 80079cc:	469b      	mov	fp, r3
 80079ce:	9b06      	ldr	r3, [sp, #24]
 80079d0:	1b9a      	subs	r2, r3, r6
 80079d2:	d004      	beq.n	80079de <_dtoa_r+0x7ce>
 80079d4:	4659      	mov	r1, fp
 80079d6:	4620      	mov	r0, r4
 80079d8:	f000 fbca 	bl	8008170 <__pow5mult>
 80079dc:	4683      	mov	fp, r0
 80079de:	2101      	movs	r1, #1
 80079e0:	4620      	mov	r0, r4
 80079e2:	f000 fb09 	bl	8007ff8 <__i2b>
 80079e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	4606      	mov	r6, r0
 80079ec:	dd7c      	ble.n	8007ae8 <_dtoa_r+0x8d8>
 80079ee:	461a      	mov	r2, r3
 80079f0:	4601      	mov	r1, r0
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 fbbc 	bl	8008170 <__pow5mult>
 80079f8:	9b05      	ldr	r3, [sp, #20]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	4606      	mov	r6, r0
 80079fe:	dd76      	ble.n	8007aee <_dtoa_r+0x8de>
 8007a00:	2300      	movs	r3, #0
 8007a02:	9306      	str	r3, [sp, #24]
 8007a04:	6933      	ldr	r3, [r6, #16]
 8007a06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a0a:	6918      	ldr	r0, [r3, #16]
 8007a0c:	f000 faa4 	bl	8007f58 <__hi0bits>
 8007a10:	f1c0 0020 	rsb	r0, r0, #32
 8007a14:	9b04      	ldr	r3, [sp, #16]
 8007a16:	4418      	add	r0, r3
 8007a18:	f010 001f 	ands.w	r0, r0, #31
 8007a1c:	f000 8086 	beq.w	8007b2c <_dtoa_r+0x91c>
 8007a20:	f1c0 0320 	rsb	r3, r0, #32
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	dd7f      	ble.n	8007b28 <_dtoa_r+0x918>
 8007a28:	f1c0 001c 	rsb	r0, r0, #28
 8007a2c:	9b04      	ldr	r3, [sp, #16]
 8007a2e:	4403      	add	r3, r0
 8007a30:	4480      	add	r8, r0
 8007a32:	4405      	add	r5, r0
 8007a34:	9304      	str	r3, [sp, #16]
 8007a36:	f1b8 0f00 	cmp.w	r8, #0
 8007a3a:	dd05      	ble.n	8007a48 <_dtoa_r+0x838>
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	4642      	mov	r2, r8
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 fbef 	bl	8008224 <__lshift>
 8007a46:	4683      	mov	fp, r0
 8007a48:	9b04      	ldr	r3, [sp, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	dd05      	ble.n	8007a5a <_dtoa_r+0x84a>
 8007a4e:	4631      	mov	r1, r6
 8007a50:	461a      	mov	r2, r3
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 fbe6 	bl	8008224 <__lshift>
 8007a58:	4606      	mov	r6, r0
 8007a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d069      	beq.n	8007b34 <_dtoa_r+0x924>
 8007a60:	4631      	mov	r1, r6
 8007a62:	4658      	mov	r0, fp
 8007a64:	f000 fc4a 	bl	80082fc <__mcmp>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	da63      	bge.n	8007b34 <_dtoa_r+0x924>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4659      	mov	r1, fp
 8007a70:	220a      	movs	r2, #10
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 fa26 	bl	8007ec4 <__multadd>
 8007a78:	9b08      	ldr	r3, [sp, #32]
 8007a7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a7e:	4683      	mov	fp, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 818f 	beq.w	8007da4 <_dtoa_r+0xb94>
 8007a86:	4639      	mov	r1, r7
 8007a88:	2300      	movs	r3, #0
 8007a8a:	220a      	movs	r2, #10
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f000 fa19 	bl	8007ec4 <__multadd>
 8007a92:	f1b9 0f00 	cmp.w	r9, #0
 8007a96:	4607      	mov	r7, r0
 8007a98:	f300 808e 	bgt.w	8007bb8 <_dtoa_r+0x9a8>
 8007a9c:	9b05      	ldr	r3, [sp, #20]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	dc50      	bgt.n	8007b44 <_dtoa_r+0x934>
 8007aa2:	e089      	b.n	8007bb8 <_dtoa_r+0x9a8>
 8007aa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007aa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007aaa:	e75d      	b.n	8007968 <_dtoa_r+0x758>
 8007aac:	9b01      	ldr	r3, [sp, #4]
 8007aae:	1e5e      	subs	r6, r3, #1
 8007ab0:	9b06      	ldr	r3, [sp, #24]
 8007ab2:	42b3      	cmp	r3, r6
 8007ab4:	bfbf      	itttt	lt
 8007ab6:	9b06      	ldrlt	r3, [sp, #24]
 8007ab8:	9606      	strlt	r6, [sp, #24]
 8007aba:	1af2      	sublt	r2, r6, r3
 8007abc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007abe:	bfb6      	itet	lt
 8007ac0:	189b      	addlt	r3, r3, r2
 8007ac2:	1b9e      	subge	r6, r3, r6
 8007ac4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007ac6:	9b01      	ldr	r3, [sp, #4]
 8007ac8:	bfb8      	it	lt
 8007aca:	2600      	movlt	r6, #0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	bfb5      	itete	lt
 8007ad0:	eba8 0503 	sublt.w	r5, r8, r3
 8007ad4:	9b01      	ldrge	r3, [sp, #4]
 8007ad6:	2300      	movlt	r3, #0
 8007ad8:	4645      	movge	r5, r8
 8007ada:	e747      	b.n	800796c <_dtoa_r+0x75c>
 8007adc:	9e06      	ldr	r6, [sp, #24]
 8007ade:	9f08      	ldr	r7, [sp, #32]
 8007ae0:	4645      	mov	r5, r8
 8007ae2:	e74c      	b.n	800797e <_dtoa_r+0x76e>
 8007ae4:	9a06      	ldr	r2, [sp, #24]
 8007ae6:	e775      	b.n	80079d4 <_dtoa_r+0x7c4>
 8007ae8:	9b05      	ldr	r3, [sp, #20]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	dc18      	bgt.n	8007b20 <_dtoa_r+0x910>
 8007aee:	9b02      	ldr	r3, [sp, #8]
 8007af0:	b9b3      	cbnz	r3, 8007b20 <_dtoa_r+0x910>
 8007af2:	9b03      	ldr	r3, [sp, #12]
 8007af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007af8:	b9a3      	cbnz	r3, 8007b24 <_dtoa_r+0x914>
 8007afa:	9b03      	ldr	r3, [sp, #12]
 8007afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b00:	0d1b      	lsrs	r3, r3, #20
 8007b02:	051b      	lsls	r3, r3, #20
 8007b04:	b12b      	cbz	r3, 8007b12 <_dtoa_r+0x902>
 8007b06:	9b04      	ldr	r3, [sp, #16]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	9304      	str	r3, [sp, #16]
 8007b0c:	f108 0801 	add.w	r8, r8, #1
 8007b10:	2301      	movs	r3, #1
 8007b12:	9306      	str	r3, [sp, #24]
 8007b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f47f af74 	bne.w	8007a04 <_dtoa_r+0x7f4>
 8007b1c:	2001      	movs	r0, #1
 8007b1e:	e779      	b.n	8007a14 <_dtoa_r+0x804>
 8007b20:	2300      	movs	r3, #0
 8007b22:	e7f6      	b.n	8007b12 <_dtoa_r+0x902>
 8007b24:	9b02      	ldr	r3, [sp, #8]
 8007b26:	e7f4      	b.n	8007b12 <_dtoa_r+0x902>
 8007b28:	d085      	beq.n	8007a36 <_dtoa_r+0x826>
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	301c      	adds	r0, #28
 8007b2e:	e77d      	b.n	8007a2c <_dtoa_r+0x81c>
 8007b30:	40240000 	.word	0x40240000
 8007b34:	9b01      	ldr	r3, [sp, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	dc38      	bgt.n	8007bac <_dtoa_r+0x99c>
 8007b3a:	9b05      	ldr	r3, [sp, #20]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	dd35      	ble.n	8007bac <_dtoa_r+0x99c>
 8007b40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b44:	f1b9 0f00 	cmp.w	r9, #0
 8007b48:	d10d      	bne.n	8007b66 <_dtoa_r+0x956>
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	464b      	mov	r3, r9
 8007b4e:	2205      	movs	r2, #5
 8007b50:	4620      	mov	r0, r4
 8007b52:	f000 f9b7 	bl	8007ec4 <__multadd>
 8007b56:	4601      	mov	r1, r0
 8007b58:	4606      	mov	r6, r0
 8007b5a:	4658      	mov	r0, fp
 8007b5c:	f000 fbce 	bl	80082fc <__mcmp>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	f73f adbd 	bgt.w	80076e0 <_dtoa_r+0x4d0>
 8007b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b68:	9d00      	ldr	r5, [sp, #0]
 8007b6a:	ea6f 0a03 	mvn.w	sl, r3
 8007b6e:	f04f 0800 	mov.w	r8, #0
 8007b72:	4631      	mov	r1, r6
 8007b74:	4620      	mov	r0, r4
 8007b76:	f000 f983 	bl	8007e80 <_Bfree>
 8007b7a:	2f00      	cmp	r7, #0
 8007b7c:	f43f aeb4 	beq.w	80078e8 <_dtoa_r+0x6d8>
 8007b80:	f1b8 0f00 	cmp.w	r8, #0
 8007b84:	d005      	beq.n	8007b92 <_dtoa_r+0x982>
 8007b86:	45b8      	cmp	r8, r7
 8007b88:	d003      	beq.n	8007b92 <_dtoa_r+0x982>
 8007b8a:	4641      	mov	r1, r8
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f000 f977 	bl	8007e80 <_Bfree>
 8007b92:	4639      	mov	r1, r7
 8007b94:	4620      	mov	r0, r4
 8007b96:	f000 f973 	bl	8007e80 <_Bfree>
 8007b9a:	e6a5      	b.n	80078e8 <_dtoa_r+0x6d8>
 8007b9c:	2600      	movs	r6, #0
 8007b9e:	4637      	mov	r7, r6
 8007ba0:	e7e1      	b.n	8007b66 <_dtoa_r+0x956>
 8007ba2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ba4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007ba8:	4637      	mov	r7, r6
 8007baa:	e599      	b.n	80076e0 <_dtoa_r+0x4d0>
 8007bac:	9b08      	ldr	r3, [sp, #32]
 8007bae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 80fd 	beq.w	8007db2 <_dtoa_r+0xba2>
 8007bb8:	2d00      	cmp	r5, #0
 8007bba:	dd05      	ble.n	8007bc8 <_dtoa_r+0x9b8>
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	462a      	mov	r2, r5
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f000 fb2f 	bl	8008224 <__lshift>
 8007bc6:	4607      	mov	r7, r0
 8007bc8:	9b06      	ldr	r3, [sp, #24]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d05c      	beq.n	8007c88 <_dtoa_r+0xa78>
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f000 f915 	bl	8007e00 <_Balloc>
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	b928      	cbnz	r0, 8007be6 <_dtoa_r+0x9d6>
 8007bda:	4b80      	ldr	r3, [pc, #512]	; (8007ddc <_dtoa_r+0xbcc>)
 8007bdc:	4602      	mov	r2, r0
 8007bde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007be2:	f7ff bb2e 	b.w	8007242 <_dtoa_r+0x32>
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	3202      	adds	r2, #2
 8007bea:	0092      	lsls	r2, r2, #2
 8007bec:	f107 010c 	add.w	r1, r7, #12
 8007bf0:	300c      	adds	r0, #12
 8007bf2:	f7fe fdc5 	bl	8006780 <memcpy>
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 fb12 	bl	8008224 <__lshift>
 8007c00:	9b00      	ldr	r3, [sp, #0]
 8007c02:	3301      	adds	r3, #1
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	9b00      	ldr	r3, [sp, #0]
 8007c08:	444b      	add	r3, r9
 8007c0a:	9307      	str	r3, [sp, #28]
 8007c0c:	9b02      	ldr	r3, [sp, #8]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	46b8      	mov	r8, r7
 8007c14:	9306      	str	r3, [sp, #24]
 8007c16:	4607      	mov	r7, r0
 8007c18:	9b01      	ldr	r3, [sp, #4]
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	4658      	mov	r0, fp
 8007c20:	9302      	str	r3, [sp, #8]
 8007c22:	f7ff fa67 	bl	80070f4 <quorem>
 8007c26:	4603      	mov	r3, r0
 8007c28:	3330      	adds	r3, #48	; 0x30
 8007c2a:	9004      	str	r0, [sp, #16]
 8007c2c:	4641      	mov	r1, r8
 8007c2e:	4658      	mov	r0, fp
 8007c30:	9308      	str	r3, [sp, #32]
 8007c32:	f000 fb63 	bl	80082fc <__mcmp>
 8007c36:	463a      	mov	r2, r7
 8007c38:	4681      	mov	r9, r0
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f000 fb79 	bl	8008334 <__mdiff>
 8007c42:	68c2      	ldr	r2, [r0, #12]
 8007c44:	9b08      	ldr	r3, [sp, #32]
 8007c46:	4605      	mov	r5, r0
 8007c48:	bb02      	cbnz	r2, 8007c8c <_dtoa_r+0xa7c>
 8007c4a:	4601      	mov	r1, r0
 8007c4c:	4658      	mov	r0, fp
 8007c4e:	f000 fb55 	bl	80082fc <__mcmp>
 8007c52:	9b08      	ldr	r3, [sp, #32]
 8007c54:	4602      	mov	r2, r0
 8007c56:	4629      	mov	r1, r5
 8007c58:	4620      	mov	r0, r4
 8007c5a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007c5e:	f000 f90f 	bl	8007e80 <_Bfree>
 8007c62:	9b05      	ldr	r3, [sp, #20]
 8007c64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c66:	9d01      	ldr	r5, [sp, #4]
 8007c68:	ea43 0102 	orr.w	r1, r3, r2
 8007c6c:	9b06      	ldr	r3, [sp, #24]
 8007c6e:	430b      	orrs	r3, r1
 8007c70:	9b08      	ldr	r3, [sp, #32]
 8007c72:	d10d      	bne.n	8007c90 <_dtoa_r+0xa80>
 8007c74:	2b39      	cmp	r3, #57	; 0x39
 8007c76:	d029      	beq.n	8007ccc <_dtoa_r+0xabc>
 8007c78:	f1b9 0f00 	cmp.w	r9, #0
 8007c7c:	dd01      	ble.n	8007c82 <_dtoa_r+0xa72>
 8007c7e:	9b04      	ldr	r3, [sp, #16]
 8007c80:	3331      	adds	r3, #49	; 0x31
 8007c82:	9a02      	ldr	r2, [sp, #8]
 8007c84:	7013      	strb	r3, [r2, #0]
 8007c86:	e774      	b.n	8007b72 <_dtoa_r+0x962>
 8007c88:	4638      	mov	r0, r7
 8007c8a:	e7b9      	b.n	8007c00 <_dtoa_r+0x9f0>
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	e7e2      	b.n	8007c56 <_dtoa_r+0xa46>
 8007c90:	f1b9 0f00 	cmp.w	r9, #0
 8007c94:	db06      	blt.n	8007ca4 <_dtoa_r+0xa94>
 8007c96:	9905      	ldr	r1, [sp, #20]
 8007c98:	ea41 0909 	orr.w	r9, r1, r9
 8007c9c:	9906      	ldr	r1, [sp, #24]
 8007c9e:	ea59 0101 	orrs.w	r1, r9, r1
 8007ca2:	d120      	bne.n	8007ce6 <_dtoa_r+0xad6>
 8007ca4:	2a00      	cmp	r2, #0
 8007ca6:	ddec      	ble.n	8007c82 <_dtoa_r+0xa72>
 8007ca8:	4659      	mov	r1, fp
 8007caa:	2201      	movs	r2, #1
 8007cac:	4620      	mov	r0, r4
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	f000 fab8 	bl	8008224 <__lshift>
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4683      	mov	fp, r0
 8007cb8:	f000 fb20 	bl	80082fc <__mcmp>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	9b01      	ldr	r3, [sp, #4]
 8007cc0:	dc02      	bgt.n	8007cc8 <_dtoa_r+0xab8>
 8007cc2:	d1de      	bne.n	8007c82 <_dtoa_r+0xa72>
 8007cc4:	07da      	lsls	r2, r3, #31
 8007cc6:	d5dc      	bpl.n	8007c82 <_dtoa_r+0xa72>
 8007cc8:	2b39      	cmp	r3, #57	; 0x39
 8007cca:	d1d8      	bne.n	8007c7e <_dtoa_r+0xa6e>
 8007ccc:	9a02      	ldr	r2, [sp, #8]
 8007cce:	2339      	movs	r3, #57	; 0x39
 8007cd0:	7013      	strb	r3, [r2, #0]
 8007cd2:	462b      	mov	r3, r5
 8007cd4:	461d      	mov	r5, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cdc:	2a39      	cmp	r2, #57	; 0x39
 8007cde:	d050      	beq.n	8007d82 <_dtoa_r+0xb72>
 8007ce0:	3201      	adds	r2, #1
 8007ce2:	701a      	strb	r2, [r3, #0]
 8007ce4:	e745      	b.n	8007b72 <_dtoa_r+0x962>
 8007ce6:	2a00      	cmp	r2, #0
 8007ce8:	dd03      	ble.n	8007cf2 <_dtoa_r+0xae2>
 8007cea:	2b39      	cmp	r3, #57	; 0x39
 8007cec:	d0ee      	beq.n	8007ccc <_dtoa_r+0xabc>
 8007cee:	3301      	adds	r3, #1
 8007cf0:	e7c7      	b.n	8007c82 <_dtoa_r+0xa72>
 8007cf2:	9a01      	ldr	r2, [sp, #4]
 8007cf4:	9907      	ldr	r1, [sp, #28]
 8007cf6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007cfa:	428a      	cmp	r2, r1
 8007cfc:	d02a      	beq.n	8007d54 <_dtoa_r+0xb44>
 8007cfe:	4659      	mov	r1, fp
 8007d00:	2300      	movs	r3, #0
 8007d02:	220a      	movs	r2, #10
 8007d04:	4620      	mov	r0, r4
 8007d06:	f000 f8dd 	bl	8007ec4 <__multadd>
 8007d0a:	45b8      	cmp	r8, r7
 8007d0c:	4683      	mov	fp, r0
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	f04f 020a 	mov.w	r2, #10
 8007d16:	4641      	mov	r1, r8
 8007d18:	4620      	mov	r0, r4
 8007d1a:	d107      	bne.n	8007d2c <_dtoa_r+0xb1c>
 8007d1c:	f000 f8d2 	bl	8007ec4 <__multadd>
 8007d20:	4680      	mov	r8, r0
 8007d22:	4607      	mov	r7, r0
 8007d24:	9b01      	ldr	r3, [sp, #4]
 8007d26:	3301      	adds	r3, #1
 8007d28:	9301      	str	r3, [sp, #4]
 8007d2a:	e775      	b.n	8007c18 <_dtoa_r+0xa08>
 8007d2c:	f000 f8ca 	bl	8007ec4 <__multadd>
 8007d30:	4639      	mov	r1, r7
 8007d32:	4680      	mov	r8, r0
 8007d34:	2300      	movs	r3, #0
 8007d36:	220a      	movs	r2, #10
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 f8c3 	bl	8007ec4 <__multadd>
 8007d3e:	4607      	mov	r7, r0
 8007d40:	e7f0      	b.n	8007d24 <_dtoa_r+0xb14>
 8007d42:	f1b9 0f00 	cmp.w	r9, #0
 8007d46:	9a00      	ldr	r2, [sp, #0]
 8007d48:	bfcc      	ite	gt
 8007d4a:	464d      	movgt	r5, r9
 8007d4c:	2501      	movle	r5, #1
 8007d4e:	4415      	add	r5, r2
 8007d50:	f04f 0800 	mov.w	r8, #0
 8007d54:	4659      	mov	r1, fp
 8007d56:	2201      	movs	r2, #1
 8007d58:	4620      	mov	r0, r4
 8007d5a:	9301      	str	r3, [sp, #4]
 8007d5c:	f000 fa62 	bl	8008224 <__lshift>
 8007d60:	4631      	mov	r1, r6
 8007d62:	4683      	mov	fp, r0
 8007d64:	f000 faca 	bl	80082fc <__mcmp>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	dcb2      	bgt.n	8007cd2 <_dtoa_r+0xac2>
 8007d6c:	d102      	bne.n	8007d74 <_dtoa_r+0xb64>
 8007d6e:	9b01      	ldr	r3, [sp, #4]
 8007d70:	07db      	lsls	r3, r3, #31
 8007d72:	d4ae      	bmi.n	8007cd2 <_dtoa_r+0xac2>
 8007d74:	462b      	mov	r3, r5
 8007d76:	461d      	mov	r5, r3
 8007d78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d7c:	2a30      	cmp	r2, #48	; 0x30
 8007d7e:	d0fa      	beq.n	8007d76 <_dtoa_r+0xb66>
 8007d80:	e6f7      	b.n	8007b72 <_dtoa_r+0x962>
 8007d82:	9a00      	ldr	r2, [sp, #0]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d1a5      	bne.n	8007cd4 <_dtoa_r+0xac4>
 8007d88:	f10a 0a01 	add.w	sl, sl, #1
 8007d8c:	2331      	movs	r3, #49	; 0x31
 8007d8e:	e779      	b.n	8007c84 <_dtoa_r+0xa74>
 8007d90:	4b13      	ldr	r3, [pc, #76]	; (8007de0 <_dtoa_r+0xbd0>)
 8007d92:	f7ff baaf 	b.w	80072f4 <_dtoa_r+0xe4>
 8007d96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f47f aa86 	bne.w	80072aa <_dtoa_r+0x9a>
 8007d9e:	4b11      	ldr	r3, [pc, #68]	; (8007de4 <_dtoa_r+0xbd4>)
 8007da0:	f7ff baa8 	b.w	80072f4 <_dtoa_r+0xe4>
 8007da4:	f1b9 0f00 	cmp.w	r9, #0
 8007da8:	dc03      	bgt.n	8007db2 <_dtoa_r+0xba2>
 8007daa:	9b05      	ldr	r3, [sp, #20]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	f73f aec9 	bgt.w	8007b44 <_dtoa_r+0x934>
 8007db2:	9d00      	ldr	r5, [sp, #0]
 8007db4:	4631      	mov	r1, r6
 8007db6:	4658      	mov	r0, fp
 8007db8:	f7ff f99c 	bl	80070f4 <quorem>
 8007dbc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007dc0:	f805 3b01 	strb.w	r3, [r5], #1
 8007dc4:	9a00      	ldr	r2, [sp, #0]
 8007dc6:	1aaa      	subs	r2, r5, r2
 8007dc8:	4591      	cmp	r9, r2
 8007dca:	ddba      	ble.n	8007d42 <_dtoa_r+0xb32>
 8007dcc:	4659      	mov	r1, fp
 8007dce:	2300      	movs	r3, #0
 8007dd0:	220a      	movs	r2, #10
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 f876 	bl	8007ec4 <__multadd>
 8007dd8:	4683      	mov	fp, r0
 8007dda:	e7eb      	b.n	8007db4 <_dtoa_r+0xba4>
 8007ddc:	0800b1cb 	.word	0x0800b1cb
 8007de0:	0800b124 	.word	0x0800b124
 8007de4:	0800b148 	.word	0x0800b148

08007de8 <_localeconv_r>:
 8007de8:	4800      	ldr	r0, [pc, #0]	; (8007dec <_localeconv_r+0x4>)
 8007dea:	4770      	bx	lr
 8007dec:	20000170 	.word	0x20000170

08007df0 <malloc>:
 8007df0:	4b02      	ldr	r3, [pc, #8]	; (8007dfc <malloc+0xc>)
 8007df2:	4601      	mov	r1, r0
 8007df4:	6818      	ldr	r0, [r3, #0]
 8007df6:	f000 bbe1 	b.w	80085bc <_malloc_r>
 8007dfa:	bf00      	nop
 8007dfc:	2000001c 	.word	0x2000001c

08007e00 <_Balloc>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e04:	4604      	mov	r4, r0
 8007e06:	460d      	mov	r5, r1
 8007e08:	b976      	cbnz	r6, 8007e28 <_Balloc+0x28>
 8007e0a:	2010      	movs	r0, #16
 8007e0c:	f7ff fff0 	bl	8007df0 <malloc>
 8007e10:	4602      	mov	r2, r0
 8007e12:	6260      	str	r0, [r4, #36]	; 0x24
 8007e14:	b920      	cbnz	r0, 8007e20 <_Balloc+0x20>
 8007e16:	4b18      	ldr	r3, [pc, #96]	; (8007e78 <_Balloc+0x78>)
 8007e18:	4818      	ldr	r0, [pc, #96]	; (8007e7c <_Balloc+0x7c>)
 8007e1a:	2166      	movs	r1, #102	; 0x66
 8007e1c:	f000 fd94 	bl	8008948 <__assert_func>
 8007e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e24:	6006      	str	r6, [r0, #0]
 8007e26:	60c6      	str	r6, [r0, #12]
 8007e28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e2a:	68f3      	ldr	r3, [r6, #12]
 8007e2c:	b183      	cbz	r3, 8007e50 <_Balloc+0x50>
 8007e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e36:	b9b8      	cbnz	r0, 8007e68 <_Balloc+0x68>
 8007e38:	2101      	movs	r1, #1
 8007e3a:	fa01 f605 	lsl.w	r6, r1, r5
 8007e3e:	1d72      	adds	r2, r6, #5
 8007e40:	0092      	lsls	r2, r2, #2
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 fb5a 	bl	80084fc <_calloc_r>
 8007e48:	b160      	cbz	r0, 8007e64 <_Balloc+0x64>
 8007e4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e4e:	e00e      	b.n	8007e6e <_Balloc+0x6e>
 8007e50:	2221      	movs	r2, #33	; 0x21
 8007e52:	2104      	movs	r1, #4
 8007e54:	4620      	mov	r0, r4
 8007e56:	f000 fb51 	bl	80084fc <_calloc_r>
 8007e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e5c:	60f0      	str	r0, [r6, #12]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e4      	bne.n	8007e2e <_Balloc+0x2e>
 8007e64:	2000      	movs	r0, #0
 8007e66:	bd70      	pop	{r4, r5, r6, pc}
 8007e68:	6802      	ldr	r2, [r0, #0]
 8007e6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e74:	e7f7      	b.n	8007e66 <_Balloc+0x66>
 8007e76:	bf00      	nop
 8007e78:	0800b155 	.word	0x0800b155
 8007e7c:	0800b1dc 	.word	0x0800b1dc

08007e80 <_Bfree>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e84:	4605      	mov	r5, r0
 8007e86:	460c      	mov	r4, r1
 8007e88:	b976      	cbnz	r6, 8007ea8 <_Bfree+0x28>
 8007e8a:	2010      	movs	r0, #16
 8007e8c:	f7ff ffb0 	bl	8007df0 <malloc>
 8007e90:	4602      	mov	r2, r0
 8007e92:	6268      	str	r0, [r5, #36]	; 0x24
 8007e94:	b920      	cbnz	r0, 8007ea0 <_Bfree+0x20>
 8007e96:	4b09      	ldr	r3, [pc, #36]	; (8007ebc <_Bfree+0x3c>)
 8007e98:	4809      	ldr	r0, [pc, #36]	; (8007ec0 <_Bfree+0x40>)
 8007e9a:	218a      	movs	r1, #138	; 0x8a
 8007e9c:	f000 fd54 	bl	8008948 <__assert_func>
 8007ea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ea4:	6006      	str	r6, [r0, #0]
 8007ea6:	60c6      	str	r6, [r0, #12]
 8007ea8:	b13c      	cbz	r4, 8007eba <_Bfree+0x3a>
 8007eaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007eac:	6862      	ldr	r2, [r4, #4]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007eb4:	6021      	str	r1, [r4, #0]
 8007eb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007eba:	bd70      	pop	{r4, r5, r6, pc}
 8007ebc:	0800b155 	.word	0x0800b155
 8007ec0:	0800b1dc 	.word	0x0800b1dc

08007ec4 <__multadd>:
 8007ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec8:	690e      	ldr	r6, [r1, #16]
 8007eca:	4607      	mov	r7, r0
 8007ecc:	4698      	mov	r8, r3
 8007ece:	460c      	mov	r4, r1
 8007ed0:	f101 0014 	add.w	r0, r1, #20
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	6805      	ldr	r5, [r0, #0]
 8007ed8:	b2a9      	uxth	r1, r5
 8007eda:	fb02 8101 	mla	r1, r2, r1, r8
 8007ede:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007ee2:	0c2d      	lsrs	r5, r5, #16
 8007ee4:	fb02 c505 	mla	r5, r2, r5, ip
 8007ee8:	b289      	uxth	r1, r1
 8007eea:	3301      	adds	r3, #1
 8007eec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007ef0:	429e      	cmp	r6, r3
 8007ef2:	f840 1b04 	str.w	r1, [r0], #4
 8007ef6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007efa:	dcec      	bgt.n	8007ed6 <__multadd+0x12>
 8007efc:	f1b8 0f00 	cmp.w	r8, #0
 8007f00:	d022      	beq.n	8007f48 <__multadd+0x84>
 8007f02:	68a3      	ldr	r3, [r4, #8]
 8007f04:	42b3      	cmp	r3, r6
 8007f06:	dc19      	bgt.n	8007f3c <__multadd+0x78>
 8007f08:	6861      	ldr	r1, [r4, #4]
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	3101      	adds	r1, #1
 8007f0e:	f7ff ff77 	bl	8007e00 <_Balloc>
 8007f12:	4605      	mov	r5, r0
 8007f14:	b928      	cbnz	r0, 8007f22 <__multadd+0x5e>
 8007f16:	4602      	mov	r2, r0
 8007f18:	4b0d      	ldr	r3, [pc, #52]	; (8007f50 <__multadd+0x8c>)
 8007f1a:	480e      	ldr	r0, [pc, #56]	; (8007f54 <__multadd+0x90>)
 8007f1c:	21b5      	movs	r1, #181	; 0xb5
 8007f1e:	f000 fd13 	bl	8008948 <__assert_func>
 8007f22:	6922      	ldr	r2, [r4, #16]
 8007f24:	3202      	adds	r2, #2
 8007f26:	f104 010c 	add.w	r1, r4, #12
 8007f2a:	0092      	lsls	r2, r2, #2
 8007f2c:	300c      	adds	r0, #12
 8007f2e:	f7fe fc27 	bl	8006780 <memcpy>
 8007f32:	4621      	mov	r1, r4
 8007f34:	4638      	mov	r0, r7
 8007f36:	f7ff ffa3 	bl	8007e80 <_Bfree>
 8007f3a:	462c      	mov	r4, r5
 8007f3c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007f40:	3601      	adds	r6, #1
 8007f42:	f8c3 8014 	str.w	r8, [r3, #20]
 8007f46:	6126      	str	r6, [r4, #16]
 8007f48:	4620      	mov	r0, r4
 8007f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f4e:	bf00      	nop
 8007f50:	0800b1cb 	.word	0x0800b1cb
 8007f54:	0800b1dc 	.word	0x0800b1dc

08007f58 <__hi0bits>:
 8007f58:	0c03      	lsrs	r3, r0, #16
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	b9d3      	cbnz	r3, 8007f94 <__hi0bits+0x3c>
 8007f5e:	0400      	lsls	r0, r0, #16
 8007f60:	2310      	movs	r3, #16
 8007f62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f66:	bf04      	itt	eq
 8007f68:	0200      	lsleq	r0, r0, #8
 8007f6a:	3308      	addeq	r3, #8
 8007f6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f70:	bf04      	itt	eq
 8007f72:	0100      	lsleq	r0, r0, #4
 8007f74:	3304      	addeq	r3, #4
 8007f76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f7a:	bf04      	itt	eq
 8007f7c:	0080      	lsleq	r0, r0, #2
 8007f7e:	3302      	addeq	r3, #2
 8007f80:	2800      	cmp	r0, #0
 8007f82:	db05      	blt.n	8007f90 <__hi0bits+0x38>
 8007f84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f88:	f103 0301 	add.w	r3, r3, #1
 8007f8c:	bf08      	it	eq
 8007f8e:	2320      	moveq	r3, #32
 8007f90:	4618      	mov	r0, r3
 8007f92:	4770      	bx	lr
 8007f94:	2300      	movs	r3, #0
 8007f96:	e7e4      	b.n	8007f62 <__hi0bits+0xa>

08007f98 <__lo0bits>:
 8007f98:	6803      	ldr	r3, [r0, #0]
 8007f9a:	f013 0207 	ands.w	r2, r3, #7
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	d00b      	beq.n	8007fba <__lo0bits+0x22>
 8007fa2:	07da      	lsls	r2, r3, #31
 8007fa4:	d424      	bmi.n	8007ff0 <__lo0bits+0x58>
 8007fa6:	0798      	lsls	r0, r3, #30
 8007fa8:	bf49      	itett	mi
 8007faa:	085b      	lsrmi	r3, r3, #1
 8007fac:	089b      	lsrpl	r3, r3, #2
 8007fae:	2001      	movmi	r0, #1
 8007fb0:	600b      	strmi	r3, [r1, #0]
 8007fb2:	bf5c      	itt	pl
 8007fb4:	600b      	strpl	r3, [r1, #0]
 8007fb6:	2002      	movpl	r0, #2
 8007fb8:	4770      	bx	lr
 8007fba:	b298      	uxth	r0, r3
 8007fbc:	b9b0      	cbnz	r0, 8007fec <__lo0bits+0x54>
 8007fbe:	0c1b      	lsrs	r3, r3, #16
 8007fc0:	2010      	movs	r0, #16
 8007fc2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007fc6:	bf04      	itt	eq
 8007fc8:	0a1b      	lsreq	r3, r3, #8
 8007fca:	3008      	addeq	r0, #8
 8007fcc:	071a      	lsls	r2, r3, #28
 8007fce:	bf04      	itt	eq
 8007fd0:	091b      	lsreq	r3, r3, #4
 8007fd2:	3004      	addeq	r0, #4
 8007fd4:	079a      	lsls	r2, r3, #30
 8007fd6:	bf04      	itt	eq
 8007fd8:	089b      	lsreq	r3, r3, #2
 8007fda:	3002      	addeq	r0, #2
 8007fdc:	07da      	lsls	r2, r3, #31
 8007fde:	d403      	bmi.n	8007fe8 <__lo0bits+0x50>
 8007fe0:	085b      	lsrs	r3, r3, #1
 8007fe2:	f100 0001 	add.w	r0, r0, #1
 8007fe6:	d005      	beq.n	8007ff4 <__lo0bits+0x5c>
 8007fe8:	600b      	str	r3, [r1, #0]
 8007fea:	4770      	bx	lr
 8007fec:	4610      	mov	r0, r2
 8007fee:	e7e8      	b.n	8007fc2 <__lo0bits+0x2a>
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	4770      	bx	lr
 8007ff4:	2020      	movs	r0, #32
 8007ff6:	4770      	bx	lr

08007ff8 <__i2b>:
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	f7ff feff 	bl	8007e00 <_Balloc>
 8008002:	4602      	mov	r2, r0
 8008004:	b928      	cbnz	r0, 8008012 <__i2b+0x1a>
 8008006:	4b05      	ldr	r3, [pc, #20]	; (800801c <__i2b+0x24>)
 8008008:	4805      	ldr	r0, [pc, #20]	; (8008020 <__i2b+0x28>)
 800800a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800800e:	f000 fc9b 	bl	8008948 <__assert_func>
 8008012:	2301      	movs	r3, #1
 8008014:	6144      	str	r4, [r0, #20]
 8008016:	6103      	str	r3, [r0, #16]
 8008018:	bd10      	pop	{r4, pc}
 800801a:	bf00      	nop
 800801c:	0800b1cb 	.word	0x0800b1cb
 8008020:	0800b1dc 	.word	0x0800b1dc

08008024 <__multiply>:
 8008024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008028:	4614      	mov	r4, r2
 800802a:	690a      	ldr	r2, [r1, #16]
 800802c:	6923      	ldr	r3, [r4, #16]
 800802e:	429a      	cmp	r2, r3
 8008030:	bfb8      	it	lt
 8008032:	460b      	movlt	r3, r1
 8008034:	460d      	mov	r5, r1
 8008036:	bfbc      	itt	lt
 8008038:	4625      	movlt	r5, r4
 800803a:	461c      	movlt	r4, r3
 800803c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008040:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008044:	68ab      	ldr	r3, [r5, #8]
 8008046:	6869      	ldr	r1, [r5, #4]
 8008048:	eb0a 0709 	add.w	r7, sl, r9
 800804c:	42bb      	cmp	r3, r7
 800804e:	b085      	sub	sp, #20
 8008050:	bfb8      	it	lt
 8008052:	3101      	addlt	r1, #1
 8008054:	f7ff fed4 	bl	8007e00 <_Balloc>
 8008058:	b930      	cbnz	r0, 8008068 <__multiply+0x44>
 800805a:	4602      	mov	r2, r0
 800805c:	4b42      	ldr	r3, [pc, #264]	; (8008168 <__multiply+0x144>)
 800805e:	4843      	ldr	r0, [pc, #268]	; (800816c <__multiply+0x148>)
 8008060:	f240 115d 	movw	r1, #349	; 0x15d
 8008064:	f000 fc70 	bl	8008948 <__assert_func>
 8008068:	f100 0614 	add.w	r6, r0, #20
 800806c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008070:	4633      	mov	r3, r6
 8008072:	2200      	movs	r2, #0
 8008074:	4543      	cmp	r3, r8
 8008076:	d31e      	bcc.n	80080b6 <__multiply+0x92>
 8008078:	f105 0c14 	add.w	ip, r5, #20
 800807c:	f104 0314 	add.w	r3, r4, #20
 8008080:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008084:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008088:	9202      	str	r2, [sp, #8]
 800808a:	ebac 0205 	sub.w	r2, ip, r5
 800808e:	3a15      	subs	r2, #21
 8008090:	f022 0203 	bic.w	r2, r2, #3
 8008094:	3204      	adds	r2, #4
 8008096:	f105 0115 	add.w	r1, r5, #21
 800809a:	458c      	cmp	ip, r1
 800809c:	bf38      	it	cc
 800809e:	2204      	movcc	r2, #4
 80080a0:	9201      	str	r2, [sp, #4]
 80080a2:	9a02      	ldr	r2, [sp, #8]
 80080a4:	9303      	str	r3, [sp, #12]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d808      	bhi.n	80080bc <__multiply+0x98>
 80080aa:	2f00      	cmp	r7, #0
 80080ac:	dc55      	bgt.n	800815a <__multiply+0x136>
 80080ae:	6107      	str	r7, [r0, #16]
 80080b0:	b005      	add	sp, #20
 80080b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b6:	f843 2b04 	str.w	r2, [r3], #4
 80080ba:	e7db      	b.n	8008074 <__multiply+0x50>
 80080bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80080c0:	f1ba 0f00 	cmp.w	sl, #0
 80080c4:	d020      	beq.n	8008108 <__multiply+0xe4>
 80080c6:	f105 0e14 	add.w	lr, r5, #20
 80080ca:	46b1      	mov	r9, r6
 80080cc:	2200      	movs	r2, #0
 80080ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 80080d2:	f8d9 b000 	ldr.w	fp, [r9]
 80080d6:	b2a1      	uxth	r1, r4
 80080d8:	fa1f fb8b 	uxth.w	fp, fp
 80080dc:	fb0a b101 	mla	r1, sl, r1, fp
 80080e0:	4411      	add	r1, r2
 80080e2:	f8d9 2000 	ldr.w	r2, [r9]
 80080e6:	0c24      	lsrs	r4, r4, #16
 80080e8:	0c12      	lsrs	r2, r2, #16
 80080ea:	fb0a 2404 	mla	r4, sl, r4, r2
 80080ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80080f2:	b289      	uxth	r1, r1
 80080f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80080f8:	45f4      	cmp	ip, lr
 80080fa:	f849 1b04 	str.w	r1, [r9], #4
 80080fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008102:	d8e4      	bhi.n	80080ce <__multiply+0xaa>
 8008104:	9901      	ldr	r1, [sp, #4]
 8008106:	5072      	str	r2, [r6, r1]
 8008108:	9a03      	ldr	r2, [sp, #12]
 800810a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800810e:	3304      	adds	r3, #4
 8008110:	f1b9 0f00 	cmp.w	r9, #0
 8008114:	d01f      	beq.n	8008156 <__multiply+0x132>
 8008116:	6834      	ldr	r4, [r6, #0]
 8008118:	f105 0114 	add.w	r1, r5, #20
 800811c:	46b6      	mov	lr, r6
 800811e:	f04f 0a00 	mov.w	sl, #0
 8008122:	880a      	ldrh	r2, [r1, #0]
 8008124:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008128:	fb09 b202 	mla	r2, r9, r2, fp
 800812c:	4492      	add	sl, r2
 800812e:	b2a4      	uxth	r4, r4
 8008130:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008134:	f84e 4b04 	str.w	r4, [lr], #4
 8008138:	f851 4b04 	ldr.w	r4, [r1], #4
 800813c:	f8be 2000 	ldrh.w	r2, [lr]
 8008140:	0c24      	lsrs	r4, r4, #16
 8008142:	fb09 2404 	mla	r4, r9, r4, r2
 8008146:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800814a:	458c      	cmp	ip, r1
 800814c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008150:	d8e7      	bhi.n	8008122 <__multiply+0xfe>
 8008152:	9a01      	ldr	r2, [sp, #4]
 8008154:	50b4      	str	r4, [r6, r2]
 8008156:	3604      	adds	r6, #4
 8008158:	e7a3      	b.n	80080a2 <__multiply+0x7e>
 800815a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1a5      	bne.n	80080ae <__multiply+0x8a>
 8008162:	3f01      	subs	r7, #1
 8008164:	e7a1      	b.n	80080aa <__multiply+0x86>
 8008166:	bf00      	nop
 8008168:	0800b1cb 	.word	0x0800b1cb
 800816c:	0800b1dc 	.word	0x0800b1dc

08008170 <__pow5mult>:
 8008170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008174:	4615      	mov	r5, r2
 8008176:	f012 0203 	ands.w	r2, r2, #3
 800817a:	4606      	mov	r6, r0
 800817c:	460f      	mov	r7, r1
 800817e:	d007      	beq.n	8008190 <__pow5mult+0x20>
 8008180:	4c25      	ldr	r4, [pc, #148]	; (8008218 <__pow5mult+0xa8>)
 8008182:	3a01      	subs	r2, #1
 8008184:	2300      	movs	r3, #0
 8008186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800818a:	f7ff fe9b 	bl	8007ec4 <__multadd>
 800818e:	4607      	mov	r7, r0
 8008190:	10ad      	asrs	r5, r5, #2
 8008192:	d03d      	beq.n	8008210 <__pow5mult+0xa0>
 8008194:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008196:	b97c      	cbnz	r4, 80081b8 <__pow5mult+0x48>
 8008198:	2010      	movs	r0, #16
 800819a:	f7ff fe29 	bl	8007df0 <malloc>
 800819e:	4602      	mov	r2, r0
 80081a0:	6270      	str	r0, [r6, #36]	; 0x24
 80081a2:	b928      	cbnz	r0, 80081b0 <__pow5mult+0x40>
 80081a4:	4b1d      	ldr	r3, [pc, #116]	; (800821c <__pow5mult+0xac>)
 80081a6:	481e      	ldr	r0, [pc, #120]	; (8008220 <__pow5mult+0xb0>)
 80081a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80081ac:	f000 fbcc 	bl	8008948 <__assert_func>
 80081b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081b4:	6004      	str	r4, [r0, #0]
 80081b6:	60c4      	str	r4, [r0, #12]
 80081b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80081bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081c0:	b94c      	cbnz	r4, 80081d6 <__pow5mult+0x66>
 80081c2:	f240 2171 	movw	r1, #625	; 0x271
 80081c6:	4630      	mov	r0, r6
 80081c8:	f7ff ff16 	bl	8007ff8 <__i2b>
 80081cc:	2300      	movs	r3, #0
 80081ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80081d2:	4604      	mov	r4, r0
 80081d4:	6003      	str	r3, [r0, #0]
 80081d6:	f04f 0900 	mov.w	r9, #0
 80081da:	07eb      	lsls	r3, r5, #31
 80081dc:	d50a      	bpl.n	80081f4 <__pow5mult+0x84>
 80081de:	4639      	mov	r1, r7
 80081e0:	4622      	mov	r2, r4
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7ff ff1e 	bl	8008024 <__multiply>
 80081e8:	4639      	mov	r1, r7
 80081ea:	4680      	mov	r8, r0
 80081ec:	4630      	mov	r0, r6
 80081ee:	f7ff fe47 	bl	8007e80 <_Bfree>
 80081f2:	4647      	mov	r7, r8
 80081f4:	106d      	asrs	r5, r5, #1
 80081f6:	d00b      	beq.n	8008210 <__pow5mult+0xa0>
 80081f8:	6820      	ldr	r0, [r4, #0]
 80081fa:	b938      	cbnz	r0, 800820c <__pow5mult+0x9c>
 80081fc:	4622      	mov	r2, r4
 80081fe:	4621      	mov	r1, r4
 8008200:	4630      	mov	r0, r6
 8008202:	f7ff ff0f 	bl	8008024 <__multiply>
 8008206:	6020      	str	r0, [r4, #0]
 8008208:	f8c0 9000 	str.w	r9, [r0]
 800820c:	4604      	mov	r4, r0
 800820e:	e7e4      	b.n	80081da <__pow5mult+0x6a>
 8008210:	4638      	mov	r0, r7
 8008212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008216:	bf00      	nop
 8008218:	0800b330 	.word	0x0800b330
 800821c:	0800b155 	.word	0x0800b155
 8008220:	0800b1dc 	.word	0x0800b1dc

08008224 <__lshift>:
 8008224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008228:	460c      	mov	r4, r1
 800822a:	6849      	ldr	r1, [r1, #4]
 800822c:	6923      	ldr	r3, [r4, #16]
 800822e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008232:	68a3      	ldr	r3, [r4, #8]
 8008234:	4607      	mov	r7, r0
 8008236:	4691      	mov	r9, r2
 8008238:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800823c:	f108 0601 	add.w	r6, r8, #1
 8008240:	42b3      	cmp	r3, r6
 8008242:	db0b      	blt.n	800825c <__lshift+0x38>
 8008244:	4638      	mov	r0, r7
 8008246:	f7ff fddb 	bl	8007e00 <_Balloc>
 800824a:	4605      	mov	r5, r0
 800824c:	b948      	cbnz	r0, 8008262 <__lshift+0x3e>
 800824e:	4602      	mov	r2, r0
 8008250:	4b28      	ldr	r3, [pc, #160]	; (80082f4 <__lshift+0xd0>)
 8008252:	4829      	ldr	r0, [pc, #164]	; (80082f8 <__lshift+0xd4>)
 8008254:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008258:	f000 fb76 	bl	8008948 <__assert_func>
 800825c:	3101      	adds	r1, #1
 800825e:	005b      	lsls	r3, r3, #1
 8008260:	e7ee      	b.n	8008240 <__lshift+0x1c>
 8008262:	2300      	movs	r3, #0
 8008264:	f100 0114 	add.w	r1, r0, #20
 8008268:	f100 0210 	add.w	r2, r0, #16
 800826c:	4618      	mov	r0, r3
 800826e:	4553      	cmp	r3, sl
 8008270:	db33      	blt.n	80082da <__lshift+0xb6>
 8008272:	6920      	ldr	r0, [r4, #16]
 8008274:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008278:	f104 0314 	add.w	r3, r4, #20
 800827c:	f019 091f 	ands.w	r9, r9, #31
 8008280:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008284:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008288:	d02b      	beq.n	80082e2 <__lshift+0xbe>
 800828a:	f1c9 0e20 	rsb	lr, r9, #32
 800828e:	468a      	mov	sl, r1
 8008290:	2200      	movs	r2, #0
 8008292:	6818      	ldr	r0, [r3, #0]
 8008294:	fa00 f009 	lsl.w	r0, r0, r9
 8008298:	4302      	orrs	r2, r0
 800829a:	f84a 2b04 	str.w	r2, [sl], #4
 800829e:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a2:	459c      	cmp	ip, r3
 80082a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80082a8:	d8f3      	bhi.n	8008292 <__lshift+0x6e>
 80082aa:	ebac 0304 	sub.w	r3, ip, r4
 80082ae:	3b15      	subs	r3, #21
 80082b0:	f023 0303 	bic.w	r3, r3, #3
 80082b4:	3304      	adds	r3, #4
 80082b6:	f104 0015 	add.w	r0, r4, #21
 80082ba:	4584      	cmp	ip, r0
 80082bc:	bf38      	it	cc
 80082be:	2304      	movcc	r3, #4
 80082c0:	50ca      	str	r2, [r1, r3]
 80082c2:	b10a      	cbz	r2, 80082c8 <__lshift+0xa4>
 80082c4:	f108 0602 	add.w	r6, r8, #2
 80082c8:	3e01      	subs	r6, #1
 80082ca:	4638      	mov	r0, r7
 80082cc:	612e      	str	r6, [r5, #16]
 80082ce:	4621      	mov	r1, r4
 80082d0:	f7ff fdd6 	bl	8007e80 <_Bfree>
 80082d4:	4628      	mov	r0, r5
 80082d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082da:	f842 0f04 	str.w	r0, [r2, #4]!
 80082de:	3301      	adds	r3, #1
 80082e0:	e7c5      	b.n	800826e <__lshift+0x4a>
 80082e2:	3904      	subs	r1, #4
 80082e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80082ec:	459c      	cmp	ip, r3
 80082ee:	d8f9      	bhi.n	80082e4 <__lshift+0xc0>
 80082f0:	e7ea      	b.n	80082c8 <__lshift+0xa4>
 80082f2:	bf00      	nop
 80082f4:	0800b1cb 	.word	0x0800b1cb
 80082f8:	0800b1dc 	.word	0x0800b1dc

080082fc <__mcmp>:
 80082fc:	b530      	push	{r4, r5, lr}
 80082fe:	6902      	ldr	r2, [r0, #16]
 8008300:	690c      	ldr	r4, [r1, #16]
 8008302:	1b12      	subs	r2, r2, r4
 8008304:	d10e      	bne.n	8008324 <__mcmp+0x28>
 8008306:	f100 0314 	add.w	r3, r0, #20
 800830a:	3114      	adds	r1, #20
 800830c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008310:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008314:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008318:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800831c:	42a5      	cmp	r5, r4
 800831e:	d003      	beq.n	8008328 <__mcmp+0x2c>
 8008320:	d305      	bcc.n	800832e <__mcmp+0x32>
 8008322:	2201      	movs	r2, #1
 8008324:	4610      	mov	r0, r2
 8008326:	bd30      	pop	{r4, r5, pc}
 8008328:	4283      	cmp	r3, r0
 800832a:	d3f3      	bcc.n	8008314 <__mcmp+0x18>
 800832c:	e7fa      	b.n	8008324 <__mcmp+0x28>
 800832e:	f04f 32ff 	mov.w	r2, #4294967295
 8008332:	e7f7      	b.n	8008324 <__mcmp+0x28>

08008334 <__mdiff>:
 8008334:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008338:	460c      	mov	r4, r1
 800833a:	4606      	mov	r6, r0
 800833c:	4611      	mov	r1, r2
 800833e:	4620      	mov	r0, r4
 8008340:	4617      	mov	r7, r2
 8008342:	f7ff ffdb 	bl	80082fc <__mcmp>
 8008346:	1e05      	subs	r5, r0, #0
 8008348:	d110      	bne.n	800836c <__mdiff+0x38>
 800834a:	4629      	mov	r1, r5
 800834c:	4630      	mov	r0, r6
 800834e:	f7ff fd57 	bl	8007e00 <_Balloc>
 8008352:	b930      	cbnz	r0, 8008362 <__mdiff+0x2e>
 8008354:	4b39      	ldr	r3, [pc, #228]	; (800843c <__mdiff+0x108>)
 8008356:	4602      	mov	r2, r0
 8008358:	f240 2132 	movw	r1, #562	; 0x232
 800835c:	4838      	ldr	r0, [pc, #224]	; (8008440 <__mdiff+0x10c>)
 800835e:	f000 faf3 	bl	8008948 <__assert_func>
 8008362:	2301      	movs	r3, #1
 8008364:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836c:	bfa4      	itt	ge
 800836e:	463b      	movge	r3, r7
 8008370:	4627      	movge	r7, r4
 8008372:	4630      	mov	r0, r6
 8008374:	6879      	ldr	r1, [r7, #4]
 8008376:	bfa6      	itte	ge
 8008378:	461c      	movge	r4, r3
 800837a:	2500      	movge	r5, #0
 800837c:	2501      	movlt	r5, #1
 800837e:	f7ff fd3f 	bl	8007e00 <_Balloc>
 8008382:	b920      	cbnz	r0, 800838e <__mdiff+0x5a>
 8008384:	4b2d      	ldr	r3, [pc, #180]	; (800843c <__mdiff+0x108>)
 8008386:	4602      	mov	r2, r0
 8008388:	f44f 7110 	mov.w	r1, #576	; 0x240
 800838c:	e7e6      	b.n	800835c <__mdiff+0x28>
 800838e:	693e      	ldr	r6, [r7, #16]
 8008390:	60c5      	str	r5, [r0, #12]
 8008392:	6925      	ldr	r5, [r4, #16]
 8008394:	f107 0114 	add.w	r1, r7, #20
 8008398:	f104 0914 	add.w	r9, r4, #20
 800839c:	f100 0e14 	add.w	lr, r0, #20
 80083a0:	f107 0210 	add.w	r2, r7, #16
 80083a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80083a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80083ac:	46f2      	mov	sl, lr
 80083ae:	2700      	movs	r7, #0
 80083b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80083b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80083b8:	fa1f f883 	uxth.w	r8, r3
 80083bc:	fa17 f78b 	uxtah	r7, r7, fp
 80083c0:	0c1b      	lsrs	r3, r3, #16
 80083c2:	eba7 0808 	sub.w	r8, r7, r8
 80083c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80083ce:	fa1f f888 	uxth.w	r8, r8
 80083d2:	141f      	asrs	r7, r3, #16
 80083d4:	454d      	cmp	r5, r9
 80083d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80083da:	f84a 3b04 	str.w	r3, [sl], #4
 80083de:	d8e7      	bhi.n	80083b0 <__mdiff+0x7c>
 80083e0:	1b2b      	subs	r3, r5, r4
 80083e2:	3b15      	subs	r3, #21
 80083e4:	f023 0303 	bic.w	r3, r3, #3
 80083e8:	3304      	adds	r3, #4
 80083ea:	3415      	adds	r4, #21
 80083ec:	42a5      	cmp	r5, r4
 80083ee:	bf38      	it	cc
 80083f0:	2304      	movcc	r3, #4
 80083f2:	4419      	add	r1, r3
 80083f4:	4473      	add	r3, lr
 80083f6:	469e      	mov	lr, r3
 80083f8:	460d      	mov	r5, r1
 80083fa:	4565      	cmp	r5, ip
 80083fc:	d30e      	bcc.n	800841c <__mdiff+0xe8>
 80083fe:	f10c 0203 	add.w	r2, ip, #3
 8008402:	1a52      	subs	r2, r2, r1
 8008404:	f022 0203 	bic.w	r2, r2, #3
 8008408:	3903      	subs	r1, #3
 800840a:	458c      	cmp	ip, r1
 800840c:	bf38      	it	cc
 800840e:	2200      	movcc	r2, #0
 8008410:	441a      	add	r2, r3
 8008412:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008416:	b17b      	cbz	r3, 8008438 <__mdiff+0x104>
 8008418:	6106      	str	r6, [r0, #16]
 800841a:	e7a5      	b.n	8008368 <__mdiff+0x34>
 800841c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008420:	fa17 f488 	uxtah	r4, r7, r8
 8008424:	1422      	asrs	r2, r4, #16
 8008426:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800842a:	b2a4      	uxth	r4, r4
 800842c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008430:	f84e 4b04 	str.w	r4, [lr], #4
 8008434:	1417      	asrs	r7, r2, #16
 8008436:	e7e0      	b.n	80083fa <__mdiff+0xc6>
 8008438:	3e01      	subs	r6, #1
 800843a:	e7ea      	b.n	8008412 <__mdiff+0xde>
 800843c:	0800b1cb 	.word	0x0800b1cb
 8008440:	0800b1dc 	.word	0x0800b1dc

08008444 <__d2b>:
 8008444:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008448:	4689      	mov	r9, r1
 800844a:	2101      	movs	r1, #1
 800844c:	ec57 6b10 	vmov	r6, r7, d0
 8008450:	4690      	mov	r8, r2
 8008452:	f7ff fcd5 	bl	8007e00 <_Balloc>
 8008456:	4604      	mov	r4, r0
 8008458:	b930      	cbnz	r0, 8008468 <__d2b+0x24>
 800845a:	4602      	mov	r2, r0
 800845c:	4b25      	ldr	r3, [pc, #148]	; (80084f4 <__d2b+0xb0>)
 800845e:	4826      	ldr	r0, [pc, #152]	; (80084f8 <__d2b+0xb4>)
 8008460:	f240 310a 	movw	r1, #778	; 0x30a
 8008464:	f000 fa70 	bl	8008948 <__assert_func>
 8008468:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800846c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008470:	bb35      	cbnz	r5, 80084c0 <__d2b+0x7c>
 8008472:	2e00      	cmp	r6, #0
 8008474:	9301      	str	r3, [sp, #4]
 8008476:	d028      	beq.n	80084ca <__d2b+0x86>
 8008478:	4668      	mov	r0, sp
 800847a:	9600      	str	r6, [sp, #0]
 800847c:	f7ff fd8c 	bl	8007f98 <__lo0bits>
 8008480:	9900      	ldr	r1, [sp, #0]
 8008482:	b300      	cbz	r0, 80084c6 <__d2b+0x82>
 8008484:	9a01      	ldr	r2, [sp, #4]
 8008486:	f1c0 0320 	rsb	r3, r0, #32
 800848a:	fa02 f303 	lsl.w	r3, r2, r3
 800848e:	430b      	orrs	r3, r1
 8008490:	40c2      	lsrs	r2, r0
 8008492:	6163      	str	r3, [r4, #20]
 8008494:	9201      	str	r2, [sp, #4]
 8008496:	9b01      	ldr	r3, [sp, #4]
 8008498:	61a3      	str	r3, [r4, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	bf14      	ite	ne
 800849e:	2202      	movne	r2, #2
 80084a0:	2201      	moveq	r2, #1
 80084a2:	6122      	str	r2, [r4, #16]
 80084a4:	b1d5      	cbz	r5, 80084dc <__d2b+0x98>
 80084a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084aa:	4405      	add	r5, r0
 80084ac:	f8c9 5000 	str.w	r5, [r9]
 80084b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084b4:	f8c8 0000 	str.w	r0, [r8]
 80084b8:	4620      	mov	r0, r4
 80084ba:	b003      	add	sp, #12
 80084bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084c4:	e7d5      	b.n	8008472 <__d2b+0x2e>
 80084c6:	6161      	str	r1, [r4, #20]
 80084c8:	e7e5      	b.n	8008496 <__d2b+0x52>
 80084ca:	a801      	add	r0, sp, #4
 80084cc:	f7ff fd64 	bl	8007f98 <__lo0bits>
 80084d0:	9b01      	ldr	r3, [sp, #4]
 80084d2:	6163      	str	r3, [r4, #20]
 80084d4:	2201      	movs	r2, #1
 80084d6:	6122      	str	r2, [r4, #16]
 80084d8:	3020      	adds	r0, #32
 80084da:	e7e3      	b.n	80084a4 <__d2b+0x60>
 80084dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084e4:	f8c9 0000 	str.w	r0, [r9]
 80084e8:	6918      	ldr	r0, [r3, #16]
 80084ea:	f7ff fd35 	bl	8007f58 <__hi0bits>
 80084ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084f2:	e7df      	b.n	80084b4 <__d2b+0x70>
 80084f4:	0800b1cb 	.word	0x0800b1cb
 80084f8:	0800b1dc 	.word	0x0800b1dc

080084fc <_calloc_r>:
 80084fc:	b513      	push	{r0, r1, r4, lr}
 80084fe:	434a      	muls	r2, r1
 8008500:	4611      	mov	r1, r2
 8008502:	9201      	str	r2, [sp, #4]
 8008504:	f000 f85a 	bl	80085bc <_malloc_r>
 8008508:	4604      	mov	r4, r0
 800850a:	b118      	cbz	r0, 8008514 <_calloc_r+0x18>
 800850c:	9a01      	ldr	r2, [sp, #4]
 800850e:	2100      	movs	r1, #0
 8008510:	f7fe f95e 	bl	80067d0 <memset>
 8008514:	4620      	mov	r0, r4
 8008516:	b002      	add	sp, #8
 8008518:	bd10      	pop	{r4, pc}
	...

0800851c <_free_r>:
 800851c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800851e:	2900      	cmp	r1, #0
 8008520:	d048      	beq.n	80085b4 <_free_r+0x98>
 8008522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008526:	9001      	str	r0, [sp, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	f1a1 0404 	sub.w	r4, r1, #4
 800852e:	bfb8      	it	lt
 8008530:	18e4      	addlt	r4, r4, r3
 8008532:	f000 fa4b 	bl	80089cc <__malloc_lock>
 8008536:	4a20      	ldr	r2, [pc, #128]	; (80085b8 <_free_r+0x9c>)
 8008538:	9801      	ldr	r0, [sp, #4]
 800853a:	6813      	ldr	r3, [r2, #0]
 800853c:	4615      	mov	r5, r2
 800853e:	b933      	cbnz	r3, 800854e <_free_r+0x32>
 8008540:	6063      	str	r3, [r4, #4]
 8008542:	6014      	str	r4, [r2, #0]
 8008544:	b003      	add	sp, #12
 8008546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800854a:	f000 ba45 	b.w	80089d8 <__malloc_unlock>
 800854e:	42a3      	cmp	r3, r4
 8008550:	d90b      	bls.n	800856a <_free_r+0x4e>
 8008552:	6821      	ldr	r1, [r4, #0]
 8008554:	1862      	adds	r2, r4, r1
 8008556:	4293      	cmp	r3, r2
 8008558:	bf04      	itt	eq
 800855a:	681a      	ldreq	r2, [r3, #0]
 800855c:	685b      	ldreq	r3, [r3, #4]
 800855e:	6063      	str	r3, [r4, #4]
 8008560:	bf04      	itt	eq
 8008562:	1852      	addeq	r2, r2, r1
 8008564:	6022      	streq	r2, [r4, #0]
 8008566:	602c      	str	r4, [r5, #0]
 8008568:	e7ec      	b.n	8008544 <_free_r+0x28>
 800856a:	461a      	mov	r2, r3
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	b10b      	cbz	r3, 8008574 <_free_r+0x58>
 8008570:	42a3      	cmp	r3, r4
 8008572:	d9fa      	bls.n	800856a <_free_r+0x4e>
 8008574:	6811      	ldr	r1, [r2, #0]
 8008576:	1855      	adds	r5, r2, r1
 8008578:	42a5      	cmp	r5, r4
 800857a:	d10b      	bne.n	8008594 <_free_r+0x78>
 800857c:	6824      	ldr	r4, [r4, #0]
 800857e:	4421      	add	r1, r4
 8008580:	1854      	adds	r4, r2, r1
 8008582:	42a3      	cmp	r3, r4
 8008584:	6011      	str	r1, [r2, #0]
 8008586:	d1dd      	bne.n	8008544 <_free_r+0x28>
 8008588:	681c      	ldr	r4, [r3, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	6053      	str	r3, [r2, #4]
 800858e:	4421      	add	r1, r4
 8008590:	6011      	str	r1, [r2, #0]
 8008592:	e7d7      	b.n	8008544 <_free_r+0x28>
 8008594:	d902      	bls.n	800859c <_free_r+0x80>
 8008596:	230c      	movs	r3, #12
 8008598:	6003      	str	r3, [r0, #0]
 800859a:	e7d3      	b.n	8008544 <_free_r+0x28>
 800859c:	6825      	ldr	r5, [r4, #0]
 800859e:	1961      	adds	r1, r4, r5
 80085a0:	428b      	cmp	r3, r1
 80085a2:	bf04      	itt	eq
 80085a4:	6819      	ldreq	r1, [r3, #0]
 80085a6:	685b      	ldreq	r3, [r3, #4]
 80085a8:	6063      	str	r3, [r4, #4]
 80085aa:	bf04      	itt	eq
 80085ac:	1949      	addeq	r1, r1, r5
 80085ae:	6021      	streq	r1, [r4, #0]
 80085b0:	6054      	str	r4, [r2, #4]
 80085b2:	e7c7      	b.n	8008544 <_free_r+0x28>
 80085b4:	b003      	add	sp, #12
 80085b6:	bd30      	pop	{r4, r5, pc}
 80085b8:	2000063c 	.word	0x2000063c

080085bc <_malloc_r>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	1ccd      	adds	r5, r1, #3
 80085c0:	f025 0503 	bic.w	r5, r5, #3
 80085c4:	3508      	adds	r5, #8
 80085c6:	2d0c      	cmp	r5, #12
 80085c8:	bf38      	it	cc
 80085ca:	250c      	movcc	r5, #12
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	4606      	mov	r6, r0
 80085d0:	db01      	blt.n	80085d6 <_malloc_r+0x1a>
 80085d2:	42a9      	cmp	r1, r5
 80085d4:	d903      	bls.n	80085de <_malloc_r+0x22>
 80085d6:	230c      	movs	r3, #12
 80085d8:	6033      	str	r3, [r6, #0]
 80085da:	2000      	movs	r0, #0
 80085dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085de:	f000 f9f5 	bl	80089cc <__malloc_lock>
 80085e2:	4921      	ldr	r1, [pc, #132]	; (8008668 <_malloc_r+0xac>)
 80085e4:	680a      	ldr	r2, [r1, #0]
 80085e6:	4614      	mov	r4, r2
 80085e8:	b99c      	cbnz	r4, 8008612 <_malloc_r+0x56>
 80085ea:	4f20      	ldr	r7, [pc, #128]	; (800866c <_malloc_r+0xb0>)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	b923      	cbnz	r3, 80085fa <_malloc_r+0x3e>
 80085f0:	4621      	mov	r1, r4
 80085f2:	4630      	mov	r0, r6
 80085f4:	f000 f998 	bl	8008928 <_sbrk_r>
 80085f8:	6038      	str	r0, [r7, #0]
 80085fa:	4629      	mov	r1, r5
 80085fc:	4630      	mov	r0, r6
 80085fe:	f000 f993 	bl	8008928 <_sbrk_r>
 8008602:	1c43      	adds	r3, r0, #1
 8008604:	d123      	bne.n	800864e <_malloc_r+0x92>
 8008606:	230c      	movs	r3, #12
 8008608:	6033      	str	r3, [r6, #0]
 800860a:	4630      	mov	r0, r6
 800860c:	f000 f9e4 	bl	80089d8 <__malloc_unlock>
 8008610:	e7e3      	b.n	80085da <_malloc_r+0x1e>
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	1b5b      	subs	r3, r3, r5
 8008616:	d417      	bmi.n	8008648 <_malloc_r+0x8c>
 8008618:	2b0b      	cmp	r3, #11
 800861a:	d903      	bls.n	8008624 <_malloc_r+0x68>
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	441c      	add	r4, r3
 8008620:	6025      	str	r5, [r4, #0]
 8008622:	e004      	b.n	800862e <_malloc_r+0x72>
 8008624:	6863      	ldr	r3, [r4, #4]
 8008626:	42a2      	cmp	r2, r4
 8008628:	bf0c      	ite	eq
 800862a:	600b      	streq	r3, [r1, #0]
 800862c:	6053      	strne	r3, [r2, #4]
 800862e:	4630      	mov	r0, r6
 8008630:	f000 f9d2 	bl	80089d8 <__malloc_unlock>
 8008634:	f104 000b 	add.w	r0, r4, #11
 8008638:	1d23      	adds	r3, r4, #4
 800863a:	f020 0007 	bic.w	r0, r0, #7
 800863e:	1ac2      	subs	r2, r0, r3
 8008640:	d0cc      	beq.n	80085dc <_malloc_r+0x20>
 8008642:	1a1b      	subs	r3, r3, r0
 8008644:	50a3      	str	r3, [r4, r2]
 8008646:	e7c9      	b.n	80085dc <_malloc_r+0x20>
 8008648:	4622      	mov	r2, r4
 800864a:	6864      	ldr	r4, [r4, #4]
 800864c:	e7cc      	b.n	80085e8 <_malloc_r+0x2c>
 800864e:	1cc4      	adds	r4, r0, #3
 8008650:	f024 0403 	bic.w	r4, r4, #3
 8008654:	42a0      	cmp	r0, r4
 8008656:	d0e3      	beq.n	8008620 <_malloc_r+0x64>
 8008658:	1a21      	subs	r1, r4, r0
 800865a:	4630      	mov	r0, r6
 800865c:	f000 f964 	bl	8008928 <_sbrk_r>
 8008660:	3001      	adds	r0, #1
 8008662:	d1dd      	bne.n	8008620 <_malloc_r+0x64>
 8008664:	e7cf      	b.n	8008606 <_malloc_r+0x4a>
 8008666:	bf00      	nop
 8008668:	2000063c 	.word	0x2000063c
 800866c:	20000640 	.word	0x20000640

08008670 <__ssputs_r>:
 8008670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	688e      	ldr	r6, [r1, #8]
 8008676:	429e      	cmp	r6, r3
 8008678:	4682      	mov	sl, r0
 800867a:	460c      	mov	r4, r1
 800867c:	4690      	mov	r8, r2
 800867e:	461f      	mov	r7, r3
 8008680:	d838      	bhi.n	80086f4 <__ssputs_r+0x84>
 8008682:	898a      	ldrh	r2, [r1, #12]
 8008684:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008688:	d032      	beq.n	80086f0 <__ssputs_r+0x80>
 800868a:	6825      	ldr	r5, [r4, #0]
 800868c:	6909      	ldr	r1, [r1, #16]
 800868e:	eba5 0901 	sub.w	r9, r5, r1
 8008692:	6965      	ldr	r5, [r4, #20]
 8008694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800869c:	3301      	adds	r3, #1
 800869e:	444b      	add	r3, r9
 80086a0:	106d      	asrs	r5, r5, #1
 80086a2:	429d      	cmp	r5, r3
 80086a4:	bf38      	it	cc
 80086a6:	461d      	movcc	r5, r3
 80086a8:	0553      	lsls	r3, r2, #21
 80086aa:	d531      	bpl.n	8008710 <__ssputs_r+0xa0>
 80086ac:	4629      	mov	r1, r5
 80086ae:	f7ff ff85 	bl	80085bc <_malloc_r>
 80086b2:	4606      	mov	r6, r0
 80086b4:	b950      	cbnz	r0, 80086cc <__ssputs_r+0x5c>
 80086b6:	230c      	movs	r3, #12
 80086b8:	f8ca 3000 	str.w	r3, [sl]
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c2:	81a3      	strh	r3, [r4, #12]
 80086c4:	f04f 30ff 	mov.w	r0, #4294967295
 80086c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086cc:	6921      	ldr	r1, [r4, #16]
 80086ce:	464a      	mov	r2, r9
 80086d0:	f7fe f856 	bl	8006780 <memcpy>
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086de:	81a3      	strh	r3, [r4, #12]
 80086e0:	6126      	str	r6, [r4, #16]
 80086e2:	6165      	str	r5, [r4, #20]
 80086e4:	444e      	add	r6, r9
 80086e6:	eba5 0509 	sub.w	r5, r5, r9
 80086ea:	6026      	str	r6, [r4, #0]
 80086ec:	60a5      	str	r5, [r4, #8]
 80086ee:	463e      	mov	r6, r7
 80086f0:	42be      	cmp	r6, r7
 80086f2:	d900      	bls.n	80086f6 <__ssputs_r+0x86>
 80086f4:	463e      	mov	r6, r7
 80086f6:	4632      	mov	r2, r6
 80086f8:	6820      	ldr	r0, [r4, #0]
 80086fa:	4641      	mov	r1, r8
 80086fc:	f7fe f84e 	bl	800679c <memmove>
 8008700:	68a3      	ldr	r3, [r4, #8]
 8008702:	6822      	ldr	r2, [r4, #0]
 8008704:	1b9b      	subs	r3, r3, r6
 8008706:	4432      	add	r2, r6
 8008708:	60a3      	str	r3, [r4, #8]
 800870a:	6022      	str	r2, [r4, #0]
 800870c:	2000      	movs	r0, #0
 800870e:	e7db      	b.n	80086c8 <__ssputs_r+0x58>
 8008710:	462a      	mov	r2, r5
 8008712:	f000 f967 	bl	80089e4 <_realloc_r>
 8008716:	4606      	mov	r6, r0
 8008718:	2800      	cmp	r0, #0
 800871a:	d1e1      	bne.n	80086e0 <__ssputs_r+0x70>
 800871c:	6921      	ldr	r1, [r4, #16]
 800871e:	4650      	mov	r0, sl
 8008720:	f7ff fefc 	bl	800851c <_free_r>
 8008724:	e7c7      	b.n	80086b6 <__ssputs_r+0x46>
	...

08008728 <_svfiprintf_r>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	4698      	mov	r8, r3
 800872e:	898b      	ldrh	r3, [r1, #12]
 8008730:	061b      	lsls	r3, r3, #24
 8008732:	b09d      	sub	sp, #116	; 0x74
 8008734:	4607      	mov	r7, r0
 8008736:	460d      	mov	r5, r1
 8008738:	4614      	mov	r4, r2
 800873a:	d50e      	bpl.n	800875a <_svfiprintf_r+0x32>
 800873c:	690b      	ldr	r3, [r1, #16]
 800873e:	b963      	cbnz	r3, 800875a <_svfiprintf_r+0x32>
 8008740:	2140      	movs	r1, #64	; 0x40
 8008742:	f7ff ff3b 	bl	80085bc <_malloc_r>
 8008746:	6028      	str	r0, [r5, #0]
 8008748:	6128      	str	r0, [r5, #16]
 800874a:	b920      	cbnz	r0, 8008756 <_svfiprintf_r+0x2e>
 800874c:	230c      	movs	r3, #12
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	f04f 30ff 	mov.w	r0, #4294967295
 8008754:	e0d1      	b.n	80088fa <_svfiprintf_r+0x1d2>
 8008756:	2340      	movs	r3, #64	; 0x40
 8008758:	616b      	str	r3, [r5, #20]
 800875a:	2300      	movs	r3, #0
 800875c:	9309      	str	r3, [sp, #36]	; 0x24
 800875e:	2320      	movs	r3, #32
 8008760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008764:	f8cd 800c 	str.w	r8, [sp, #12]
 8008768:	2330      	movs	r3, #48	; 0x30
 800876a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008914 <_svfiprintf_r+0x1ec>
 800876e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008772:	f04f 0901 	mov.w	r9, #1
 8008776:	4623      	mov	r3, r4
 8008778:	469a      	mov	sl, r3
 800877a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800877e:	b10a      	cbz	r2, 8008784 <_svfiprintf_r+0x5c>
 8008780:	2a25      	cmp	r2, #37	; 0x25
 8008782:	d1f9      	bne.n	8008778 <_svfiprintf_r+0x50>
 8008784:	ebba 0b04 	subs.w	fp, sl, r4
 8008788:	d00b      	beq.n	80087a2 <_svfiprintf_r+0x7a>
 800878a:	465b      	mov	r3, fp
 800878c:	4622      	mov	r2, r4
 800878e:	4629      	mov	r1, r5
 8008790:	4638      	mov	r0, r7
 8008792:	f7ff ff6d 	bl	8008670 <__ssputs_r>
 8008796:	3001      	adds	r0, #1
 8008798:	f000 80aa 	beq.w	80088f0 <_svfiprintf_r+0x1c8>
 800879c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800879e:	445a      	add	r2, fp
 80087a0:	9209      	str	r2, [sp, #36]	; 0x24
 80087a2:	f89a 3000 	ldrb.w	r3, [sl]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 80a2 	beq.w	80088f0 <_svfiprintf_r+0x1c8>
 80087ac:	2300      	movs	r3, #0
 80087ae:	f04f 32ff 	mov.w	r2, #4294967295
 80087b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087b6:	f10a 0a01 	add.w	sl, sl, #1
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	9307      	str	r3, [sp, #28]
 80087be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087c2:	931a      	str	r3, [sp, #104]	; 0x68
 80087c4:	4654      	mov	r4, sl
 80087c6:	2205      	movs	r2, #5
 80087c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087cc:	4851      	ldr	r0, [pc, #324]	; (8008914 <_svfiprintf_r+0x1ec>)
 80087ce:	f7f7 fd07 	bl	80001e0 <memchr>
 80087d2:	9a04      	ldr	r2, [sp, #16]
 80087d4:	b9d8      	cbnz	r0, 800880e <_svfiprintf_r+0xe6>
 80087d6:	06d0      	lsls	r0, r2, #27
 80087d8:	bf44      	itt	mi
 80087da:	2320      	movmi	r3, #32
 80087dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087e0:	0711      	lsls	r1, r2, #28
 80087e2:	bf44      	itt	mi
 80087e4:	232b      	movmi	r3, #43	; 0x2b
 80087e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ea:	f89a 3000 	ldrb.w	r3, [sl]
 80087ee:	2b2a      	cmp	r3, #42	; 0x2a
 80087f0:	d015      	beq.n	800881e <_svfiprintf_r+0xf6>
 80087f2:	9a07      	ldr	r2, [sp, #28]
 80087f4:	4654      	mov	r4, sl
 80087f6:	2000      	movs	r0, #0
 80087f8:	f04f 0c0a 	mov.w	ip, #10
 80087fc:	4621      	mov	r1, r4
 80087fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008802:	3b30      	subs	r3, #48	; 0x30
 8008804:	2b09      	cmp	r3, #9
 8008806:	d94e      	bls.n	80088a6 <_svfiprintf_r+0x17e>
 8008808:	b1b0      	cbz	r0, 8008838 <_svfiprintf_r+0x110>
 800880a:	9207      	str	r2, [sp, #28]
 800880c:	e014      	b.n	8008838 <_svfiprintf_r+0x110>
 800880e:	eba0 0308 	sub.w	r3, r0, r8
 8008812:	fa09 f303 	lsl.w	r3, r9, r3
 8008816:	4313      	orrs	r3, r2
 8008818:	9304      	str	r3, [sp, #16]
 800881a:	46a2      	mov	sl, r4
 800881c:	e7d2      	b.n	80087c4 <_svfiprintf_r+0x9c>
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	1d19      	adds	r1, r3, #4
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	9103      	str	r1, [sp, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	bfbb      	ittet	lt
 800882a:	425b      	neglt	r3, r3
 800882c:	f042 0202 	orrlt.w	r2, r2, #2
 8008830:	9307      	strge	r3, [sp, #28]
 8008832:	9307      	strlt	r3, [sp, #28]
 8008834:	bfb8      	it	lt
 8008836:	9204      	strlt	r2, [sp, #16]
 8008838:	7823      	ldrb	r3, [r4, #0]
 800883a:	2b2e      	cmp	r3, #46	; 0x2e
 800883c:	d10c      	bne.n	8008858 <_svfiprintf_r+0x130>
 800883e:	7863      	ldrb	r3, [r4, #1]
 8008840:	2b2a      	cmp	r3, #42	; 0x2a
 8008842:	d135      	bne.n	80088b0 <_svfiprintf_r+0x188>
 8008844:	9b03      	ldr	r3, [sp, #12]
 8008846:	1d1a      	adds	r2, r3, #4
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	9203      	str	r2, [sp, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	bfb8      	it	lt
 8008850:	f04f 33ff 	movlt.w	r3, #4294967295
 8008854:	3402      	adds	r4, #2
 8008856:	9305      	str	r3, [sp, #20]
 8008858:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008924 <_svfiprintf_r+0x1fc>
 800885c:	7821      	ldrb	r1, [r4, #0]
 800885e:	2203      	movs	r2, #3
 8008860:	4650      	mov	r0, sl
 8008862:	f7f7 fcbd 	bl	80001e0 <memchr>
 8008866:	b140      	cbz	r0, 800887a <_svfiprintf_r+0x152>
 8008868:	2340      	movs	r3, #64	; 0x40
 800886a:	eba0 000a 	sub.w	r0, r0, sl
 800886e:	fa03 f000 	lsl.w	r0, r3, r0
 8008872:	9b04      	ldr	r3, [sp, #16]
 8008874:	4303      	orrs	r3, r0
 8008876:	3401      	adds	r4, #1
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887e:	4826      	ldr	r0, [pc, #152]	; (8008918 <_svfiprintf_r+0x1f0>)
 8008880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008884:	2206      	movs	r2, #6
 8008886:	f7f7 fcab 	bl	80001e0 <memchr>
 800888a:	2800      	cmp	r0, #0
 800888c:	d038      	beq.n	8008900 <_svfiprintf_r+0x1d8>
 800888e:	4b23      	ldr	r3, [pc, #140]	; (800891c <_svfiprintf_r+0x1f4>)
 8008890:	bb1b      	cbnz	r3, 80088da <_svfiprintf_r+0x1b2>
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	3307      	adds	r3, #7
 8008896:	f023 0307 	bic.w	r3, r3, #7
 800889a:	3308      	adds	r3, #8
 800889c:	9303      	str	r3, [sp, #12]
 800889e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a0:	4433      	add	r3, r6
 80088a2:	9309      	str	r3, [sp, #36]	; 0x24
 80088a4:	e767      	b.n	8008776 <_svfiprintf_r+0x4e>
 80088a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80088aa:	460c      	mov	r4, r1
 80088ac:	2001      	movs	r0, #1
 80088ae:	e7a5      	b.n	80087fc <_svfiprintf_r+0xd4>
 80088b0:	2300      	movs	r3, #0
 80088b2:	3401      	adds	r4, #1
 80088b4:	9305      	str	r3, [sp, #20]
 80088b6:	4619      	mov	r1, r3
 80088b8:	f04f 0c0a 	mov.w	ip, #10
 80088bc:	4620      	mov	r0, r4
 80088be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088c2:	3a30      	subs	r2, #48	; 0x30
 80088c4:	2a09      	cmp	r2, #9
 80088c6:	d903      	bls.n	80088d0 <_svfiprintf_r+0x1a8>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0c5      	beq.n	8008858 <_svfiprintf_r+0x130>
 80088cc:	9105      	str	r1, [sp, #20]
 80088ce:	e7c3      	b.n	8008858 <_svfiprintf_r+0x130>
 80088d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80088d4:	4604      	mov	r4, r0
 80088d6:	2301      	movs	r3, #1
 80088d8:	e7f0      	b.n	80088bc <_svfiprintf_r+0x194>
 80088da:	ab03      	add	r3, sp, #12
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	462a      	mov	r2, r5
 80088e0:	4b0f      	ldr	r3, [pc, #60]	; (8008920 <_svfiprintf_r+0x1f8>)
 80088e2:	a904      	add	r1, sp, #16
 80088e4:	4638      	mov	r0, r7
 80088e6:	f7fe f81b 	bl	8006920 <_printf_float>
 80088ea:	1c42      	adds	r2, r0, #1
 80088ec:	4606      	mov	r6, r0
 80088ee:	d1d6      	bne.n	800889e <_svfiprintf_r+0x176>
 80088f0:	89ab      	ldrh	r3, [r5, #12]
 80088f2:	065b      	lsls	r3, r3, #25
 80088f4:	f53f af2c 	bmi.w	8008750 <_svfiprintf_r+0x28>
 80088f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088fa:	b01d      	add	sp, #116	; 0x74
 80088fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008900:	ab03      	add	r3, sp, #12
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	462a      	mov	r2, r5
 8008906:	4b06      	ldr	r3, [pc, #24]	; (8008920 <_svfiprintf_r+0x1f8>)
 8008908:	a904      	add	r1, sp, #16
 800890a:	4638      	mov	r0, r7
 800890c:	f7fe faac 	bl	8006e68 <_printf_i>
 8008910:	e7eb      	b.n	80088ea <_svfiprintf_r+0x1c2>
 8008912:	bf00      	nop
 8008914:	0800b33c 	.word	0x0800b33c
 8008918:	0800b346 	.word	0x0800b346
 800891c:	08006921 	.word	0x08006921
 8008920:	08008671 	.word	0x08008671
 8008924:	0800b342 	.word	0x0800b342

08008928 <_sbrk_r>:
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	4d06      	ldr	r5, [pc, #24]	; (8008944 <_sbrk_r+0x1c>)
 800892c:	2300      	movs	r3, #0
 800892e:	4604      	mov	r4, r0
 8008930:	4608      	mov	r0, r1
 8008932:	602b      	str	r3, [r5, #0]
 8008934:	f7f9 ff6e 	bl	8002814 <_sbrk>
 8008938:	1c43      	adds	r3, r0, #1
 800893a:	d102      	bne.n	8008942 <_sbrk_r+0x1a>
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	b103      	cbz	r3, 8008942 <_sbrk_r+0x1a>
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	bd38      	pop	{r3, r4, r5, pc}
 8008944:	20000850 	.word	0x20000850

08008948 <__assert_func>:
 8008948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800894a:	4614      	mov	r4, r2
 800894c:	461a      	mov	r2, r3
 800894e:	4b09      	ldr	r3, [pc, #36]	; (8008974 <__assert_func+0x2c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4605      	mov	r5, r0
 8008954:	68d8      	ldr	r0, [r3, #12]
 8008956:	b14c      	cbz	r4, 800896c <__assert_func+0x24>
 8008958:	4b07      	ldr	r3, [pc, #28]	; (8008978 <__assert_func+0x30>)
 800895a:	9100      	str	r1, [sp, #0]
 800895c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008960:	4906      	ldr	r1, [pc, #24]	; (800897c <__assert_func+0x34>)
 8008962:	462b      	mov	r3, r5
 8008964:	f000 f80e 	bl	8008984 <fiprintf>
 8008968:	f000 fa8a 	bl	8008e80 <abort>
 800896c:	4b04      	ldr	r3, [pc, #16]	; (8008980 <__assert_func+0x38>)
 800896e:	461c      	mov	r4, r3
 8008970:	e7f3      	b.n	800895a <__assert_func+0x12>
 8008972:	bf00      	nop
 8008974:	2000001c 	.word	0x2000001c
 8008978:	0800b34d 	.word	0x0800b34d
 800897c:	0800b35a 	.word	0x0800b35a
 8008980:	0800b388 	.word	0x0800b388

08008984 <fiprintf>:
 8008984:	b40e      	push	{r1, r2, r3}
 8008986:	b503      	push	{r0, r1, lr}
 8008988:	4601      	mov	r1, r0
 800898a:	ab03      	add	r3, sp, #12
 800898c:	4805      	ldr	r0, [pc, #20]	; (80089a4 <fiprintf+0x20>)
 800898e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008992:	6800      	ldr	r0, [r0, #0]
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	f000 f875 	bl	8008a84 <_vfiprintf_r>
 800899a:	b002      	add	sp, #8
 800899c:	f85d eb04 	ldr.w	lr, [sp], #4
 80089a0:	b003      	add	sp, #12
 80089a2:	4770      	bx	lr
 80089a4:	2000001c 	.word	0x2000001c

080089a8 <__ascii_mbtowc>:
 80089a8:	b082      	sub	sp, #8
 80089aa:	b901      	cbnz	r1, 80089ae <__ascii_mbtowc+0x6>
 80089ac:	a901      	add	r1, sp, #4
 80089ae:	b142      	cbz	r2, 80089c2 <__ascii_mbtowc+0x1a>
 80089b0:	b14b      	cbz	r3, 80089c6 <__ascii_mbtowc+0x1e>
 80089b2:	7813      	ldrb	r3, [r2, #0]
 80089b4:	600b      	str	r3, [r1, #0]
 80089b6:	7812      	ldrb	r2, [r2, #0]
 80089b8:	1e10      	subs	r0, r2, #0
 80089ba:	bf18      	it	ne
 80089bc:	2001      	movne	r0, #1
 80089be:	b002      	add	sp, #8
 80089c0:	4770      	bx	lr
 80089c2:	4610      	mov	r0, r2
 80089c4:	e7fb      	b.n	80089be <__ascii_mbtowc+0x16>
 80089c6:	f06f 0001 	mvn.w	r0, #1
 80089ca:	e7f8      	b.n	80089be <__ascii_mbtowc+0x16>

080089cc <__malloc_lock>:
 80089cc:	4801      	ldr	r0, [pc, #4]	; (80089d4 <__malloc_lock+0x8>)
 80089ce:	f000 bc17 	b.w	8009200 <__retarget_lock_acquire_recursive>
 80089d2:	bf00      	nop
 80089d4:	20000858 	.word	0x20000858

080089d8 <__malloc_unlock>:
 80089d8:	4801      	ldr	r0, [pc, #4]	; (80089e0 <__malloc_unlock+0x8>)
 80089da:	f000 bc12 	b.w	8009202 <__retarget_lock_release_recursive>
 80089de:	bf00      	nop
 80089e0:	20000858 	.word	0x20000858

080089e4 <_realloc_r>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	4607      	mov	r7, r0
 80089e8:	4614      	mov	r4, r2
 80089ea:	460e      	mov	r6, r1
 80089ec:	b921      	cbnz	r1, 80089f8 <_realloc_r+0x14>
 80089ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80089f2:	4611      	mov	r1, r2
 80089f4:	f7ff bde2 	b.w	80085bc <_malloc_r>
 80089f8:	b922      	cbnz	r2, 8008a04 <_realloc_r+0x20>
 80089fa:	f7ff fd8f 	bl	800851c <_free_r>
 80089fe:	4625      	mov	r5, r4
 8008a00:	4628      	mov	r0, r5
 8008a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a04:	f000 fc62 	bl	80092cc <_malloc_usable_size_r>
 8008a08:	42a0      	cmp	r0, r4
 8008a0a:	d20f      	bcs.n	8008a2c <_realloc_r+0x48>
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	4638      	mov	r0, r7
 8008a10:	f7ff fdd4 	bl	80085bc <_malloc_r>
 8008a14:	4605      	mov	r5, r0
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d0f2      	beq.n	8008a00 <_realloc_r+0x1c>
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	f7fd feaf 	bl	8006780 <memcpy>
 8008a22:	4631      	mov	r1, r6
 8008a24:	4638      	mov	r0, r7
 8008a26:	f7ff fd79 	bl	800851c <_free_r>
 8008a2a:	e7e9      	b.n	8008a00 <_realloc_r+0x1c>
 8008a2c:	4635      	mov	r5, r6
 8008a2e:	e7e7      	b.n	8008a00 <_realloc_r+0x1c>

08008a30 <__sfputc_r>:
 8008a30:	6893      	ldr	r3, [r2, #8]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	b410      	push	{r4}
 8008a38:	6093      	str	r3, [r2, #8]
 8008a3a:	da08      	bge.n	8008a4e <__sfputc_r+0x1e>
 8008a3c:	6994      	ldr	r4, [r2, #24]
 8008a3e:	42a3      	cmp	r3, r4
 8008a40:	db01      	blt.n	8008a46 <__sfputc_r+0x16>
 8008a42:	290a      	cmp	r1, #10
 8008a44:	d103      	bne.n	8008a4e <__sfputc_r+0x1e>
 8008a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a4a:	f000 b94b 	b.w	8008ce4 <__swbuf_r>
 8008a4e:	6813      	ldr	r3, [r2, #0]
 8008a50:	1c58      	adds	r0, r3, #1
 8008a52:	6010      	str	r0, [r2, #0]
 8008a54:	7019      	strb	r1, [r3, #0]
 8008a56:	4608      	mov	r0, r1
 8008a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <__sfputs_r>:
 8008a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a60:	4606      	mov	r6, r0
 8008a62:	460f      	mov	r7, r1
 8008a64:	4614      	mov	r4, r2
 8008a66:	18d5      	adds	r5, r2, r3
 8008a68:	42ac      	cmp	r4, r5
 8008a6a:	d101      	bne.n	8008a70 <__sfputs_r+0x12>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	e007      	b.n	8008a80 <__sfputs_r+0x22>
 8008a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a74:	463a      	mov	r2, r7
 8008a76:	4630      	mov	r0, r6
 8008a78:	f7ff ffda 	bl	8008a30 <__sfputc_r>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d1f3      	bne.n	8008a68 <__sfputs_r+0xa>
 8008a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a84 <_vfiprintf_r>:
 8008a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a88:	460d      	mov	r5, r1
 8008a8a:	b09d      	sub	sp, #116	; 0x74
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	4698      	mov	r8, r3
 8008a90:	4606      	mov	r6, r0
 8008a92:	b118      	cbz	r0, 8008a9c <_vfiprintf_r+0x18>
 8008a94:	6983      	ldr	r3, [r0, #24]
 8008a96:	b90b      	cbnz	r3, 8008a9c <_vfiprintf_r+0x18>
 8008a98:	f000 fb14 	bl	80090c4 <__sinit>
 8008a9c:	4b89      	ldr	r3, [pc, #548]	; (8008cc4 <_vfiprintf_r+0x240>)
 8008a9e:	429d      	cmp	r5, r3
 8008aa0:	d11b      	bne.n	8008ada <_vfiprintf_r+0x56>
 8008aa2:	6875      	ldr	r5, [r6, #4]
 8008aa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aa6:	07d9      	lsls	r1, r3, #31
 8008aa8:	d405      	bmi.n	8008ab6 <_vfiprintf_r+0x32>
 8008aaa:	89ab      	ldrh	r3, [r5, #12]
 8008aac:	059a      	lsls	r2, r3, #22
 8008aae:	d402      	bmi.n	8008ab6 <_vfiprintf_r+0x32>
 8008ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ab2:	f000 fba5 	bl	8009200 <__retarget_lock_acquire_recursive>
 8008ab6:	89ab      	ldrh	r3, [r5, #12]
 8008ab8:	071b      	lsls	r3, r3, #28
 8008aba:	d501      	bpl.n	8008ac0 <_vfiprintf_r+0x3c>
 8008abc:	692b      	ldr	r3, [r5, #16]
 8008abe:	b9eb      	cbnz	r3, 8008afc <_vfiprintf_r+0x78>
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f000 f96e 	bl	8008da4 <__swsetup_r>
 8008ac8:	b1c0      	cbz	r0, 8008afc <_vfiprintf_r+0x78>
 8008aca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008acc:	07dc      	lsls	r4, r3, #31
 8008ace:	d50e      	bpl.n	8008aee <_vfiprintf_r+0x6a>
 8008ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad4:	b01d      	add	sp, #116	; 0x74
 8008ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ada:	4b7b      	ldr	r3, [pc, #492]	; (8008cc8 <_vfiprintf_r+0x244>)
 8008adc:	429d      	cmp	r5, r3
 8008ade:	d101      	bne.n	8008ae4 <_vfiprintf_r+0x60>
 8008ae0:	68b5      	ldr	r5, [r6, #8]
 8008ae2:	e7df      	b.n	8008aa4 <_vfiprintf_r+0x20>
 8008ae4:	4b79      	ldr	r3, [pc, #484]	; (8008ccc <_vfiprintf_r+0x248>)
 8008ae6:	429d      	cmp	r5, r3
 8008ae8:	bf08      	it	eq
 8008aea:	68f5      	ldreq	r5, [r6, #12]
 8008aec:	e7da      	b.n	8008aa4 <_vfiprintf_r+0x20>
 8008aee:	89ab      	ldrh	r3, [r5, #12]
 8008af0:	0598      	lsls	r0, r3, #22
 8008af2:	d4ed      	bmi.n	8008ad0 <_vfiprintf_r+0x4c>
 8008af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008af6:	f000 fb84 	bl	8009202 <__retarget_lock_release_recursive>
 8008afa:	e7e9      	b.n	8008ad0 <_vfiprintf_r+0x4c>
 8008afc:	2300      	movs	r3, #0
 8008afe:	9309      	str	r3, [sp, #36]	; 0x24
 8008b00:	2320      	movs	r3, #32
 8008b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b0a:	2330      	movs	r3, #48	; 0x30
 8008b0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008cd0 <_vfiprintf_r+0x24c>
 8008b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b14:	f04f 0901 	mov.w	r9, #1
 8008b18:	4623      	mov	r3, r4
 8008b1a:	469a      	mov	sl, r3
 8008b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b20:	b10a      	cbz	r2, 8008b26 <_vfiprintf_r+0xa2>
 8008b22:	2a25      	cmp	r2, #37	; 0x25
 8008b24:	d1f9      	bne.n	8008b1a <_vfiprintf_r+0x96>
 8008b26:	ebba 0b04 	subs.w	fp, sl, r4
 8008b2a:	d00b      	beq.n	8008b44 <_vfiprintf_r+0xc0>
 8008b2c:	465b      	mov	r3, fp
 8008b2e:	4622      	mov	r2, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	4630      	mov	r0, r6
 8008b34:	f7ff ff93 	bl	8008a5e <__sfputs_r>
 8008b38:	3001      	adds	r0, #1
 8008b3a:	f000 80aa 	beq.w	8008c92 <_vfiprintf_r+0x20e>
 8008b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b40:	445a      	add	r2, fp
 8008b42:	9209      	str	r2, [sp, #36]	; 0x24
 8008b44:	f89a 3000 	ldrb.w	r3, [sl]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 80a2 	beq.w	8008c92 <_vfiprintf_r+0x20e>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f04f 32ff 	mov.w	r2, #4294967295
 8008b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b58:	f10a 0a01 	add.w	sl, sl, #1
 8008b5c:	9304      	str	r3, [sp, #16]
 8008b5e:	9307      	str	r3, [sp, #28]
 8008b60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b64:	931a      	str	r3, [sp, #104]	; 0x68
 8008b66:	4654      	mov	r4, sl
 8008b68:	2205      	movs	r2, #5
 8008b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b6e:	4858      	ldr	r0, [pc, #352]	; (8008cd0 <_vfiprintf_r+0x24c>)
 8008b70:	f7f7 fb36 	bl	80001e0 <memchr>
 8008b74:	9a04      	ldr	r2, [sp, #16]
 8008b76:	b9d8      	cbnz	r0, 8008bb0 <_vfiprintf_r+0x12c>
 8008b78:	06d1      	lsls	r1, r2, #27
 8008b7a:	bf44      	itt	mi
 8008b7c:	2320      	movmi	r3, #32
 8008b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b82:	0713      	lsls	r3, r2, #28
 8008b84:	bf44      	itt	mi
 8008b86:	232b      	movmi	r3, #43	; 0x2b
 8008b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b90:	2b2a      	cmp	r3, #42	; 0x2a
 8008b92:	d015      	beq.n	8008bc0 <_vfiprintf_r+0x13c>
 8008b94:	9a07      	ldr	r2, [sp, #28]
 8008b96:	4654      	mov	r4, sl
 8008b98:	2000      	movs	r0, #0
 8008b9a:	f04f 0c0a 	mov.w	ip, #10
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ba4:	3b30      	subs	r3, #48	; 0x30
 8008ba6:	2b09      	cmp	r3, #9
 8008ba8:	d94e      	bls.n	8008c48 <_vfiprintf_r+0x1c4>
 8008baa:	b1b0      	cbz	r0, 8008bda <_vfiprintf_r+0x156>
 8008bac:	9207      	str	r2, [sp, #28]
 8008bae:	e014      	b.n	8008bda <_vfiprintf_r+0x156>
 8008bb0:	eba0 0308 	sub.w	r3, r0, r8
 8008bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	9304      	str	r3, [sp, #16]
 8008bbc:	46a2      	mov	sl, r4
 8008bbe:	e7d2      	b.n	8008b66 <_vfiprintf_r+0xe2>
 8008bc0:	9b03      	ldr	r3, [sp, #12]
 8008bc2:	1d19      	adds	r1, r3, #4
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	9103      	str	r1, [sp, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	bfbb      	ittet	lt
 8008bcc:	425b      	neglt	r3, r3
 8008bce:	f042 0202 	orrlt.w	r2, r2, #2
 8008bd2:	9307      	strge	r3, [sp, #28]
 8008bd4:	9307      	strlt	r3, [sp, #28]
 8008bd6:	bfb8      	it	lt
 8008bd8:	9204      	strlt	r2, [sp, #16]
 8008bda:	7823      	ldrb	r3, [r4, #0]
 8008bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8008bde:	d10c      	bne.n	8008bfa <_vfiprintf_r+0x176>
 8008be0:	7863      	ldrb	r3, [r4, #1]
 8008be2:	2b2a      	cmp	r3, #42	; 0x2a
 8008be4:	d135      	bne.n	8008c52 <_vfiprintf_r+0x1ce>
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	1d1a      	adds	r2, r3, #4
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	9203      	str	r2, [sp, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	bfb8      	it	lt
 8008bf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bf6:	3402      	adds	r4, #2
 8008bf8:	9305      	str	r3, [sp, #20]
 8008bfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ce0 <_vfiprintf_r+0x25c>
 8008bfe:	7821      	ldrb	r1, [r4, #0]
 8008c00:	2203      	movs	r2, #3
 8008c02:	4650      	mov	r0, sl
 8008c04:	f7f7 faec 	bl	80001e0 <memchr>
 8008c08:	b140      	cbz	r0, 8008c1c <_vfiprintf_r+0x198>
 8008c0a:	2340      	movs	r3, #64	; 0x40
 8008c0c:	eba0 000a 	sub.w	r0, r0, sl
 8008c10:	fa03 f000 	lsl.w	r0, r3, r0
 8008c14:	9b04      	ldr	r3, [sp, #16]
 8008c16:	4303      	orrs	r3, r0
 8008c18:	3401      	adds	r4, #1
 8008c1a:	9304      	str	r3, [sp, #16]
 8008c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c20:	482c      	ldr	r0, [pc, #176]	; (8008cd4 <_vfiprintf_r+0x250>)
 8008c22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c26:	2206      	movs	r2, #6
 8008c28:	f7f7 fada 	bl	80001e0 <memchr>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	d03f      	beq.n	8008cb0 <_vfiprintf_r+0x22c>
 8008c30:	4b29      	ldr	r3, [pc, #164]	; (8008cd8 <_vfiprintf_r+0x254>)
 8008c32:	bb1b      	cbnz	r3, 8008c7c <_vfiprintf_r+0x1f8>
 8008c34:	9b03      	ldr	r3, [sp, #12]
 8008c36:	3307      	adds	r3, #7
 8008c38:	f023 0307 	bic.w	r3, r3, #7
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	9303      	str	r3, [sp, #12]
 8008c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c42:	443b      	add	r3, r7
 8008c44:	9309      	str	r3, [sp, #36]	; 0x24
 8008c46:	e767      	b.n	8008b18 <_vfiprintf_r+0x94>
 8008c48:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	2001      	movs	r0, #1
 8008c50:	e7a5      	b.n	8008b9e <_vfiprintf_r+0x11a>
 8008c52:	2300      	movs	r3, #0
 8008c54:	3401      	adds	r4, #1
 8008c56:	9305      	str	r3, [sp, #20]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f04f 0c0a 	mov.w	ip, #10
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c64:	3a30      	subs	r2, #48	; 0x30
 8008c66:	2a09      	cmp	r2, #9
 8008c68:	d903      	bls.n	8008c72 <_vfiprintf_r+0x1ee>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d0c5      	beq.n	8008bfa <_vfiprintf_r+0x176>
 8008c6e:	9105      	str	r1, [sp, #20]
 8008c70:	e7c3      	b.n	8008bfa <_vfiprintf_r+0x176>
 8008c72:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c76:	4604      	mov	r4, r0
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e7f0      	b.n	8008c5e <_vfiprintf_r+0x1da>
 8008c7c:	ab03      	add	r3, sp, #12
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	462a      	mov	r2, r5
 8008c82:	4b16      	ldr	r3, [pc, #88]	; (8008cdc <_vfiprintf_r+0x258>)
 8008c84:	a904      	add	r1, sp, #16
 8008c86:	4630      	mov	r0, r6
 8008c88:	f7fd fe4a 	bl	8006920 <_printf_float>
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	1c78      	adds	r0, r7, #1
 8008c90:	d1d6      	bne.n	8008c40 <_vfiprintf_r+0x1bc>
 8008c92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c94:	07d9      	lsls	r1, r3, #31
 8008c96:	d405      	bmi.n	8008ca4 <_vfiprintf_r+0x220>
 8008c98:	89ab      	ldrh	r3, [r5, #12]
 8008c9a:	059a      	lsls	r2, r3, #22
 8008c9c:	d402      	bmi.n	8008ca4 <_vfiprintf_r+0x220>
 8008c9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ca0:	f000 faaf 	bl	8009202 <__retarget_lock_release_recursive>
 8008ca4:	89ab      	ldrh	r3, [r5, #12]
 8008ca6:	065b      	lsls	r3, r3, #25
 8008ca8:	f53f af12 	bmi.w	8008ad0 <_vfiprintf_r+0x4c>
 8008cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cae:	e711      	b.n	8008ad4 <_vfiprintf_r+0x50>
 8008cb0:	ab03      	add	r3, sp, #12
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	462a      	mov	r2, r5
 8008cb6:	4b09      	ldr	r3, [pc, #36]	; (8008cdc <_vfiprintf_r+0x258>)
 8008cb8:	a904      	add	r1, sp, #16
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f7fe f8d4 	bl	8006e68 <_printf_i>
 8008cc0:	e7e4      	b.n	8008c8c <_vfiprintf_r+0x208>
 8008cc2:	bf00      	nop
 8008cc4:	0800b4b4 	.word	0x0800b4b4
 8008cc8:	0800b4d4 	.word	0x0800b4d4
 8008ccc:	0800b494 	.word	0x0800b494
 8008cd0:	0800b33c 	.word	0x0800b33c
 8008cd4:	0800b346 	.word	0x0800b346
 8008cd8:	08006921 	.word	0x08006921
 8008cdc:	08008a5f 	.word	0x08008a5f
 8008ce0:	0800b342 	.word	0x0800b342

08008ce4 <__swbuf_r>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	460e      	mov	r6, r1
 8008ce8:	4614      	mov	r4, r2
 8008cea:	4605      	mov	r5, r0
 8008cec:	b118      	cbz	r0, 8008cf6 <__swbuf_r+0x12>
 8008cee:	6983      	ldr	r3, [r0, #24]
 8008cf0:	b90b      	cbnz	r3, 8008cf6 <__swbuf_r+0x12>
 8008cf2:	f000 f9e7 	bl	80090c4 <__sinit>
 8008cf6:	4b21      	ldr	r3, [pc, #132]	; (8008d7c <__swbuf_r+0x98>)
 8008cf8:	429c      	cmp	r4, r3
 8008cfa:	d12b      	bne.n	8008d54 <__swbuf_r+0x70>
 8008cfc:	686c      	ldr	r4, [r5, #4]
 8008cfe:	69a3      	ldr	r3, [r4, #24]
 8008d00:	60a3      	str	r3, [r4, #8]
 8008d02:	89a3      	ldrh	r3, [r4, #12]
 8008d04:	071a      	lsls	r2, r3, #28
 8008d06:	d52f      	bpl.n	8008d68 <__swbuf_r+0x84>
 8008d08:	6923      	ldr	r3, [r4, #16]
 8008d0a:	b36b      	cbz	r3, 8008d68 <__swbuf_r+0x84>
 8008d0c:	6923      	ldr	r3, [r4, #16]
 8008d0e:	6820      	ldr	r0, [r4, #0]
 8008d10:	1ac0      	subs	r0, r0, r3
 8008d12:	6963      	ldr	r3, [r4, #20]
 8008d14:	b2f6      	uxtb	r6, r6
 8008d16:	4283      	cmp	r3, r0
 8008d18:	4637      	mov	r7, r6
 8008d1a:	dc04      	bgt.n	8008d26 <__swbuf_r+0x42>
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f000 f93c 	bl	8008f9c <_fflush_r>
 8008d24:	bb30      	cbnz	r0, 8008d74 <__swbuf_r+0x90>
 8008d26:	68a3      	ldr	r3, [r4, #8]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	60a3      	str	r3, [r4, #8]
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	6022      	str	r2, [r4, #0]
 8008d32:	701e      	strb	r6, [r3, #0]
 8008d34:	6963      	ldr	r3, [r4, #20]
 8008d36:	3001      	adds	r0, #1
 8008d38:	4283      	cmp	r3, r0
 8008d3a:	d004      	beq.n	8008d46 <__swbuf_r+0x62>
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	07db      	lsls	r3, r3, #31
 8008d40:	d506      	bpl.n	8008d50 <__swbuf_r+0x6c>
 8008d42:	2e0a      	cmp	r6, #10
 8008d44:	d104      	bne.n	8008d50 <__swbuf_r+0x6c>
 8008d46:	4621      	mov	r1, r4
 8008d48:	4628      	mov	r0, r5
 8008d4a:	f000 f927 	bl	8008f9c <_fflush_r>
 8008d4e:	b988      	cbnz	r0, 8008d74 <__swbuf_r+0x90>
 8008d50:	4638      	mov	r0, r7
 8008d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d54:	4b0a      	ldr	r3, [pc, #40]	; (8008d80 <__swbuf_r+0x9c>)
 8008d56:	429c      	cmp	r4, r3
 8008d58:	d101      	bne.n	8008d5e <__swbuf_r+0x7a>
 8008d5a:	68ac      	ldr	r4, [r5, #8]
 8008d5c:	e7cf      	b.n	8008cfe <__swbuf_r+0x1a>
 8008d5e:	4b09      	ldr	r3, [pc, #36]	; (8008d84 <__swbuf_r+0xa0>)
 8008d60:	429c      	cmp	r4, r3
 8008d62:	bf08      	it	eq
 8008d64:	68ec      	ldreq	r4, [r5, #12]
 8008d66:	e7ca      	b.n	8008cfe <__swbuf_r+0x1a>
 8008d68:	4621      	mov	r1, r4
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f000 f81a 	bl	8008da4 <__swsetup_r>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d0cb      	beq.n	8008d0c <__swbuf_r+0x28>
 8008d74:	f04f 37ff 	mov.w	r7, #4294967295
 8008d78:	e7ea      	b.n	8008d50 <__swbuf_r+0x6c>
 8008d7a:	bf00      	nop
 8008d7c:	0800b4b4 	.word	0x0800b4b4
 8008d80:	0800b4d4 	.word	0x0800b4d4
 8008d84:	0800b494 	.word	0x0800b494

08008d88 <__ascii_wctomb>:
 8008d88:	b149      	cbz	r1, 8008d9e <__ascii_wctomb+0x16>
 8008d8a:	2aff      	cmp	r2, #255	; 0xff
 8008d8c:	bf85      	ittet	hi
 8008d8e:	238a      	movhi	r3, #138	; 0x8a
 8008d90:	6003      	strhi	r3, [r0, #0]
 8008d92:	700a      	strbls	r2, [r1, #0]
 8008d94:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d98:	bf98      	it	ls
 8008d9a:	2001      	movls	r0, #1
 8008d9c:	4770      	bx	lr
 8008d9e:	4608      	mov	r0, r1
 8008da0:	4770      	bx	lr
	...

08008da4 <__swsetup_r>:
 8008da4:	4b32      	ldr	r3, [pc, #200]	; (8008e70 <__swsetup_r+0xcc>)
 8008da6:	b570      	push	{r4, r5, r6, lr}
 8008da8:	681d      	ldr	r5, [r3, #0]
 8008daa:	4606      	mov	r6, r0
 8008dac:	460c      	mov	r4, r1
 8008dae:	b125      	cbz	r5, 8008dba <__swsetup_r+0x16>
 8008db0:	69ab      	ldr	r3, [r5, #24]
 8008db2:	b913      	cbnz	r3, 8008dba <__swsetup_r+0x16>
 8008db4:	4628      	mov	r0, r5
 8008db6:	f000 f985 	bl	80090c4 <__sinit>
 8008dba:	4b2e      	ldr	r3, [pc, #184]	; (8008e74 <__swsetup_r+0xd0>)
 8008dbc:	429c      	cmp	r4, r3
 8008dbe:	d10f      	bne.n	8008de0 <__swsetup_r+0x3c>
 8008dc0:	686c      	ldr	r4, [r5, #4]
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dc8:	0719      	lsls	r1, r3, #28
 8008dca:	d42c      	bmi.n	8008e26 <__swsetup_r+0x82>
 8008dcc:	06dd      	lsls	r5, r3, #27
 8008dce:	d411      	bmi.n	8008df4 <__swsetup_r+0x50>
 8008dd0:	2309      	movs	r3, #9
 8008dd2:	6033      	str	r3, [r6, #0]
 8008dd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dd8:	81a3      	strh	r3, [r4, #12]
 8008dda:	f04f 30ff 	mov.w	r0, #4294967295
 8008dde:	e03e      	b.n	8008e5e <__swsetup_r+0xba>
 8008de0:	4b25      	ldr	r3, [pc, #148]	; (8008e78 <__swsetup_r+0xd4>)
 8008de2:	429c      	cmp	r4, r3
 8008de4:	d101      	bne.n	8008dea <__swsetup_r+0x46>
 8008de6:	68ac      	ldr	r4, [r5, #8]
 8008de8:	e7eb      	b.n	8008dc2 <__swsetup_r+0x1e>
 8008dea:	4b24      	ldr	r3, [pc, #144]	; (8008e7c <__swsetup_r+0xd8>)
 8008dec:	429c      	cmp	r4, r3
 8008dee:	bf08      	it	eq
 8008df0:	68ec      	ldreq	r4, [r5, #12]
 8008df2:	e7e6      	b.n	8008dc2 <__swsetup_r+0x1e>
 8008df4:	0758      	lsls	r0, r3, #29
 8008df6:	d512      	bpl.n	8008e1e <__swsetup_r+0x7a>
 8008df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dfa:	b141      	cbz	r1, 8008e0e <__swsetup_r+0x6a>
 8008dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e00:	4299      	cmp	r1, r3
 8008e02:	d002      	beq.n	8008e0a <__swsetup_r+0x66>
 8008e04:	4630      	mov	r0, r6
 8008e06:	f7ff fb89 	bl	800851c <_free_r>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e14:	81a3      	strh	r3, [r4, #12]
 8008e16:	2300      	movs	r3, #0
 8008e18:	6063      	str	r3, [r4, #4]
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	f043 0308 	orr.w	r3, r3, #8
 8008e24:	81a3      	strh	r3, [r4, #12]
 8008e26:	6923      	ldr	r3, [r4, #16]
 8008e28:	b94b      	cbnz	r3, 8008e3e <__swsetup_r+0x9a>
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e34:	d003      	beq.n	8008e3e <__swsetup_r+0x9a>
 8008e36:	4621      	mov	r1, r4
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f000 fa07 	bl	800924c <__smakebuf_r>
 8008e3e:	89a0      	ldrh	r0, [r4, #12]
 8008e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e44:	f010 0301 	ands.w	r3, r0, #1
 8008e48:	d00a      	beq.n	8008e60 <__swsetup_r+0xbc>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60a3      	str	r3, [r4, #8]
 8008e4e:	6963      	ldr	r3, [r4, #20]
 8008e50:	425b      	negs	r3, r3
 8008e52:	61a3      	str	r3, [r4, #24]
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	b943      	cbnz	r3, 8008e6a <__swsetup_r+0xc6>
 8008e58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e5c:	d1ba      	bne.n	8008dd4 <__swsetup_r+0x30>
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	0781      	lsls	r1, r0, #30
 8008e62:	bf58      	it	pl
 8008e64:	6963      	ldrpl	r3, [r4, #20]
 8008e66:	60a3      	str	r3, [r4, #8]
 8008e68:	e7f4      	b.n	8008e54 <__swsetup_r+0xb0>
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	e7f7      	b.n	8008e5e <__swsetup_r+0xba>
 8008e6e:	bf00      	nop
 8008e70:	2000001c 	.word	0x2000001c
 8008e74:	0800b4b4 	.word	0x0800b4b4
 8008e78:	0800b4d4 	.word	0x0800b4d4
 8008e7c:	0800b494 	.word	0x0800b494

08008e80 <abort>:
 8008e80:	b508      	push	{r3, lr}
 8008e82:	2006      	movs	r0, #6
 8008e84:	f000 fa52 	bl	800932c <raise>
 8008e88:	2001      	movs	r0, #1
 8008e8a:	f7f9 fc67 	bl	800275c <_exit>
	...

08008e90 <__sflush_r>:
 8008e90:	898a      	ldrh	r2, [r1, #12]
 8008e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e96:	4605      	mov	r5, r0
 8008e98:	0710      	lsls	r0, r2, #28
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	d458      	bmi.n	8008f50 <__sflush_r+0xc0>
 8008e9e:	684b      	ldr	r3, [r1, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	dc05      	bgt.n	8008eb0 <__sflush_r+0x20>
 8008ea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	dc02      	bgt.n	8008eb0 <__sflush_r+0x20>
 8008eaa:	2000      	movs	r0, #0
 8008eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eb2:	2e00      	cmp	r6, #0
 8008eb4:	d0f9      	beq.n	8008eaa <__sflush_r+0x1a>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ebc:	682f      	ldr	r7, [r5, #0]
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	d032      	beq.n	8008f28 <__sflush_r+0x98>
 8008ec2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	075a      	lsls	r2, r3, #29
 8008ec8:	d505      	bpl.n	8008ed6 <__sflush_r+0x46>
 8008eca:	6863      	ldr	r3, [r4, #4]
 8008ecc:	1ac0      	subs	r0, r0, r3
 8008ece:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ed0:	b10b      	cbz	r3, 8008ed6 <__sflush_r+0x46>
 8008ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ed4:	1ac0      	subs	r0, r0, r3
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	4602      	mov	r2, r0
 8008eda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008edc:	6a21      	ldr	r1, [r4, #32]
 8008ede:	4628      	mov	r0, r5
 8008ee0:	47b0      	blx	r6
 8008ee2:	1c43      	adds	r3, r0, #1
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	d106      	bne.n	8008ef6 <__sflush_r+0x66>
 8008ee8:	6829      	ldr	r1, [r5, #0]
 8008eea:	291d      	cmp	r1, #29
 8008eec:	d82c      	bhi.n	8008f48 <__sflush_r+0xb8>
 8008eee:	4a2a      	ldr	r2, [pc, #168]	; (8008f98 <__sflush_r+0x108>)
 8008ef0:	40ca      	lsrs	r2, r1
 8008ef2:	07d6      	lsls	r6, r2, #31
 8008ef4:	d528      	bpl.n	8008f48 <__sflush_r+0xb8>
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	6062      	str	r2, [r4, #4]
 8008efa:	04d9      	lsls	r1, r3, #19
 8008efc:	6922      	ldr	r2, [r4, #16]
 8008efe:	6022      	str	r2, [r4, #0]
 8008f00:	d504      	bpl.n	8008f0c <__sflush_r+0x7c>
 8008f02:	1c42      	adds	r2, r0, #1
 8008f04:	d101      	bne.n	8008f0a <__sflush_r+0x7a>
 8008f06:	682b      	ldr	r3, [r5, #0]
 8008f08:	b903      	cbnz	r3, 8008f0c <__sflush_r+0x7c>
 8008f0a:	6560      	str	r0, [r4, #84]	; 0x54
 8008f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f0e:	602f      	str	r7, [r5, #0]
 8008f10:	2900      	cmp	r1, #0
 8008f12:	d0ca      	beq.n	8008eaa <__sflush_r+0x1a>
 8008f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f18:	4299      	cmp	r1, r3
 8008f1a:	d002      	beq.n	8008f22 <__sflush_r+0x92>
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	f7ff fafd 	bl	800851c <_free_r>
 8008f22:	2000      	movs	r0, #0
 8008f24:	6360      	str	r0, [r4, #52]	; 0x34
 8008f26:	e7c1      	b.n	8008eac <__sflush_r+0x1c>
 8008f28:	6a21      	ldr	r1, [r4, #32]
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	47b0      	blx	r6
 8008f30:	1c41      	adds	r1, r0, #1
 8008f32:	d1c7      	bne.n	8008ec4 <__sflush_r+0x34>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0c4      	beq.n	8008ec4 <__sflush_r+0x34>
 8008f3a:	2b1d      	cmp	r3, #29
 8008f3c:	d001      	beq.n	8008f42 <__sflush_r+0xb2>
 8008f3e:	2b16      	cmp	r3, #22
 8008f40:	d101      	bne.n	8008f46 <__sflush_r+0xb6>
 8008f42:	602f      	str	r7, [r5, #0]
 8008f44:	e7b1      	b.n	8008eaa <__sflush_r+0x1a>
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	e7ad      	b.n	8008eac <__sflush_r+0x1c>
 8008f50:	690f      	ldr	r7, [r1, #16]
 8008f52:	2f00      	cmp	r7, #0
 8008f54:	d0a9      	beq.n	8008eaa <__sflush_r+0x1a>
 8008f56:	0793      	lsls	r3, r2, #30
 8008f58:	680e      	ldr	r6, [r1, #0]
 8008f5a:	bf08      	it	eq
 8008f5c:	694b      	ldreq	r3, [r1, #20]
 8008f5e:	600f      	str	r7, [r1, #0]
 8008f60:	bf18      	it	ne
 8008f62:	2300      	movne	r3, #0
 8008f64:	eba6 0807 	sub.w	r8, r6, r7
 8008f68:	608b      	str	r3, [r1, #8]
 8008f6a:	f1b8 0f00 	cmp.w	r8, #0
 8008f6e:	dd9c      	ble.n	8008eaa <__sflush_r+0x1a>
 8008f70:	6a21      	ldr	r1, [r4, #32]
 8008f72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f74:	4643      	mov	r3, r8
 8008f76:	463a      	mov	r2, r7
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b0      	blx	r6
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	dc06      	bgt.n	8008f8e <__sflush_r+0xfe>
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f86:	81a3      	strh	r3, [r4, #12]
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8c:	e78e      	b.n	8008eac <__sflush_r+0x1c>
 8008f8e:	4407      	add	r7, r0
 8008f90:	eba8 0800 	sub.w	r8, r8, r0
 8008f94:	e7e9      	b.n	8008f6a <__sflush_r+0xda>
 8008f96:	bf00      	nop
 8008f98:	20400001 	.word	0x20400001

08008f9c <_fflush_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	690b      	ldr	r3, [r1, #16]
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	b913      	cbnz	r3, 8008fac <_fflush_r+0x10>
 8008fa6:	2500      	movs	r5, #0
 8008fa8:	4628      	mov	r0, r5
 8008faa:	bd38      	pop	{r3, r4, r5, pc}
 8008fac:	b118      	cbz	r0, 8008fb6 <_fflush_r+0x1a>
 8008fae:	6983      	ldr	r3, [r0, #24]
 8008fb0:	b90b      	cbnz	r3, 8008fb6 <_fflush_r+0x1a>
 8008fb2:	f000 f887 	bl	80090c4 <__sinit>
 8008fb6:	4b14      	ldr	r3, [pc, #80]	; (8009008 <_fflush_r+0x6c>)
 8008fb8:	429c      	cmp	r4, r3
 8008fba:	d11b      	bne.n	8008ff4 <_fflush_r+0x58>
 8008fbc:	686c      	ldr	r4, [r5, #4]
 8008fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0ef      	beq.n	8008fa6 <_fflush_r+0xa>
 8008fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fc8:	07d0      	lsls	r0, r2, #31
 8008fca:	d404      	bmi.n	8008fd6 <_fflush_r+0x3a>
 8008fcc:	0599      	lsls	r1, r3, #22
 8008fce:	d402      	bmi.n	8008fd6 <_fflush_r+0x3a>
 8008fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fd2:	f000 f915 	bl	8009200 <__retarget_lock_acquire_recursive>
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	4621      	mov	r1, r4
 8008fda:	f7ff ff59 	bl	8008e90 <__sflush_r>
 8008fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fe0:	07da      	lsls	r2, r3, #31
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	d4e0      	bmi.n	8008fa8 <_fflush_r+0xc>
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	059b      	lsls	r3, r3, #22
 8008fea:	d4dd      	bmi.n	8008fa8 <_fflush_r+0xc>
 8008fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fee:	f000 f908 	bl	8009202 <__retarget_lock_release_recursive>
 8008ff2:	e7d9      	b.n	8008fa8 <_fflush_r+0xc>
 8008ff4:	4b05      	ldr	r3, [pc, #20]	; (800900c <_fflush_r+0x70>)
 8008ff6:	429c      	cmp	r4, r3
 8008ff8:	d101      	bne.n	8008ffe <_fflush_r+0x62>
 8008ffa:	68ac      	ldr	r4, [r5, #8]
 8008ffc:	e7df      	b.n	8008fbe <_fflush_r+0x22>
 8008ffe:	4b04      	ldr	r3, [pc, #16]	; (8009010 <_fflush_r+0x74>)
 8009000:	429c      	cmp	r4, r3
 8009002:	bf08      	it	eq
 8009004:	68ec      	ldreq	r4, [r5, #12]
 8009006:	e7da      	b.n	8008fbe <_fflush_r+0x22>
 8009008:	0800b4b4 	.word	0x0800b4b4
 800900c:	0800b4d4 	.word	0x0800b4d4
 8009010:	0800b494 	.word	0x0800b494

08009014 <std>:
 8009014:	2300      	movs	r3, #0
 8009016:	b510      	push	{r4, lr}
 8009018:	4604      	mov	r4, r0
 800901a:	e9c0 3300 	strd	r3, r3, [r0]
 800901e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009022:	6083      	str	r3, [r0, #8]
 8009024:	8181      	strh	r1, [r0, #12]
 8009026:	6643      	str	r3, [r0, #100]	; 0x64
 8009028:	81c2      	strh	r2, [r0, #14]
 800902a:	6183      	str	r3, [r0, #24]
 800902c:	4619      	mov	r1, r3
 800902e:	2208      	movs	r2, #8
 8009030:	305c      	adds	r0, #92	; 0x5c
 8009032:	f7fd fbcd 	bl	80067d0 <memset>
 8009036:	4b05      	ldr	r3, [pc, #20]	; (800904c <std+0x38>)
 8009038:	6263      	str	r3, [r4, #36]	; 0x24
 800903a:	4b05      	ldr	r3, [pc, #20]	; (8009050 <std+0x3c>)
 800903c:	62a3      	str	r3, [r4, #40]	; 0x28
 800903e:	4b05      	ldr	r3, [pc, #20]	; (8009054 <std+0x40>)
 8009040:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009042:	4b05      	ldr	r3, [pc, #20]	; (8009058 <std+0x44>)
 8009044:	6224      	str	r4, [r4, #32]
 8009046:	6323      	str	r3, [r4, #48]	; 0x30
 8009048:	bd10      	pop	{r4, pc}
 800904a:	bf00      	nop
 800904c:	08009365 	.word	0x08009365
 8009050:	08009387 	.word	0x08009387
 8009054:	080093bf 	.word	0x080093bf
 8009058:	080093e3 	.word	0x080093e3

0800905c <_cleanup_r>:
 800905c:	4901      	ldr	r1, [pc, #4]	; (8009064 <_cleanup_r+0x8>)
 800905e:	f000 b8af 	b.w	80091c0 <_fwalk_reent>
 8009062:	bf00      	nop
 8009064:	08008f9d 	.word	0x08008f9d

08009068 <__sfmoreglue>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	1e4a      	subs	r2, r1, #1
 800906c:	2568      	movs	r5, #104	; 0x68
 800906e:	4355      	muls	r5, r2
 8009070:	460e      	mov	r6, r1
 8009072:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009076:	f7ff faa1 	bl	80085bc <_malloc_r>
 800907a:	4604      	mov	r4, r0
 800907c:	b140      	cbz	r0, 8009090 <__sfmoreglue+0x28>
 800907e:	2100      	movs	r1, #0
 8009080:	e9c0 1600 	strd	r1, r6, [r0]
 8009084:	300c      	adds	r0, #12
 8009086:	60a0      	str	r0, [r4, #8]
 8009088:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800908c:	f7fd fba0 	bl	80067d0 <memset>
 8009090:	4620      	mov	r0, r4
 8009092:	bd70      	pop	{r4, r5, r6, pc}

08009094 <__sfp_lock_acquire>:
 8009094:	4801      	ldr	r0, [pc, #4]	; (800909c <__sfp_lock_acquire+0x8>)
 8009096:	f000 b8b3 	b.w	8009200 <__retarget_lock_acquire_recursive>
 800909a:	bf00      	nop
 800909c:	2000085c 	.word	0x2000085c

080090a0 <__sfp_lock_release>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__sfp_lock_release+0x8>)
 80090a2:	f000 b8ae 	b.w	8009202 <__retarget_lock_release_recursive>
 80090a6:	bf00      	nop
 80090a8:	2000085c 	.word	0x2000085c

080090ac <__sinit_lock_acquire>:
 80090ac:	4801      	ldr	r0, [pc, #4]	; (80090b4 <__sinit_lock_acquire+0x8>)
 80090ae:	f000 b8a7 	b.w	8009200 <__retarget_lock_acquire_recursive>
 80090b2:	bf00      	nop
 80090b4:	20000857 	.word	0x20000857

080090b8 <__sinit_lock_release>:
 80090b8:	4801      	ldr	r0, [pc, #4]	; (80090c0 <__sinit_lock_release+0x8>)
 80090ba:	f000 b8a2 	b.w	8009202 <__retarget_lock_release_recursive>
 80090be:	bf00      	nop
 80090c0:	20000857 	.word	0x20000857

080090c4 <__sinit>:
 80090c4:	b510      	push	{r4, lr}
 80090c6:	4604      	mov	r4, r0
 80090c8:	f7ff fff0 	bl	80090ac <__sinit_lock_acquire>
 80090cc:	69a3      	ldr	r3, [r4, #24]
 80090ce:	b11b      	cbz	r3, 80090d8 <__sinit+0x14>
 80090d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d4:	f7ff bff0 	b.w	80090b8 <__sinit_lock_release>
 80090d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090dc:	6523      	str	r3, [r4, #80]	; 0x50
 80090de:	4b13      	ldr	r3, [pc, #76]	; (800912c <__sinit+0x68>)
 80090e0:	4a13      	ldr	r2, [pc, #76]	; (8009130 <__sinit+0x6c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80090e6:	42a3      	cmp	r3, r4
 80090e8:	bf04      	itt	eq
 80090ea:	2301      	moveq	r3, #1
 80090ec:	61a3      	streq	r3, [r4, #24]
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 f820 	bl	8009134 <__sfp>
 80090f4:	6060      	str	r0, [r4, #4]
 80090f6:	4620      	mov	r0, r4
 80090f8:	f000 f81c 	bl	8009134 <__sfp>
 80090fc:	60a0      	str	r0, [r4, #8]
 80090fe:	4620      	mov	r0, r4
 8009100:	f000 f818 	bl	8009134 <__sfp>
 8009104:	2200      	movs	r2, #0
 8009106:	60e0      	str	r0, [r4, #12]
 8009108:	2104      	movs	r1, #4
 800910a:	6860      	ldr	r0, [r4, #4]
 800910c:	f7ff ff82 	bl	8009014 <std>
 8009110:	68a0      	ldr	r0, [r4, #8]
 8009112:	2201      	movs	r2, #1
 8009114:	2109      	movs	r1, #9
 8009116:	f7ff ff7d 	bl	8009014 <std>
 800911a:	68e0      	ldr	r0, [r4, #12]
 800911c:	2202      	movs	r2, #2
 800911e:	2112      	movs	r1, #18
 8009120:	f7ff ff78 	bl	8009014 <std>
 8009124:	2301      	movs	r3, #1
 8009126:	61a3      	str	r3, [r4, #24]
 8009128:	e7d2      	b.n	80090d0 <__sinit+0xc>
 800912a:	bf00      	nop
 800912c:	0800b110 	.word	0x0800b110
 8009130:	0800905d 	.word	0x0800905d

08009134 <__sfp>:
 8009134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009136:	4607      	mov	r7, r0
 8009138:	f7ff ffac 	bl	8009094 <__sfp_lock_acquire>
 800913c:	4b1e      	ldr	r3, [pc, #120]	; (80091b8 <__sfp+0x84>)
 800913e:	681e      	ldr	r6, [r3, #0]
 8009140:	69b3      	ldr	r3, [r6, #24]
 8009142:	b913      	cbnz	r3, 800914a <__sfp+0x16>
 8009144:	4630      	mov	r0, r6
 8009146:	f7ff ffbd 	bl	80090c4 <__sinit>
 800914a:	3648      	adds	r6, #72	; 0x48
 800914c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009150:	3b01      	subs	r3, #1
 8009152:	d503      	bpl.n	800915c <__sfp+0x28>
 8009154:	6833      	ldr	r3, [r6, #0]
 8009156:	b30b      	cbz	r3, 800919c <__sfp+0x68>
 8009158:	6836      	ldr	r6, [r6, #0]
 800915a:	e7f7      	b.n	800914c <__sfp+0x18>
 800915c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009160:	b9d5      	cbnz	r5, 8009198 <__sfp+0x64>
 8009162:	4b16      	ldr	r3, [pc, #88]	; (80091bc <__sfp+0x88>)
 8009164:	60e3      	str	r3, [r4, #12]
 8009166:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800916a:	6665      	str	r5, [r4, #100]	; 0x64
 800916c:	f000 f847 	bl	80091fe <__retarget_lock_init_recursive>
 8009170:	f7ff ff96 	bl	80090a0 <__sfp_lock_release>
 8009174:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009178:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800917c:	6025      	str	r5, [r4, #0]
 800917e:	61a5      	str	r5, [r4, #24]
 8009180:	2208      	movs	r2, #8
 8009182:	4629      	mov	r1, r5
 8009184:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009188:	f7fd fb22 	bl	80067d0 <memset>
 800918c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009194:	4620      	mov	r0, r4
 8009196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009198:	3468      	adds	r4, #104	; 0x68
 800919a:	e7d9      	b.n	8009150 <__sfp+0x1c>
 800919c:	2104      	movs	r1, #4
 800919e:	4638      	mov	r0, r7
 80091a0:	f7ff ff62 	bl	8009068 <__sfmoreglue>
 80091a4:	4604      	mov	r4, r0
 80091a6:	6030      	str	r0, [r6, #0]
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d1d5      	bne.n	8009158 <__sfp+0x24>
 80091ac:	f7ff ff78 	bl	80090a0 <__sfp_lock_release>
 80091b0:	230c      	movs	r3, #12
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	e7ee      	b.n	8009194 <__sfp+0x60>
 80091b6:	bf00      	nop
 80091b8:	0800b110 	.word	0x0800b110
 80091bc:	ffff0001 	.word	0xffff0001

080091c0 <_fwalk_reent>:
 80091c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c4:	4606      	mov	r6, r0
 80091c6:	4688      	mov	r8, r1
 80091c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091cc:	2700      	movs	r7, #0
 80091ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091d2:	f1b9 0901 	subs.w	r9, r9, #1
 80091d6:	d505      	bpl.n	80091e4 <_fwalk_reent+0x24>
 80091d8:	6824      	ldr	r4, [r4, #0]
 80091da:	2c00      	cmp	r4, #0
 80091dc:	d1f7      	bne.n	80091ce <_fwalk_reent+0xe>
 80091de:	4638      	mov	r0, r7
 80091e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e4:	89ab      	ldrh	r3, [r5, #12]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d907      	bls.n	80091fa <_fwalk_reent+0x3a>
 80091ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091ee:	3301      	adds	r3, #1
 80091f0:	d003      	beq.n	80091fa <_fwalk_reent+0x3a>
 80091f2:	4629      	mov	r1, r5
 80091f4:	4630      	mov	r0, r6
 80091f6:	47c0      	blx	r8
 80091f8:	4307      	orrs	r7, r0
 80091fa:	3568      	adds	r5, #104	; 0x68
 80091fc:	e7e9      	b.n	80091d2 <_fwalk_reent+0x12>

080091fe <__retarget_lock_init_recursive>:
 80091fe:	4770      	bx	lr

08009200 <__retarget_lock_acquire_recursive>:
 8009200:	4770      	bx	lr

08009202 <__retarget_lock_release_recursive>:
 8009202:	4770      	bx	lr

08009204 <__swhatbuf_r>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	460e      	mov	r6, r1
 8009208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920c:	2900      	cmp	r1, #0
 800920e:	b096      	sub	sp, #88	; 0x58
 8009210:	4614      	mov	r4, r2
 8009212:	461d      	mov	r5, r3
 8009214:	da07      	bge.n	8009226 <__swhatbuf_r+0x22>
 8009216:	2300      	movs	r3, #0
 8009218:	602b      	str	r3, [r5, #0]
 800921a:	89b3      	ldrh	r3, [r6, #12]
 800921c:	061a      	lsls	r2, r3, #24
 800921e:	d410      	bmi.n	8009242 <__swhatbuf_r+0x3e>
 8009220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009224:	e00e      	b.n	8009244 <__swhatbuf_r+0x40>
 8009226:	466a      	mov	r2, sp
 8009228:	f000 f902 	bl	8009430 <_fstat_r>
 800922c:	2800      	cmp	r0, #0
 800922e:	dbf2      	blt.n	8009216 <__swhatbuf_r+0x12>
 8009230:	9a01      	ldr	r2, [sp, #4]
 8009232:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009236:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800923a:	425a      	negs	r2, r3
 800923c:	415a      	adcs	r2, r3
 800923e:	602a      	str	r2, [r5, #0]
 8009240:	e7ee      	b.n	8009220 <__swhatbuf_r+0x1c>
 8009242:	2340      	movs	r3, #64	; 0x40
 8009244:	2000      	movs	r0, #0
 8009246:	6023      	str	r3, [r4, #0]
 8009248:	b016      	add	sp, #88	; 0x58
 800924a:	bd70      	pop	{r4, r5, r6, pc}

0800924c <__smakebuf_r>:
 800924c:	898b      	ldrh	r3, [r1, #12]
 800924e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009250:	079d      	lsls	r5, r3, #30
 8009252:	4606      	mov	r6, r0
 8009254:	460c      	mov	r4, r1
 8009256:	d507      	bpl.n	8009268 <__smakebuf_r+0x1c>
 8009258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	6123      	str	r3, [r4, #16]
 8009260:	2301      	movs	r3, #1
 8009262:	6163      	str	r3, [r4, #20]
 8009264:	b002      	add	sp, #8
 8009266:	bd70      	pop	{r4, r5, r6, pc}
 8009268:	ab01      	add	r3, sp, #4
 800926a:	466a      	mov	r2, sp
 800926c:	f7ff ffca 	bl	8009204 <__swhatbuf_r>
 8009270:	9900      	ldr	r1, [sp, #0]
 8009272:	4605      	mov	r5, r0
 8009274:	4630      	mov	r0, r6
 8009276:	f7ff f9a1 	bl	80085bc <_malloc_r>
 800927a:	b948      	cbnz	r0, 8009290 <__smakebuf_r+0x44>
 800927c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009280:	059a      	lsls	r2, r3, #22
 8009282:	d4ef      	bmi.n	8009264 <__smakebuf_r+0x18>
 8009284:	f023 0303 	bic.w	r3, r3, #3
 8009288:	f043 0302 	orr.w	r3, r3, #2
 800928c:	81a3      	strh	r3, [r4, #12]
 800928e:	e7e3      	b.n	8009258 <__smakebuf_r+0xc>
 8009290:	4b0d      	ldr	r3, [pc, #52]	; (80092c8 <__smakebuf_r+0x7c>)
 8009292:	62b3      	str	r3, [r6, #40]	; 0x28
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	6020      	str	r0, [r4, #0]
 8009298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	9b00      	ldr	r3, [sp, #0]
 80092a0:	6163      	str	r3, [r4, #20]
 80092a2:	9b01      	ldr	r3, [sp, #4]
 80092a4:	6120      	str	r0, [r4, #16]
 80092a6:	b15b      	cbz	r3, 80092c0 <__smakebuf_r+0x74>
 80092a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ac:	4630      	mov	r0, r6
 80092ae:	f000 f8d1 	bl	8009454 <_isatty_r>
 80092b2:	b128      	cbz	r0, 80092c0 <__smakebuf_r+0x74>
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	f023 0303 	bic.w	r3, r3, #3
 80092ba:	f043 0301 	orr.w	r3, r3, #1
 80092be:	81a3      	strh	r3, [r4, #12]
 80092c0:	89a0      	ldrh	r0, [r4, #12]
 80092c2:	4305      	orrs	r5, r0
 80092c4:	81a5      	strh	r5, [r4, #12]
 80092c6:	e7cd      	b.n	8009264 <__smakebuf_r+0x18>
 80092c8:	0800905d 	.word	0x0800905d

080092cc <_malloc_usable_size_r>:
 80092cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092d0:	1f18      	subs	r0, r3, #4
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	bfbc      	itt	lt
 80092d6:	580b      	ldrlt	r3, [r1, r0]
 80092d8:	18c0      	addlt	r0, r0, r3
 80092da:	4770      	bx	lr

080092dc <_raise_r>:
 80092dc:	291f      	cmp	r1, #31
 80092de:	b538      	push	{r3, r4, r5, lr}
 80092e0:	4604      	mov	r4, r0
 80092e2:	460d      	mov	r5, r1
 80092e4:	d904      	bls.n	80092f0 <_raise_r+0x14>
 80092e6:	2316      	movs	r3, #22
 80092e8:	6003      	str	r3, [r0, #0]
 80092ea:	f04f 30ff 	mov.w	r0, #4294967295
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092f2:	b112      	cbz	r2, 80092fa <_raise_r+0x1e>
 80092f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092f8:	b94b      	cbnz	r3, 800930e <_raise_r+0x32>
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 f830 	bl	8009360 <_getpid_r>
 8009300:	462a      	mov	r2, r5
 8009302:	4601      	mov	r1, r0
 8009304:	4620      	mov	r0, r4
 8009306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800930a:	f000 b817 	b.w	800933c <_kill_r>
 800930e:	2b01      	cmp	r3, #1
 8009310:	d00a      	beq.n	8009328 <_raise_r+0x4c>
 8009312:	1c59      	adds	r1, r3, #1
 8009314:	d103      	bne.n	800931e <_raise_r+0x42>
 8009316:	2316      	movs	r3, #22
 8009318:	6003      	str	r3, [r0, #0]
 800931a:	2001      	movs	r0, #1
 800931c:	e7e7      	b.n	80092ee <_raise_r+0x12>
 800931e:	2400      	movs	r4, #0
 8009320:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009324:	4628      	mov	r0, r5
 8009326:	4798      	blx	r3
 8009328:	2000      	movs	r0, #0
 800932a:	e7e0      	b.n	80092ee <_raise_r+0x12>

0800932c <raise>:
 800932c:	4b02      	ldr	r3, [pc, #8]	; (8009338 <raise+0xc>)
 800932e:	4601      	mov	r1, r0
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	f7ff bfd3 	b.w	80092dc <_raise_r>
 8009336:	bf00      	nop
 8009338:	2000001c 	.word	0x2000001c

0800933c <_kill_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	4d07      	ldr	r5, [pc, #28]	; (800935c <_kill_r+0x20>)
 8009340:	2300      	movs	r3, #0
 8009342:	4604      	mov	r4, r0
 8009344:	4608      	mov	r0, r1
 8009346:	4611      	mov	r1, r2
 8009348:	602b      	str	r3, [r5, #0]
 800934a:	f7f9 f9f7 	bl	800273c <_kill>
 800934e:	1c43      	adds	r3, r0, #1
 8009350:	d102      	bne.n	8009358 <_kill_r+0x1c>
 8009352:	682b      	ldr	r3, [r5, #0]
 8009354:	b103      	cbz	r3, 8009358 <_kill_r+0x1c>
 8009356:	6023      	str	r3, [r4, #0]
 8009358:	bd38      	pop	{r3, r4, r5, pc}
 800935a:	bf00      	nop
 800935c:	20000850 	.word	0x20000850

08009360 <_getpid_r>:
 8009360:	f7f9 b9e4 	b.w	800272c <_getpid>

08009364 <__sread>:
 8009364:	b510      	push	{r4, lr}
 8009366:	460c      	mov	r4, r1
 8009368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936c:	f000 f894 	bl	8009498 <_read_r>
 8009370:	2800      	cmp	r0, #0
 8009372:	bfab      	itete	ge
 8009374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009376:	89a3      	ldrhlt	r3, [r4, #12]
 8009378:	181b      	addge	r3, r3, r0
 800937a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800937e:	bfac      	ite	ge
 8009380:	6563      	strge	r3, [r4, #84]	; 0x54
 8009382:	81a3      	strhlt	r3, [r4, #12]
 8009384:	bd10      	pop	{r4, pc}

08009386 <__swrite>:
 8009386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800938a:	461f      	mov	r7, r3
 800938c:	898b      	ldrh	r3, [r1, #12]
 800938e:	05db      	lsls	r3, r3, #23
 8009390:	4605      	mov	r5, r0
 8009392:	460c      	mov	r4, r1
 8009394:	4616      	mov	r6, r2
 8009396:	d505      	bpl.n	80093a4 <__swrite+0x1e>
 8009398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800939c:	2302      	movs	r3, #2
 800939e:	2200      	movs	r2, #0
 80093a0:	f000 f868 	bl	8009474 <_lseek_r>
 80093a4:	89a3      	ldrh	r3, [r4, #12]
 80093a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093ae:	81a3      	strh	r3, [r4, #12]
 80093b0:	4632      	mov	r2, r6
 80093b2:	463b      	mov	r3, r7
 80093b4:	4628      	mov	r0, r5
 80093b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093ba:	f000 b817 	b.w	80093ec <_write_r>

080093be <__sseek>:
 80093be:	b510      	push	{r4, lr}
 80093c0:	460c      	mov	r4, r1
 80093c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c6:	f000 f855 	bl	8009474 <_lseek_r>
 80093ca:	1c43      	adds	r3, r0, #1
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	bf15      	itete	ne
 80093d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80093d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093da:	81a3      	strheq	r3, [r4, #12]
 80093dc:	bf18      	it	ne
 80093de:	81a3      	strhne	r3, [r4, #12]
 80093e0:	bd10      	pop	{r4, pc}

080093e2 <__sclose>:
 80093e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e6:	f000 b813 	b.w	8009410 <_close_r>
	...

080093ec <_write_r>:
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	4d07      	ldr	r5, [pc, #28]	; (800940c <_write_r+0x20>)
 80093f0:	4604      	mov	r4, r0
 80093f2:	4608      	mov	r0, r1
 80093f4:	4611      	mov	r1, r2
 80093f6:	2200      	movs	r2, #0
 80093f8:	602a      	str	r2, [r5, #0]
 80093fa:	461a      	mov	r2, r3
 80093fc:	f7f8 fd2a 	bl	8001e54 <_write>
 8009400:	1c43      	adds	r3, r0, #1
 8009402:	d102      	bne.n	800940a <_write_r+0x1e>
 8009404:	682b      	ldr	r3, [r5, #0]
 8009406:	b103      	cbz	r3, 800940a <_write_r+0x1e>
 8009408:	6023      	str	r3, [r4, #0]
 800940a:	bd38      	pop	{r3, r4, r5, pc}
 800940c:	20000850 	.word	0x20000850

08009410 <_close_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d06      	ldr	r5, [pc, #24]	; (800942c <_close_r+0x1c>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	602b      	str	r3, [r5, #0]
 800941c:	f7f9 f9c5 	bl	80027aa <_close>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_close_r+0x1a>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_close_r+0x1a>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20000850 	.word	0x20000850

08009430 <_fstat_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4d07      	ldr	r5, [pc, #28]	; (8009450 <_fstat_r+0x20>)
 8009434:	2300      	movs	r3, #0
 8009436:	4604      	mov	r4, r0
 8009438:	4608      	mov	r0, r1
 800943a:	4611      	mov	r1, r2
 800943c:	602b      	str	r3, [r5, #0]
 800943e:	f7f9 f9c0 	bl	80027c2 <_fstat>
 8009442:	1c43      	adds	r3, r0, #1
 8009444:	d102      	bne.n	800944c <_fstat_r+0x1c>
 8009446:	682b      	ldr	r3, [r5, #0]
 8009448:	b103      	cbz	r3, 800944c <_fstat_r+0x1c>
 800944a:	6023      	str	r3, [r4, #0]
 800944c:	bd38      	pop	{r3, r4, r5, pc}
 800944e:	bf00      	nop
 8009450:	20000850 	.word	0x20000850

08009454 <_isatty_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4d06      	ldr	r5, [pc, #24]	; (8009470 <_isatty_r+0x1c>)
 8009458:	2300      	movs	r3, #0
 800945a:	4604      	mov	r4, r0
 800945c:	4608      	mov	r0, r1
 800945e:	602b      	str	r3, [r5, #0]
 8009460:	f7f9 f9bf 	bl	80027e2 <_isatty>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d102      	bne.n	800946e <_isatty_r+0x1a>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b103      	cbz	r3, 800946e <_isatty_r+0x1a>
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	20000850 	.word	0x20000850

08009474 <_lseek_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	4d07      	ldr	r5, [pc, #28]	; (8009494 <_lseek_r+0x20>)
 8009478:	4604      	mov	r4, r0
 800947a:	4608      	mov	r0, r1
 800947c:	4611      	mov	r1, r2
 800947e:	2200      	movs	r2, #0
 8009480:	602a      	str	r2, [r5, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	f7f9 f9b8 	bl	80027f8 <_lseek>
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	d102      	bne.n	8009492 <_lseek_r+0x1e>
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	b103      	cbz	r3, 8009492 <_lseek_r+0x1e>
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	20000850 	.word	0x20000850

08009498 <_read_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4d07      	ldr	r5, [pc, #28]	; (80094b8 <_read_r+0x20>)
 800949c:	4604      	mov	r4, r0
 800949e:	4608      	mov	r0, r1
 80094a0:	4611      	mov	r1, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	602a      	str	r2, [r5, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	f7f9 f962 	bl	8002770 <_read>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_read_r+0x1e>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_read_r+0x1e>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	20000850 	.word	0x20000850

080094bc <atan2>:
 80094bc:	f000 b8b0 	b.w	8009620 <__ieee754_atan2>

080094c0 <pow>:
 80094c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c4:	ec59 8b10 	vmov	r8, r9, d0
 80094c8:	ec57 6b11 	vmov	r6, r7, d1
 80094cc:	f000 f974 	bl	80097b8 <__ieee754_pow>
 80094d0:	4b4e      	ldr	r3, [pc, #312]	; (800960c <pow+0x14c>)
 80094d2:	f993 3000 	ldrsb.w	r3, [r3]
 80094d6:	3301      	adds	r3, #1
 80094d8:	ec55 4b10 	vmov	r4, r5, d0
 80094dc:	d015      	beq.n	800950a <pow+0x4a>
 80094de:	4632      	mov	r2, r6
 80094e0:	463b      	mov	r3, r7
 80094e2:	4630      	mov	r0, r6
 80094e4:	4639      	mov	r1, r7
 80094e6:	f7f7 fb21 	bl	8000b2c <__aeabi_dcmpun>
 80094ea:	b970      	cbnz	r0, 800950a <pow+0x4a>
 80094ec:	4642      	mov	r2, r8
 80094ee:	464b      	mov	r3, r9
 80094f0:	4640      	mov	r0, r8
 80094f2:	4649      	mov	r1, r9
 80094f4:	f7f7 fb1a 	bl	8000b2c <__aeabi_dcmpun>
 80094f8:	2200      	movs	r2, #0
 80094fa:	2300      	movs	r3, #0
 80094fc:	b148      	cbz	r0, 8009512 <pow+0x52>
 80094fe:	4630      	mov	r0, r6
 8009500:	4639      	mov	r1, r7
 8009502:	f7f7 fae1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009506:	2800      	cmp	r0, #0
 8009508:	d17d      	bne.n	8009606 <pow+0x146>
 800950a:	ec45 4b10 	vmov	d0, r4, r5
 800950e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009512:	4640      	mov	r0, r8
 8009514:	4649      	mov	r1, r9
 8009516:	f7f7 fad7 	bl	8000ac8 <__aeabi_dcmpeq>
 800951a:	b1e0      	cbz	r0, 8009556 <pow+0x96>
 800951c:	2200      	movs	r2, #0
 800951e:	2300      	movs	r3, #0
 8009520:	4630      	mov	r0, r6
 8009522:	4639      	mov	r1, r7
 8009524:	f7f7 fad0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009528:	2800      	cmp	r0, #0
 800952a:	d16c      	bne.n	8009606 <pow+0x146>
 800952c:	ec47 6b10 	vmov	d0, r6, r7
 8009530:	f001 f8c3 	bl	800a6ba <finite>
 8009534:	2800      	cmp	r0, #0
 8009536:	d0e8      	beq.n	800950a <pow+0x4a>
 8009538:	2200      	movs	r2, #0
 800953a:	2300      	movs	r3, #0
 800953c:	4630      	mov	r0, r6
 800953e:	4639      	mov	r1, r7
 8009540:	f7f7 facc 	bl	8000adc <__aeabi_dcmplt>
 8009544:	2800      	cmp	r0, #0
 8009546:	d0e0      	beq.n	800950a <pow+0x4a>
 8009548:	f7fd f8f0 	bl	800672c <__errno>
 800954c:	2321      	movs	r3, #33	; 0x21
 800954e:	6003      	str	r3, [r0, #0]
 8009550:	2400      	movs	r4, #0
 8009552:	4d2f      	ldr	r5, [pc, #188]	; (8009610 <pow+0x150>)
 8009554:	e7d9      	b.n	800950a <pow+0x4a>
 8009556:	ec45 4b10 	vmov	d0, r4, r5
 800955a:	f001 f8ae 	bl	800a6ba <finite>
 800955e:	bbb8      	cbnz	r0, 80095d0 <pow+0x110>
 8009560:	ec49 8b10 	vmov	d0, r8, r9
 8009564:	f001 f8a9 	bl	800a6ba <finite>
 8009568:	b390      	cbz	r0, 80095d0 <pow+0x110>
 800956a:	ec47 6b10 	vmov	d0, r6, r7
 800956e:	f001 f8a4 	bl	800a6ba <finite>
 8009572:	b368      	cbz	r0, 80095d0 <pow+0x110>
 8009574:	4622      	mov	r2, r4
 8009576:	462b      	mov	r3, r5
 8009578:	4620      	mov	r0, r4
 800957a:	4629      	mov	r1, r5
 800957c:	f7f7 fad6 	bl	8000b2c <__aeabi_dcmpun>
 8009580:	b160      	cbz	r0, 800959c <pow+0xdc>
 8009582:	f7fd f8d3 	bl	800672c <__errno>
 8009586:	2321      	movs	r3, #33	; 0x21
 8009588:	6003      	str	r3, [r0, #0]
 800958a:	2200      	movs	r2, #0
 800958c:	2300      	movs	r3, #0
 800958e:	4610      	mov	r0, r2
 8009590:	4619      	mov	r1, r3
 8009592:	f7f7 f95b 	bl	800084c <__aeabi_ddiv>
 8009596:	4604      	mov	r4, r0
 8009598:	460d      	mov	r5, r1
 800959a:	e7b6      	b.n	800950a <pow+0x4a>
 800959c:	f7fd f8c6 	bl	800672c <__errno>
 80095a0:	2322      	movs	r3, #34	; 0x22
 80095a2:	6003      	str	r3, [r0, #0]
 80095a4:	2200      	movs	r2, #0
 80095a6:	2300      	movs	r3, #0
 80095a8:	4640      	mov	r0, r8
 80095aa:	4649      	mov	r1, r9
 80095ac:	f7f7 fa96 	bl	8000adc <__aeabi_dcmplt>
 80095b0:	2400      	movs	r4, #0
 80095b2:	b158      	cbz	r0, 80095cc <pow+0x10c>
 80095b4:	ec47 6b10 	vmov	d0, r6, r7
 80095b8:	f001 f892 	bl	800a6e0 <rint>
 80095bc:	4632      	mov	r2, r6
 80095be:	ec51 0b10 	vmov	r0, r1, d0
 80095c2:	463b      	mov	r3, r7
 80095c4:	f7f7 fa80 	bl	8000ac8 <__aeabi_dcmpeq>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d0c2      	beq.n	8009552 <pow+0x92>
 80095cc:	4d11      	ldr	r5, [pc, #68]	; (8009614 <pow+0x154>)
 80095ce:	e79c      	b.n	800950a <pow+0x4a>
 80095d0:	2200      	movs	r2, #0
 80095d2:	2300      	movs	r3, #0
 80095d4:	4620      	mov	r0, r4
 80095d6:	4629      	mov	r1, r5
 80095d8:	f7f7 fa76 	bl	8000ac8 <__aeabi_dcmpeq>
 80095dc:	2800      	cmp	r0, #0
 80095de:	d094      	beq.n	800950a <pow+0x4a>
 80095e0:	ec49 8b10 	vmov	d0, r8, r9
 80095e4:	f001 f869 	bl	800a6ba <finite>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d08e      	beq.n	800950a <pow+0x4a>
 80095ec:	ec47 6b10 	vmov	d0, r6, r7
 80095f0:	f001 f863 	bl	800a6ba <finite>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d088      	beq.n	800950a <pow+0x4a>
 80095f8:	f7fd f898 	bl	800672c <__errno>
 80095fc:	2322      	movs	r3, #34	; 0x22
 80095fe:	6003      	str	r3, [r0, #0]
 8009600:	2400      	movs	r4, #0
 8009602:	2500      	movs	r5, #0
 8009604:	e781      	b.n	800950a <pow+0x4a>
 8009606:	4d04      	ldr	r5, [pc, #16]	; (8009618 <pow+0x158>)
 8009608:	2400      	movs	r4, #0
 800960a:	e77e      	b.n	800950a <pow+0x4a>
 800960c:	200001ec 	.word	0x200001ec
 8009610:	fff00000 	.word	0xfff00000
 8009614:	7ff00000 	.word	0x7ff00000
 8009618:	3ff00000 	.word	0x3ff00000
 800961c:	00000000 	.word	0x00000000

08009620 <__ieee754_atan2>:
 8009620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009624:	ec57 6b11 	vmov	r6, r7, d1
 8009628:	4273      	negs	r3, r6
 800962a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80097b0 <__ieee754_atan2+0x190>
 800962e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009632:	4333      	orrs	r3, r6
 8009634:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009638:	4573      	cmp	r3, lr
 800963a:	ec51 0b10 	vmov	r0, r1, d0
 800963e:	ee11 8a10 	vmov	r8, s2
 8009642:	d80a      	bhi.n	800965a <__ieee754_atan2+0x3a>
 8009644:	4244      	negs	r4, r0
 8009646:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800964a:	4304      	orrs	r4, r0
 800964c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009650:	4574      	cmp	r4, lr
 8009652:	ee10 9a10 	vmov	r9, s0
 8009656:	468c      	mov	ip, r1
 8009658:	d907      	bls.n	800966a <__ieee754_atan2+0x4a>
 800965a:	4632      	mov	r2, r6
 800965c:	463b      	mov	r3, r7
 800965e:	f7f6 fe15 	bl	800028c <__adddf3>
 8009662:	ec41 0b10 	vmov	d0, r0, r1
 8009666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800966a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800966e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009672:	4334      	orrs	r4, r6
 8009674:	d103      	bne.n	800967e <__ieee754_atan2+0x5e>
 8009676:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800967a:	f000 be75 	b.w	800a368 <atan>
 800967e:	17bc      	asrs	r4, r7, #30
 8009680:	f004 0402 	and.w	r4, r4, #2
 8009684:	ea53 0909 	orrs.w	r9, r3, r9
 8009688:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800968c:	d107      	bne.n	800969e <__ieee754_atan2+0x7e>
 800968e:	2c02      	cmp	r4, #2
 8009690:	d060      	beq.n	8009754 <__ieee754_atan2+0x134>
 8009692:	2c03      	cmp	r4, #3
 8009694:	d1e5      	bne.n	8009662 <__ieee754_atan2+0x42>
 8009696:	a142      	add	r1, pc, #264	; (adr r1, 80097a0 <__ieee754_atan2+0x180>)
 8009698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800969c:	e7e1      	b.n	8009662 <__ieee754_atan2+0x42>
 800969e:	ea52 0808 	orrs.w	r8, r2, r8
 80096a2:	d106      	bne.n	80096b2 <__ieee754_atan2+0x92>
 80096a4:	f1bc 0f00 	cmp.w	ip, #0
 80096a8:	da5f      	bge.n	800976a <__ieee754_atan2+0x14a>
 80096aa:	a13f      	add	r1, pc, #252	; (adr r1, 80097a8 <__ieee754_atan2+0x188>)
 80096ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096b0:	e7d7      	b.n	8009662 <__ieee754_atan2+0x42>
 80096b2:	4572      	cmp	r2, lr
 80096b4:	d10f      	bne.n	80096d6 <__ieee754_atan2+0xb6>
 80096b6:	4293      	cmp	r3, r2
 80096b8:	f104 34ff 	add.w	r4, r4, #4294967295
 80096bc:	d107      	bne.n	80096ce <__ieee754_atan2+0xae>
 80096be:	2c02      	cmp	r4, #2
 80096c0:	d84c      	bhi.n	800975c <__ieee754_atan2+0x13c>
 80096c2:	4b35      	ldr	r3, [pc, #212]	; (8009798 <__ieee754_atan2+0x178>)
 80096c4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80096c8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80096cc:	e7c9      	b.n	8009662 <__ieee754_atan2+0x42>
 80096ce:	2c02      	cmp	r4, #2
 80096d0:	d848      	bhi.n	8009764 <__ieee754_atan2+0x144>
 80096d2:	4b32      	ldr	r3, [pc, #200]	; (800979c <__ieee754_atan2+0x17c>)
 80096d4:	e7f6      	b.n	80096c4 <__ieee754_atan2+0xa4>
 80096d6:	4573      	cmp	r3, lr
 80096d8:	d0e4      	beq.n	80096a4 <__ieee754_atan2+0x84>
 80096da:	1a9b      	subs	r3, r3, r2
 80096dc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80096e0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80096e4:	da1e      	bge.n	8009724 <__ieee754_atan2+0x104>
 80096e6:	2f00      	cmp	r7, #0
 80096e8:	da01      	bge.n	80096ee <__ieee754_atan2+0xce>
 80096ea:	323c      	adds	r2, #60	; 0x3c
 80096ec:	db1e      	blt.n	800972c <__ieee754_atan2+0x10c>
 80096ee:	4632      	mov	r2, r6
 80096f0:	463b      	mov	r3, r7
 80096f2:	f7f7 f8ab 	bl	800084c <__aeabi_ddiv>
 80096f6:	ec41 0b10 	vmov	d0, r0, r1
 80096fa:	f000 ffd5 	bl	800a6a8 <fabs>
 80096fe:	f000 fe33 	bl	800a368 <atan>
 8009702:	ec51 0b10 	vmov	r0, r1, d0
 8009706:	2c01      	cmp	r4, #1
 8009708:	d013      	beq.n	8009732 <__ieee754_atan2+0x112>
 800970a:	2c02      	cmp	r4, #2
 800970c:	d015      	beq.n	800973a <__ieee754_atan2+0x11a>
 800970e:	2c00      	cmp	r4, #0
 8009710:	d0a7      	beq.n	8009662 <__ieee754_atan2+0x42>
 8009712:	a319      	add	r3, pc, #100	; (adr r3, 8009778 <__ieee754_atan2+0x158>)
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f7f6 fdb6 	bl	8000288 <__aeabi_dsub>
 800971c:	a318      	add	r3, pc, #96	; (adr r3, 8009780 <__ieee754_atan2+0x160>)
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	e014      	b.n	800974e <__ieee754_atan2+0x12e>
 8009724:	a118      	add	r1, pc, #96	; (adr r1, 8009788 <__ieee754_atan2+0x168>)
 8009726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800972a:	e7ec      	b.n	8009706 <__ieee754_atan2+0xe6>
 800972c:	2000      	movs	r0, #0
 800972e:	2100      	movs	r1, #0
 8009730:	e7e9      	b.n	8009706 <__ieee754_atan2+0xe6>
 8009732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009736:	4619      	mov	r1, r3
 8009738:	e793      	b.n	8009662 <__ieee754_atan2+0x42>
 800973a:	a30f      	add	r3, pc, #60	; (adr r3, 8009778 <__ieee754_atan2+0x158>)
 800973c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009740:	f7f6 fda2 	bl	8000288 <__aeabi_dsub>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	a10d      	add	r1, pc, #52	; (adr r1, 8009780 <__ieee754_atan2+0x160>)
 800974a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800974e:	f7f6 fd9b 	bl	8000288 <__aeabi_dsub>
 8009752:	e786      	b.n	8009662 <__ieee754_atan2+0x42>
 8009754:	a10a      	add	r1, pc, #40	; (adr r1, 8009780 <__ieee754_atan2+0x160>)
 8009756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800975a:	e782      	b.n	8009662 <__ieee754_atan2+0x42>
 800975c:	a10c      	add	r1, pc, #48	; (adr r1, 8009790 <__ieee754_atan2+0x170>)
 800975e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009762:	e77e      	b.n	8009662 <__ieee754_atan2+0x42>
 8009764:	2000      	movs	r0, #0
 8009766:	2100      	movs	r1, #0
 8009768:	e77b      	b.n	8009662 <__ieee754_atan2+0x42>
 800976a:	a107      	add	r1, pc, #28	; (adr r1, 8009788 <__ieee754_atan2+0x168>)
 800976c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009770:	e777      	b.n	8009662 <__ieee754_atan2+0x42>
 8009772:	bf00      	nop
 8009774:	f3af 8000 	nop.w
 8009778:	33145c07 	.word	0x33145c07
 800977c:	3ca1a626 	.word	0x3ca1a626
 8009780:	54442d18 	.word	0x54442d18
 8009784:	400921fb 	.word	0x400921fb
 8009788:	54442d18 	.word	0x54442d18
 800978c:	3ff921fb 	.word	0x3ff921fb
 8009790:	54442d18 	.word	0x54442d18
 8009794:	3fe921fb 	.word	0x3fe921fb
 8009798:	0800b4f8 	.word	0x0800b4f8
 800979c:	0800b510 	.word	0x0800b510
 80097a0:	54442d18 	.word	0x54442d18
 80097a4:	c00921fb 	.word	0xc00921fb
 80097a8:	54442d18 	.word	0x54442d18
 80097ac:	bff921fb 	.word	0xbff921fb
 80097b0:	7ff00000 	.word	0x7ff00000
 80097b4:	00000000 	.word	0x00000000

080097b8 <__ieee754_pow>:
 80097b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	ed2d 8b06 	vpush	{d8-d10}
 80097c0:	b08d      	sub	sp, #52	; 0x34
 80097c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80097c6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80097ca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80097ce:	ea56 0100 	orrs.w	r1, r6, r0
 80097d2:	ec53 2b10 	vmov	r2, r3, d0
 80097d6:	f000 84d1 	beq.w	800a17c <__ieee754_pow+0x9c4>
 80097da:	497f      	ldr	r1, [pc, #508]	; (80099d8 <__ieee754_pow+0x220>)
 80097dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80097e0:	428c      	cmp	r4, r1
 80097e2:	ee10 8a10 	vmov	r8, s0
 80097e6:	4699      	mov	r9, r3
 80097e8:	dc09      	bgt.n	80097fe <__ieee754_pow+0x46>
 80097ea:	d103      	bne.n	80097f4 <__ieee754_pow+0x3c>
 80097ec:	b97a      	cbnz	r2, 800980e <__ieee754_pow+0x56>
 80097ee:	42a6      	cmp	r6, r4
 80097f0:	dd02      	ble.n	80097f8 <__ieee754_pow+0x40>
 80097f2:	e00c      	b.n	800980e <__ieee754_pow+0x56>
 80097f4:	428e      	cmp	r6, r1
 80097f6:	dc02      	bgt.n	80097fe <__ieee754_pow+0x46>
 80097f8:	428e      	cmp	r6, r1
 80097fa:	d110      	bne.n	800981e <__ieee754_pow+0x66>
 80097fc:	b178      	cbz	r0, 800981e <__ieee754_pow+0x66>
 80097fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009802:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009806:	ea54 0308 	orrs.w	r3, r4, r8
 800980a:	f000 84b7 	beq.w	800a17c <__ieee754_pow+0x9c4>
 800980e:	4873      	ldr	r0, [pc, #460]	; (80099dc <__ieee754_pow+0x224>)
 8009810:	b00d      	add	sp, #52	; 0x34
 8009812:	ecbd 8b06 	vpop	{d8-d10}
 8009816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981a:	f000 bf59 	b.w	800a6d0 <nan>
 800981e:	f1b9 0f00 	cmp.w	r9, #0
 8009822:	da36      	bge.n	8009892 <__ieee754_pow+0xda>
 8009824:	496e      	ldr	r1, [pc, #440]	; (80099e0 <__ieee754_pow+0x228>)
 8009826:	428e      	cmp	r6, r1
 8009828:	dc51      	bgt.n	80098ce <__ieee754_pow+0x116>
 800982a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800982e:	428e      	cmp	r6, r1
 8009830:	f340 84af 	ble.w	800a192 <__ieee754_pow+0x9da>
 8009834:	1531      	asrs	r1, r6, #20
 8009836:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800983a:	2914      	cmp	r1, #20
 800983c:	dd0f      	ble.n	800985e <__ieee754_pow+0xa6>
 800983e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8009842:	fa20 fc01 	lsr.w	ip, r0, r1
 8009846:	fa0c f101 	lsl.w	r1, ip, r1
 800984a:	4281      	cmp	r1, r0
 800984c:	f040 84a1 	bne.w	800a192 <__ieee754_pow+0x9da>
 8009850:	f00c 0c01 	and.w	ip, ip, #1
 8009854:	f1cc 0102 	rsb	r1, ip, #2
 8009858:	9100      	str	r1, [sp, #0]
 800985a:	b180      	cbz	r0, 800987e <__ieee754_pow+0xc6>
 800985c:	e059      	b.n	8009912 <__ieee754_pow+0x15a>
 800985e:	2800      	cmp	r0, #0
 8009860:	d155      	bne.n	800990e <__ieee754_pow+0x156>
 8009862:	f1c1 0114 	rsb	r1, r1, #20
 8009866:	fa46 fc01 	asr.w	ip, r6, r1
 800986a:	fa0c f101 	lsl.w	r1, ip, r1
 800986e:	42b1      	cmp	r1, r6
 8009870:	f040 848c 	bne.w	800a18c <__ieee754_pow+0x9d4>
 8009874:	f00c 0c01 	and.w	ip, ip, #1
 8009878:	f1cc 0102 	rsb	r1, ip, #2
 800987c:	9100      	str	r1, [sp, #0]
 800987e:	4959      	ldr	r1, [pc, #356]	; (80099e4 <__ieee754_pow+0x22c>)
 8009880:	428e      	cmp	r6, r1
 8009882:	d12d      	bne.n	80098e0 <__ieee754_pow+0x128>
 8009884:	2f00      	cmp	r7, #0
 8009886:	da79      	bge.n	800997c <__ieee754_pow+0x1c4>
 8009888:	4956      	ldr	r1, [pc, #344]	; (80099e4 <__ieee754_pow+0x22c>)
 800988a:	2000      	movs	r0, #0
 800988c:	f7f6 ffde 	bl	800084c <__aeabi_ddiv>
 8009890:	e016      	b.n	80098c0 <__ieee754_pow+0x108>
 8009892:	2100      	movs	r1, #0
 8009894:	9100      	str	r1, [sp, #0]
 8009896:	2800      	cmp	r0, #0
 8009898:	d13b      	bne.n	8009912 <__ieee754_pow+0x15a>
 800989a:	494f      	ldr	r1, [pc, #316]	; (80099d8 <__ieee754_pow+0x220>)
 800989c:	428e      	cmp	r6, r1
 800989e:	d1ee      	bne.n	800987e <__ieee754_pow+0xc6>
 80098a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80098a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80098a8:	ea53 0308 	orrs.w	r3, r3, r8
 80098ac:	f000 8466 	beq.w	800a17c <__ieee754_pow+0x9c4>
 80098b0:	4b4d      	ldr	r3, [pc, #308]	; (80099e8 <__ieee754_pow+0x230>)
 80098b2:	429c      	cmp	r4, r3
 80098b4:	dd0d      	ble.n	80098d2 <__ieee754_pow+0x11a>
 80098b6:	2f00      	cmp	r7, #0
 80098b8:	f280 8464 	bge.w	800a184 <__ieee754_pow+0x9cc>
 80098bc:	2000      	movs	r0, #0
 80098be:	2100      	movs	r1, #0
 80098c0:	ec41 0b10 	vmov	d0, r0, r1
 80098c4:	b00d      	add	sp, #52	; 0x34
 80098c6:	ecbd 8b06 	vpop	{d8-d10}
 80098ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ce:	2102      	movs	r1, #2
 80098d0:	e7e0      	b.n	8009894 <__ieee754_pow+0xdc>
 80098d2:	2f00      	cmp	r7, #0
 80098d4:	daf2      	bge.n	80098bc <__ieee754_pow+0x104>
 80098d6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80098da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80098de:	e7ef      	b.n	80098c0 <__ieee754_pow+0x108>
 80098e0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80098e4:	d104      	bne.n	80098f0 <__ieee754_pow+0x138>
 80098e6:	4610      	mov	r0, r2
 80098e8:	4619      	mov	r1, r3
 80098ea:	f7f6 fe85 	bl	80005f8 <__aeabi_dmul>
 80098ee:	e7e7      	b.n	80098c0 <__ieee754_pow+0x108>
 80098f0:	493e      	ldr	r1, [pc, #248]	; (80099ec <__ieee754_pow+0x234>)
 80098f2:	428f      	cmp	r7, r1
 80098f4:	d10d      	bne.n	8009912 <__ieee754_pow+0x15a>
 80098f6:	f1b9 0f00 	cmp.w	r9, #0
 80098fa:	db0a      	blt.n	8009912 <__ieee754_pow+0x15a>
 80098fc:	ec43 2b10 	vmov	d0, r2, r3
 8009900:	b00d      	add	sp, #52	; 0x34
 8009902:	ecbd 8b06 	vpop	{d8-d10}
 8009906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990a:	f000 bc77 	b.w	800a1fc <__ieee754_sqrt>
 800990e:	2100      	movs	r1, #0
 8009910:	9100      	str	r1, [sp, #0]
 8009912:	ec43 2b10 	vmov	d0, r2, r3
 8009916:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800991a:	f000 fec5 	bl	800a6a8 <fabs>
 800991e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009922:	ec51 0b10 	vmov	r0, r1, d0
 8009926:	f1b8 0f00 	cmp.w	r8, #0
 800992a:	d12a      	bne.n	8009982 <__ieee754_pow+0x1ca>
 800992c:	b12c      	cbz	r4, 800993a <__ieee754_pow+0x182>
 800992e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80099e4 <__ieee754_pow+0x22c>
 8009932:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8009936:	45e6      	cmp	lr, ip
 8009938:	d123      	bne.n	8009982 <__ieee754_pow+0x1ca>
 800993a:	2f00      	cmp	r7, #0
 800993c:	da05      	bge.n	800994a <__ieee754_pow+0x192>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	2000      	movs	r0, #0
 8009944:	4927      	ldr	r1, [pc, #156]	; (80099e4 <__ieee754_pow+0x22c>)
 8009946:	f7f6 ff81 	bl	800084c <__aeabi_ddiv>
 800994a:	f1b9 0f00 	cmp.w	r9, #0
 800994e:	dab7      	bge.n	80098c0 <__ieee754_pow+0x108>
 8009950:	9b00      	ldr	r3, [sp, #0]
 8009952:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009956:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800995a:	4323      	orrs	r3, r4
 800995c:	d108      	bne.n	8009970 <__ieee754_pow+0x1b8>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4610      	mov	r0, r2
 8009964:	4619      	mov	r1, r3
 8009966:	f7f6 fc8f 	bl	8000288 <__aeabi_dsub>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	e78d      	b.n	800988c <__ieee754_pow+0xd4>
 8009970:	9b00      	ldr	r3, [sp, #0]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d1a4      	bne.n	80098c0 <__ieee754_pow+0x108>
 8009976:	4602      	mov	r2, r0
 8009978:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800997c:	4610      	mov	r0, r2
 800997e:	4619      	mov	r1, r3
 8009980:	e79e      	b.n	80098c0 <__ieee754_pow+0x108>
 8009982:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8009986:	f10c 35ff 	add.w	r5, ip, #4294967295
 800998a:	950a      	str	r5, [sp, #40]	; 0x28
 800998c:	9d00      	ldr	r5, [sp, #0]
 800998e:	46ac      	mov	ip, r5
 8009990:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009992:	ea5c 0505 	orrs.w	r5, ip, r5
 8009996:	d0e4      	beq.n	8009962 <__ieee754_pow+0x1aa>
 8009998:	4b15      	ldr	r3, [pc, #84]	; (80099f0 <__ieee754_pow+0x238>)
 800999a:	429e      	cmp	r6, r3
 800999c:	f340 80fc 	ble.w	8009b98 <__ieee754_pow+0x3e0>
 80099a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80099a4:	429e      	cmp	r6, r3
 80099a6:	4b10      	ldr	r3, [pc, #64]	; (80099e8 <__ieee754_pow+0x230>)
 80099a8:	dd07      	ble.n	80099ba <__ieee754_pow+0x202>
 80099aa:	429c      	cmp	r4, r3
 80099ac:	dc0a      	bgt.n	80099c4 <__ieee754_pow+0x20c>
 80099ae:	2f00      	cmp	r7, #0
 80099b0:	da84      	bge.n	80098bc <__ieee754_pow+0x104>
 80099b2:	a307      	add	r3, pc, #28	; (adr r3, 80099d0 <__ieee754_pow+0x218>)
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	e795      	b.n	80098e6 <__ieee754_pow+0x12e>
 80099ba:	429c      	cmp	r4, r3
 80099bc:	dbf7      	blt.n	80099ae <__ieee754_pow+0x1f6>
 80099be:	4b09      	ldr	r3, [pc, #36]	; (80099e4 <__ieee754_pow+0x22c>)
 80099c0:	429c      	cmp	r4, r3
 80099c2:	dd17      	ble.n	80099f4 <__ieee754_pow+0x23c>
 80099c4:	2f00      	cmp	r7, #0
 80099c6:	dcf4      	bgt.n	80099b2 <__ieee754_pow+0x1fa>
 80099c8:	e778      	b.n	80098bc <__ieee754_pow+0x104>
 80099ca:	bf00      	nop
 80099cc:	f3af 8000 	nop.w
 80099d0:	8800759c 	.word	0x8800759c
 80099d4:	7e37e43c 	.word	0x7e37e43c
 80099d8:	7ff00000 	.word	0x7ff00000
 80099dc:	0800b388 	.word	0x0800b388
 80099e0:	433fffff 	.word	0x433fffff
 80099e4:	3ff00000 	.word	0x3ff00000
 80099e8:	3fefffff 	.word	0x3fefffff
 80099ec:	3fe00000 	.word	0x3fe00000
 80099f0:	41e00000 	.word	0x41e00000
 80099f4:	4b64      	ldr	r3, [pc, #400]	; (8009b88 <__ieee754_pow+0x3d0>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	f7f6 fc46 	bl	8000288 <__aeabi_dsub>
 80099fc:	a356      	add	r3, pc, #344	; (adr r3, 8009b58 <__ieee754_pow+0x3a0>)
 80099fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a02:	4604      	mov	r4, r0
 8009a04:	460d      	mov	r5, r1
 8009a06:	f7f6 fdf7 	bl	80005f8 <__aeabi_dmul>
 8009a0a:	a355      	add	r3, pc, #340	; (adr r3, 8009b60 <__ieee754_pow+0x3a8>)
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	4606      	mov	r6, r0
 8009a12:	460f      	mov	r7, r1
 8009a14:	4620      	mov	r0, r4
 8009a16:	4629      	mov	r1, r5
 8009a18:	f7f6 fdee 	bl	80005f8 <__aeabi_dmul>
 8009a1c:	4b5b      	ldr	r3, [pc, #364]	; (8009b8c <__ieee754_pow+0x3d4>)
 8009a1e:	4682      	mov	sl, r0
 8009a20:	468b      	mov	fp, r1
 8009a22:	2200      	movs	r2, #0
 8009a24:	4620      	mov	r0, r4
 8009a26:	4629      	mov	r1, r5
 8009a28:	f7f6 fde6 	bl	80005f8 <__aeabi_dmul>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	a14d      	add	r1, pc, #308	; (adr r1, 8009b68 <__ieee754_pow+0x3b0>)
 8009a32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a36:	f7f6 fc27 	bl	8000288 <__aeabi_dsub>
 8009a3a:	4622      	mov	r2, r4
 8009a3c:	462b      	mov	r3, r5
 8009a3e:	f7f6 fddb 	bl	80005f8 <__aeabi_dmul>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	2000      	movs	r0, #0
 8009a48:	4951      	ldr	r1, [pc, #324]	; (8009b90 <__ieee754_pow+0x3d8>)
 8009a4a:	f7f6 fc1d 	bl	8000288 <__aeabi_dsub>
 8009a4e:	4622      	mov	r2, r4
 8009a50:	4680      	mov	r8, r0
 8009a52:	4689      	mov	r9, r1
 8009a54:	462b      	mov	r3, r5
 8009a56:	4620      	mov	r0, r4
 8009a58:	4629      	mov	r1, r5
 8009a5a:	f7f6 fdcd 	bl	80005f8 <__aeabi_dmul>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4640      	mov	r0, r8
 8009a64:	4649      	mov	r1, r9
 8009a66:	f7f6 fdc7 	bl	80005f8 <__aeabi_dmul>
 8009a6a:	a341      	add	r3, pc, #260	; (adr r3, 8009b70 <__ieee754_pow+0x3b8>)
 8009a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a70:	f7f6 fdc2 	bl	80005f8 <__aeabi_dmul>
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	4650      	mov	r0, sl
 8009a7a:	4659      	mov	r1, fp
 8009a7c:	f7f6 fc04 	bl	8000288 <__aeabi_dsub>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	4680      	mov	r8, r0
 8009a86:	4689      	mov	r9, r1
 8009a88:	4630      	mov	r0, r6
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	f7f6 fbfe 	bl	800028c <__adddf3>
 8009a90:	2400      	movs	r4, #0
 8009a92:	4632      	mov	r2, r6
 8009a94:	463b      	mov	r3, r7
 8009a96:	4620      	mov	r0, r4
 8009a98:	460d      	mov	r5, r1
 8009a9a:	f7f6 fbf5 	bl	8000288 <__aeabi_dsub>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4640      	mov	r0, r8
 8009aa4:	4649      	mov	r1, r9
 8009aa6:	f7f6 fbef 	bl	8000288 <__aeabi_dsub>
 8009aaa:	9b00      	ldr	r3, [sp, #0]
 8009aac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	4682      	mov	sl, r0
 8009ab4:	468b      	mov	fp, r1
 8009ab6:	f040 81f1 	bne.w	8009e9c <__ieee754_pow+0x6e4>
 8009aba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009b78 <__ieee754_pow+0x3c0>
 8009abe:	eeb0 8a47 	vmov.f32	s16, s14
 8009ac2:	eef0 8a67 	vmov.f32	s17, s15
 8009ac6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009aca:	2600      	movs	r6, #0
 8009acc:	4632      	mov	r2, r6
 8009ace:	463b      	mov	r3, r7
 8009ad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ad4:	f7f6 fbd8 	bl	8000288 <__aeabi_dsub>
 8009ad8:	4622      	mov	r2, r4
 8009ada:	462b      	mov	r3, r5
 8009adc:	f7f6 fd8c 	bl	80005f8 <__aeabi_dmul>
 8009ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ae4:	4680      	mov	r8, r0
 8009ae6:	4689      	mov	r9, r1
 8009ae8:	4650      	mov	r0, sl
 8009aea:	4659      	mov	r1, fp
 8009aec:	f7f6 fd84 	bl	80005f8 <__aeabi_dmul>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	4640      	mov	r0, r8
 8009af6:	4649      	mov	r1, r9
 8009af8:	f7f6 fbc8 	bl	800028c <__adddf3>
 8009afc:	4632      	mov	r2, r6
 8009afe:	463b      	mov	r3, r7
 8009b00:	4680      	mov	r8, r0
 8009b02:	4689      	mov	r9, r1
 8009b04:	4620      	mov	r0, r4
 8009b06:	4629      	mov	r1, r5
 8009b08:	f7f6 fd76 	bl	80005f8 <__aeabi_dmul>
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4604      	mov	r4, r0
 8009b10:	460d      	mov	r5, r1
 8009b12:	4602      	mov	r2, r0
 8009b14:	4649      	mov	r1, r9
 8009b16:	4640      	mov	r0, r8
 8009b18:	f7f6 fbb8 	bl	800028c <__adddf3>
 8009b1c:	4b1d      	ldr	r3, [pc, #116]	; (8009b94 <__ieee754_pow+0x3dc>)
 8009b1e:	4299      	cmp	r1, r3
 8009b20:	ec45 4b19 	vmov	d9, r4, r5
 8009b24:	4606      	mov	r6, r0
 8009b26:	460f      	mov	r7, r1
 8009b28:	468b      	mov	fp, r1
 8009b2a:	f340 82fe 	ble.w	800a12a <__ieee754_pow+0x972>
 8009b2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009b32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009b36:	4303      	orrs	r3, r0
 8009b38:	f000 81f0 	beq.w	8009f1c <__ieee754_pow+0x764>
 8009b3c:	a310      	add	r3, pc, #64	; (adr r3, 8009b80 <__ieee754_pow+0x3c8>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	ec51 0b18 	vmov	r0, r1, d8
 8009b46:	f7f6 fd57 	bl	80005f8 <__aeabi_dmul>
 8009b4a:	a30d      	add	r3, pc, #52	; (adr r3, 8009b80 <__ieee754_pow+0x3c8>)
 8009b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b50:	e6cb      	b.n	80098ea <__ieee754_pow+0x132>
 8009b52:	bf00      	nop
 8009b54:	f3af 8000 	nop.w
 8009b58:	60000000 	.word	0x60000000
 8009b5c:	3ff71547 	.word	0x3ff71547
 8009b60:	f85ddf44 	.word	0xf85ddf44
 8009b64:	3e54ae0b 	.word	0x3e54ae0b
 8009b68:	55555555 	.word	0x55555555
 8009b6c:	3fd55555 	.word	0x3fd55555
 8009b70:	652b82fe 	.word	0x652b82fe
 8009b74:	3ff71547 	.word	0x3ff71547
 8009b78:	00000000 	.word	0x00000000
 8009b7c:	bff00000 	.word	0xbff00000
 8009b80:	8800759c 	.word	0x8800759c
 8009b84:	7e37e43c 	.word	0x7e37e43c
 8009b88:	3ff00000 	.word	0x3ff00000
 8009b8c:	3fd00000 	.word	0x3fd00000
 8009b90:	3fe00000 	.word	0x3fe00000
 8009b94:	408fffff 	.word	0x408fffff
 8009b98:	4bd7      	ldr	r3, [pc, #860]	; (8009ef8 <__ieee754_pow+0x740>)
 8009b9a:	ea03 0309 	and.w	r3, r3, r9
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	b92b      	cbnz	r3, 8009bae <__ieee754_pow+0x3f6>
 8009ba2:	4bd6      	ldr	r3, [pc, #856]	; (8009efc <__ieee754_pow+0x744>)
 8009ba4:	f7f6 fd28 	bl	80005f8 <__aeabi_dmul>
 8009ba8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009bac:	460c      	mov	r4, r1
 8009bae:	1523      	asrs	r3, r4, #20
 8009bb0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009bb4:	4413      	add	r3, r2
 8009bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb8:	4bd1      	ldr	r3, [pc, #836]	; (8009f00 <__ieee754_pow+0x748>)
 8009bba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009bbe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009bc2:	429c      	cmp	r4, r3
 8009bc4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009bc8:	dd08      	ble.n	8009bdc <__ieee754_pow+0x424>
 8009bca:	4bce      	ldr	r3, [pc, #824]	; (8009f04 <__ieee754_pow+0x74c>)
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	f340 8163 	ble.w	8009e98 <__ieee754_pow+0x6e0>
 8009bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009bdc:	2400      	movs	r4, #0
 8009bde:	00e3      	lsls	r3, r4, #3
 8009be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009be2:	4bc9      	ldr	r3, [pc, #804]	; (8009f08 <__ieee754_pow+0x750>)
 8009be4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009be8:	ed93 7b00 	vldr	d7, [r3]
 8009bec:	4629      	mov	r1, r5
 8009bee:	ec53 2b17 	vmov	r2, r3, d7
 8009bf2:	eeb0 8a47 	vmov.f32	s16, s14
 8009bf6:	eef0 8a67 	vmov.f32	s17, s15
 8009bfa:	4682      	mov	sl, r0
 8009bfc:	f7f6 fb44 	bl	8000288 <__aeabi_dsub>
 8009c00:	4652      	mov	r2, sl
 8009c02:	4606      	mov	r6, r0
 8009c04:	460f      	mov	r7, r1
 8009c06:	462b      	mov	r3, r5
 8009c08:	ec51 0b18 	vmov	r0, r1, d8
 8009c0c:	f7f6 fb3e 	bl	800028c <__adddf3>
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	2000      	movs	r0, #0
 8009c16:	49bd      	ldr	r1, [pc, #756]	; (8009f0c <__ieee754_pow+0x754>)
 8009c18:	f7f6 fe18 	bl	800084c <__aeabi_ddiv>
 8009c1c:	ec41 0b19 	vmov	d9, r0, r1
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4630      	mov	r0, r6
 8009c26:	4639      	mov	r1, r7
 8009c28:	f7f6 fce6 	bl	80005f8 <__aeabi_dmul>
 8009c2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c38:	2300      	movs	r3, #0
 8009c3a:	9304      	str	r3, [sp, #16]
 8009c3c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009c40:	46ab      	mov	fp, r5
 8009c42:	106d      	asrs	r5, r5, #1
 8009c44:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009c48:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009c4c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009c50:	2200      	movs	r2, #0
 8009c52:	4640      	mov	r0, r8
 8009c54:	4649      	mov	r1, r9
 8009c56:	4614      	mov	r4, r2
 8009c58:	461d      	mov	r5, r3
 8009c5a:	f7f6 fccd 	bl	80005f8 <__aeabi_dmul>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4630      	mov	r0, r6
 8009c64:	4639      	mov	r1, r7
 8009c66:	f7f6 fb0f 	bl	8000288 <__aeabi_dsub>
 8009c6a:	ec53 2b18 	vmov	r2, r3, d8
 8009c6e:	4606      	mov	r6, r0
 8009c70:	460f      	mov	r7, r1
 8009c72:	4620      	mov	r0, r4
 8009c74:	4629      	mov	r1, r5
 8009c76:	f7f6 fb07 	bl	8000288 <__aeabi_dsub>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4650      	mov	r0, sl
 8009c80:	4659      	mov	r1, fp
 8009c82:	f7f6 fb01 	bl	8000288 <__aeabi_dsub>
 8009c86:	4642      	mov	r2, r8
 8009c88:	464b      	mov	r3, r9
 8009c8a:	f7f6 fcb5 	bl	80005f8 <__aeabi_dmul>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	4630      	mov	r0, r6
 8009c94:	4639      	mov	r1, r7
 8009c96:	f7f6 faf7 	bl	8000288 <__aeabi_dsub>
 8009c9a:	ec53 2b19 	vmov	r2, r3, d9
 8009c9e:	f7f6 fcab 	bl	80005f8 <__aeabi_dmul>
 8009ca2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ca6:	ec41 0b18 	vmov	d8, r0, r1
 8009caa:	4610      	mov	r0, r2
 8009cac:	4619      	mov	r1, r3
 8009cae:	f7f6 fca3 	bl	80005f8 <__aeabi_dmul>
 8009cb2:	a37d      	add	r3, pc, #500	; (adr r3, 8009ea8 <__ieee754_pow+0x6f0>)
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	4604      	mov	r4, r0
 8009cba:	460d      	mov	r5, r1
 8009cbc:	f7f6 fc9c 	bl	80005f8 <__aeabi_dmul>
 8009cc0:	a37b      	add	r3, pc, #492	; (adr r3, 8009eb0 <__ieee754_pow+0x6f8>)
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	f7f6 fae1 	bl	800028c <__adddf3>
 8009cca:	4622      	mov	r2, r4
 8009ccc:	462b      	mov	r3, r5
 8009cce:	f7f6 fc93 	bl	80005f8 <__aeabi_dmul>
 8009cd2:	a379      	add	r3, pc, #484	; (adr r3, 8009eb8 <__ieee754_pow+0x700>)
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	f7f6 fad8 	bl	800028c <__adddf3>
 8009cdc:	4622      	mov	r2, r4
 8009cde:	462b      	mov	r3, r5
 8009ce0:	f7f6 fc8a 	bl	80005f8 <__aeabi_dmul>
 8009ce4:	a376      	add	r3, pc, #472	; (adr r3, 8009ec0 <__ieee754_pow+0x708>)
 8009ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cea:	f7f6 facf 	bl	800028c <__adddf3>
 8009cee:	4622      	mov	r2, r4
 8009cf0:	462b      	mov	r3, r5
 8009cf2:	f7f6 fc81 	bl	80005f8 <__aeabi_dmul>
 8009cf6:	a374      	add	r3, pc, #464	; (adr r3, 8009ec8 <__ieee754_pow+0x710>)
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	f7f6 fac6 	bl	800028c <__adddf3>
 8009d00:	4622      	mov	r2, r4
 8009d02:	462b      	mov	r3, r5
 8009d04:	f7f6 fc78 	bl	80005f8 <__aeabi_dmul>
 8009d08:	a371      	add	r3, pc, #452	; (adr r3, 8009ed0 <__ieee754_pow+0x718>)
 8009d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0e:	f7f6 fabd 	bl	800028c <__adddf3>
 8009d12:	4622      	mov	r2, r4
 8009d14:	4606      	mov	r6, r0
 8009d16:	460f      	mov	r7, r1
 8009d18:	462b      	mov	r3, r5
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	f7f6 fc6b 	bl	80005f8 <__aeabi_dmul>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	4630      	mov	r0, r6
 8009d28:	4639      	mov	r1, r7
 8009d2a:	f7f6 fc65 	bl	80005f8 <__aeabi_dmul>
 8009d2e:	4642      	mov	r2, r8
 8009d30:	4604      	mov	r4, r0
 8009d32:	460d      	mov	r5, r1
 8009d34:	464b      	mov	r3, r9
 8009d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d3a:	f7f6 faa7 	bl	800028c <__adddf3>
 8009d3e:	ec53 2b18 	vmov	r2, r3, d8
 8009d42:	f7f6 fc59 	bl	80005f8 <__aeabi_dmul>
 8009d46:	4622      	mov	r2, r4
 8009d48:	462b      	mov	r3, r5
 8009d4a:	f7f6 fa9f 	bl	800028c <__adddf3>
 8009d4e:	4642      	mov	r2, r8
 8009d50:	4682      	mov	sl, r0
 8009d52:	468b      	mov	fp, r1
 8009d54:	464b      	mov	r3, r9
 8009d56:	4640      	mov	r0, r8
 8009d58:	4649      	mov	r1, r9
 8009d5a:	f7f6 fc4d 	bl	80005f8 <__aeabi_dmul>
 8009d5e:	4b6c      	ldr	r3, [pc, #432]	; (8009f10 <__ieee754_pow+0x758>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	4606      	mov	r6, r0
 8009d64:	460f      	mov	r7, r1
 8009d66:	f7f6 fa91 	bl	800028c <__adddf3>
 8009d6a:	4652      	mov	r2, sl
 8009d6c:	465b      	mov	r3, fp
 8009d6e:	f7f6 fa8d 	bl	800028c <__adddf3>
 8009d72:	9c04      	ldr	r4, [sp, #16]
 8009d74:	460d      	mov	r5, r1
 8009d76:	4622      	mov	r2, r4
 8009d78:	460b      	mov	r3, r1
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	f7f6 fc3b 	bl	80005f8 <__aeabi_dmul>
 8009d82:	4b63      	ldr	r3, [pc, #396]	; (8009f10 <__ieee754_pow+0x758>)
 8009d84:	4680      	mov	r8, r0
 8009d86:	4689      	mov	r9, r1
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	f7f6 fa7b 	bl	8000288 <__aeabi_dsub>
 8009d92:	4632      	mov	r2, r6
 8009d94:	463b      	mov	r3, r7
 8009d96:	f7f6 fa77 	bl	8000288 <__aeabi_dsub>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4650      	mov	r0, sl
 8009da0:	4659      	mov	r1, fp
 8009da2:	f7f6 fa71 	bl	8000288 <__aeabi_dsub>
 8009da6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009daa:	f7f6 fc25 	bl	80005f8 <__aeabi_dmul>
 8009dae:	4622      	mov	r2, r4
 8009db0:	4606      	mov	r6, r0
 8009db2:	460f      	mov	r7, r1
 8009db4:	462b      	mov	r3, r5
 8009db6:	ec51 0b18 	vmov	r0, r1, d8
 8009dba:	f7f6 fc1d 	bl	80005f8 <__aeabi_dmul>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	4639      	mov	r1, r7
 8009dc6:	f7f6 fa61 	bl	800028c <__adddf3>
 8009dca:	4606      	mov	r6, r0
 8009dcc:	460f      	mov	r7, r1
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	f7f6 fa59 	bl	800028c <__adddf3>
 8009dda:	9c04      	ldr	r4, [sp, #16]
 8009ddc:	a33e      	add	r3, pc, #248	; (adr r3, 8009ed8 <__ieee754_pow+0x720>)
 8009dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de2:	4620      	mov	r0, r4
 8009de4:	460d      	mov	r5, r1
 8009de6:	f7f6 fc07 	bl	80005f8 <__aeabi_dmul>
 8009dea:	4642      	mov	r2, r8
 8009dec:	ec41 0b18 	vmov	d8, r0, r1
 8009df0:	464b      	mov	r3, r9
 8009df2:	4620      	mov	r0, r4
 8009df4:	4629      	mov	r1, r5
 8009df6:	f7f6 fa47 	bl	8000288 <__aeabi_dsub>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4630      	mov	r0, r6
 8009e00:	4639      	mov	r1, r7
 8009e02:	f7f6 fa41 	bl	8000288 <__aeabi_dsub>
 8009e06:	a336      	add	r3, pc, #216	; (adr r3, 8009ee0 <__ieee754_pow+0x728>)
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	f7f6 fbf4 	bl	80005f8 <__aeabi_dmul>
 8009e10:	a335      	add	r3, pc, #212	; (adr r3, 8009ee8 <__ieee754_pow+0x730>)
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	4606      	mov	r6, r0
 8009e18:	460f      	mov	r7, r1
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	f7f6 fbeb 	bl	80005f8 <__aeabi_dmul>
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	4630      	mov	r0, r6
 8009e28:	4639      	mov	r1, r7
 8009e2a:	f7f6 fa2f 	bl	800028c <__adddf3>
 8009e2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e30:	4b38      	ldr	r3, [pc, #224]	; (8009f14 <__ieee754_pow+0x75c>)
 8009e32:	4413      	add	r3, r2
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f7f6 fa28 	bl	800028c <__adddf3>
 8009e3c:	4682      	mov	sl, r0
 8009e3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e40:	468b      	mov	fp, r1
 8009e42:	f7f6 fb6f 	bl	8000524 <__aeabi_i2d>
 8009e46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e48:	4b33      	ldr	r3, [pc, #204]	; (8009f18 <__ieee754_pow+0x760>)
 8009e4a:	4413      	add	r3, r2
 8009e4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e50:	4606      	mov	r6, r0
 8009e52:	460f      	mov	r7, r1
 8009e54:	4652      	mov	r2, sl
 8009e56:	465b      	mov	r3, fp
 8009e58:	ec51 0b18 	vmov	r0, r1, d8
 8009e5c:	f7f6 fa16 	bl	800028c <__adddf3>
 8009e60:	4642      	mov	r2, r8
 8009e62:	464b      	mov	r3, r9
 8009e64:	f7f6 fa12 	bl	800028c <__adddf3>
 8009e68:	4632      	mov	r2, r6
 8009e6a:	463b      	mov	r3, r7
 8009e6c:	f7f6 fa0e 	bl	800028c <__adddf3>
 8009e70:	9c04      	ldr	r4, [sp, #16]
 8009e72:	4632      	mov	r2, r6
 8009e74:	463b      	mov	r3, r7
 8009e76:	4620      	mov	r0, r4
 8009e78:	460d      	mov	r5, r1
 8009e7a:	f7f6 fa05 	bl	8000288 <__aeabi_dsub>
 8009e7e:	4642      	mov	r2, r8
 8009e80:	464b      	mov	r3, r9
 8009e82:	f7f6 fa01 	bl	8000288 <__aeabi_dsub>
 8009e86:	ec53 2b18 	vmov	r2, r3, d8
 8009e8a:	f7f6 f9fd 	bl	8000288 <__aeabi_dsub>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	4650      	mov	r0, sl
 8009e94:	4659      	mov	r1, fp
 8009e96:	e606      	b.n	8009aa6 <__ieee754_pow+0x2ee>
 8009e98:	2401      	movs	r4, #1
 8009e9a:	e6a0      	b.n	8009bde <__ieee754_pow+0x426>
 8009e9c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009ef0 <__ieee754_pow+0x738>
 8009ea0:	e60d      	b.n	8009abe <__ieee754_pow+0x306>
 8009ea2:	bf00      	nop
 8009ea4:	f3af 8000 	nop.w
 8009ea8:	4a454eef 	.word	0x4a454eef
 8009eac:	3fca7e28 	.word	0x3fca7e28
 8009eb0:	93c9db65 	.word	0x93c9db65
 8009eb4:	3fcd864a 	.word	0x3fcd864a
 8009eb8:	a91d4101 	.word	0xa91d4101
 8009ebc:	3fd17460 	.word	0x3fd17460
 8009ec0:	518f264d 	.word	0x518f264d
 8009ec4:	3fd55555 	.word	0x3fd55555
 8009ec8:	db6fabff 	.word	0xdb6fabff
 8009ecc:	3fdb6db6 	.word	0x3fdb6db6
 8009ed0:	33333303 	.word	0x33333303
 8009ed4:	3fe33333 	.word	0x3fe33333
 8009ed8:	e0000000 	.word	0xe0000000
 8009edc:	3feec709 	.word	0x3feec709
 8009ee0:	dc3a03fd 	.word	0xdc3a03fd
 8009ee4:	3feec709 	.word	0x3feec709
 8009ee8:	145b01f5 	.word	0x145b01f5
 8009eec:	be3e2fe0 	.word	0xbe3e2fe0
 8009ef0:	00000000 	.word	0x00000000
 8009ef4:	3ff00000 	.word	0x3ff00000
 8009ef8:	7ff00000 	.word	0x7ff00000
 8009efc:	43400000 	.word	0x43400000
 8009f00:	0003988e 	.word	0x0003988e
 8009f04:	000bb679 	.word	0x000bb679
 8009f08:	0800b528 	.word	0x0800b528
 8009f0c:	3ff00000 	.word	0x3ff00000
 8009f10:	40080000 	.word	0x40080000
 8009f14:	0800b548 	.word	0x0800b548
 8009f18:	0800b538 	.word	0x0800b538
 8009f1c:	a3b5      	add	r3, pc, #724	; (adr r3, 800a1f4 <__ieee754_pow+0xa3c>)
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	4640      	mov	r0, r8
 8009f24:	4649      	mov	r1, r9
 8009f26:	f7f6 f9b1 	bl	800028c <__adddf3>
 8009f2a:	4622      	mov	r2, r4
 8009f2c:	ec41 0b1a 	vmov	d10, r0, r1
 8009f30:	462b      	mov	r3, r5
 8009f32:	4630      	mov	r0, r6
 8009f34:	4639      	mov	r1, r7
 8009f36:	f7f6 f9a7 	bl	8000288 <__aeabi_dsub>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	ec51 0b1a 	vmov	r0, r1, d10
 8009f42:	f7f6 fde9 	bl	8000b18 <__aeabi_dcmpgt>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	f47f adf8 	bne.w	8009b3c <__ieee754_pow+0x384>
 8009f4c:	4aa4      	ldr	r2, [pc, #656]	; (800a1e0 <__ieee754_pow+0xa28>)
 8009f4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f52:	4293      	cmp	r3, r2
 8009f54:	f340 810b 	ble.w	800a16e <__ieee754_pow+0x9b6>
 8009f58:	151b      	asrs	r3, r3, #20
 8009f5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009f5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009f62:	fa4a f303 	asr.w	r3, sl, r3
 8009f66:	445b      	add	r3, fp
 8009f68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009f6c:	4e9d      	ldr	r6, [pc, #628]	; (800a1e4 <__ieee754_pow+0xa2c>)
 8009f6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009f72:	4116      	asrs	r6, r2
 8009f74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009f78:	2000      	movs	r0, #0
 8009f7a:	ea23 0106 	bic.w	r1, r3, r6
 8009f7e:	f1c2 0214 	rsb	r2, r2, #20
 8009f82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009f86:	fa4a fa02 	asr.w	sl, sl, r2
 8009f8a:	f1bb 0f00 	cmp.w	fp, #0
 8009f8e:	4602      	mov	r2, r0
 8009f90:	460b      	mov	r3, r1
 8009f92:	4620      	mov	r0, r4
 8009f94:	4629      	mov	r1, r5
 8009f96:	bfb8      	it	lt
 8009f98:	f1ca 0a00 	rsblt	sl, sl, #0
 8009f9c:	f7f6 f974 	bl	8000288 <__aeabi_dsub>
 8009fa0:	ec41 0b19 	vmov	d9, r0, r1
 8009fa4:	4642      	mov	r2, r8
 8009fa6:	464b      	mov	r3, r9
 8009fa8:	ec51 0b19 	vmov	r0, r1, d9
 8009fac:	f7f6 f96e 	bl	800028c <__adddf3>
 8009fb0:	2400      	movs	r4, #0
 8009fb2:	a379      	add	r3, pc, #484	; (adr r3, 800a198 <__ieee754_pow+0x9e0>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	4620      	mov	r0, r4
 8009fba:	460d      	mov	r5, r1
 8009fbc:	f7f6 fb1c 	bl	80005f8 <__aeabi_dmul>
 8009fc0:	ec53 2b19 	vmov	r2, r3, d9
 8009fc4:	4606      	mov	r6, r0
 8009fc6:	460f      	mov	r7, r1
 8009fc8:	4620      	mov	r0, r4
 8009fca:	4629      	mov	r1, r5
 8009fcc:	f7f6 f95c 	bl	8000288 <__aeabi_dsub>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	4649      	mov	r1, r9
 8009fd8:	f7f6 f956 	bl	8000288 <__aeabi_dsub>
 8009fdc:	a370      	add	r3, pc, #448	; (adr r3, 800a1a0 <__ieee754_pow+0x9e8>)
 8009fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe2:	f7f6 fb09 	bl	80005f8 <__aeabi_dmul>
 8009fe6:	a370      	add	r3, pc, #448	; (adr r3, 800a1a8 <__ieee754_pow+0x9f0>)
 8009fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fec:	4680      	mov	r8, r0
 8009fee:	4689      	mov	r9, r1
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	f7f6 fb00 	bl	80005f8 <__aeabi_dmul>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	4649      	mov	r1, r9
 800a000:	f7f6 f944 	bl	800028c <__adddf3>
 800a004:	4604      	mov	r4, r0
 800a006:	460d      	mov	r5, r1
 800a008:	4602      	mov	r2, r0
 800a00a:	460b      	mov	r3, r1
 800a00c:	4630      	mov	r0, r6
 800a00e:	4639      	mov	r1, r7
 800a010:	f7f6 f93c 	bl	800028c <__adddf3>
 800a014:	4632      	mov	r2, r6
 800a016:	463b      	mov	r3, r7
 800a018:	4680      	mov	r8, r0
 800a01a:	4689      	mov	r9, r1
 800a01c:	f7f6 f934 	bl	8000288 <__aeabi_dsub>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	4620      	mov	r0, r4
 800a026:	4629      	mov	r1, r5
 800a028:	f7f6 f92e 	bl	8000288 <__aeabi_dsub>
 800a02c:	4642      	mov	r2, r8
 800a02e:	4606      	mov	r6, r0
 800a030:	460f      	mov	r7, r1
 800a032:	464b      	mov	r3, r9
 800a034:	4640      	mov	r0, r8
 800a036:	4649      	mov	r1, r9
 800a038:	f7f6 fade 	bl	80005f8 <__aeabi_dmul>
 800a03c:	a35c      	add	r3, pc, #368	; (adr r3, 800a1b0 <__ieee754_pow+0x9f8>)
 800a03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a042:	4604      	mov	r4, r0
 800a044:	460d      	mov	r5, r1
 800a046:	f7f6 fad7 	bl	80005f8 <__aeabi_dmul>
 800a04a:	a35b      	add	r3, pc, #364	; (adr r3, 800a1b8 <__ieee754_pow+0xa00>)
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	f7f6 f91a 	bl	8000288 <__aeabi_dsub>
 800a054:	4622      	mov	r2, r4
 800a056:	462b      	mov	r3, r5
 800a058:	f7f6 face 	bl	80005f8 <__aeabi_dmul>
 800a05c:	a358      	add	r3, pc, #352	; (adr r3, 800a1c0 <__ieee754_pow+0xa08>)
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	f7f6 f913 	bl	800028c <__adddf3>
 800a066:	4622      	mov	r2, r4
 800a068:	462b      	mov	r3, r5
 800a06a:	f7f6 fac5 	bl	80005f8 <__aeabi_dmul>
 800a06e:	a356      	add	r3, pc, #344	; (adr r3, 800a1c8 <__ieee754_pow+0xa10>)
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	f7f6 f908 	bl	8000288 <__aeabi_dsub>
 800a078:	4622      	mov	r2, r4
 800a07a:	462b      	mov	r3, r5
 800a07c:	f7f6 fabc 	bl	80005f8 <__aeabi_dmul>
 800a080:	a353      	add	r3, pc, #332	; (adr r3, 800a1d0 <__ieee754_pow+0xa18>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7f6 f901 	bl	800028c <__adddf3>
 800a08a:	4622      	mov	r2, r4
 800a08c:	462b      	mov	r3, r5
 800a08e:	f7f6 fab3 	bl	80005f8 <__aeabi_dmul>
 800a092:	4602      	mov	r2, r0
 800a094:	460b      	mov	r3, r1
 800a096:	4640      	mov	r0, r8
 800a098:	4649      	mov	r1, r9
 800a09a:	f7f6 f8f5 	bl	8000288 <__aeabi_dsub>
 800a09e:	4604      	mov	r4, r0
 800a0a0:	460d      	mov	r5, r1
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	4640      	mov	r0, r8
 800a0a8:	4649      	mov	r1, r9
 800a0aa:	f7f6 faa5 	bl	80005f8 <__aeabi_dmul>
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	ec41 0b19 	vmov	d9, r0, r1
 800a0b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	f7f6 f8e4 	bl	8000288 <__aeabi_dsub>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	ec51 0b19 	vmov	r0, r1, d9
 800a0c8:	f7f6 fbc0 	bl	800084c <__aeabi_ddiv>
 800a0cc:	4632      	mov	r2, r6
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	460d      	mov	r5, r1
 800a0d2:	463b      	mov	r3, r7
 800a0d4:	4640      	mov	r0, r8
 800a0d6:	4649      	mov	r1, r9
 800a0d8:	f7f6 fa8e 	bl	80005f8 <__aeabi_dmul>
 800a0dc:	4632      	mov	r2, r6
 800a0de:	463b      	mov	r3, r7
 800a0e0:	f7f6 f8d4 	bl	800028c <__adddf3>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	f7f6 f8cc 	bl	8000288 <__aeabi_dsub>
 800a0f0:	4642      	mov	r2, r8
 800a0f2:	464b      	mov	r3, r9
 800a0f4:	f7f6 f8c8 	bl	8000288 <__aeabi_dsub>
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	493a      	ldr	r1, [pc, #232]	; (800a1e8 <__ieee754_pow+0xa30>)
 800a0fe:	2000      	movs	r0, #0
 800a100:	f7f6 f8c2 	bl	8000288 <__aeabi_dsub>
 800a104:	e9cd 0100 	strd	r0, r1, [sp]
 800a108:	9b01      	ldr	r3, [sp, #4]
 800a10a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a10e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a112:	da2f      	bge.n	800a174 <__ieee754_pow+0x9bc>
 800a114:	4650      	mov	r0, sl
 800a116:	ed9d 0b00 	vldr	d0, [sp]
 800a11a:	f000 fb6d 	bl	800a7f8 <scalbn>
 800a11e:	ec51 0b10 	vmov	r0, r1, d0
 800a122:	ec53 2b18 	vmov	r2, r3, d8
 800a126:	f7ff bbe0 	b.w	80098ea <__ieee754_pow+0x132>
 800a12a:	4b30      	ldr	r3, [pc, #192]	; (800a1ec <__ieee754_pow+0xa34>)
 800a12c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a130:	429e      	cmp	r6, r3
 800a132:	f77f af0b 	ble.w	8009f4c <__ieee754_pow+0x794>
 800a136:	4b2e      	ldr	r3, [pc, #184]	; (800a1f0 <__ieee754_pow+0xa38>)
 800a138:	440b      	add	r3, r1
 800a13a:	4303      	orrs	r3, r0
 800a13c:	d00b      	beq.n	800a156 <__ieee754_pow+0x99e>
 800a13e:	a326      	add	r3, pc, #152	; (adr r3, 800a1d8 <__ieee754_pow+0xa20>)
 800a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a144:	ec51 0b18 	vmov	r0, r1, d8
 800a148:	f7f6 fa56 	bl	80005f8 <__aeabi_dmul>
 800a14c:	a322      	add	r3, pc, #136	; (adr r3, 800a1d8 <__ieee754_pow+0xa20>)
 800a14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a152:	f7ff bbca 	b.w	80098ea <__ieee754_pow+0x132>
 800a156:	4622      	mov	r2, r4
 800a158:	462b      	mov	r3, r5
 800a15a:	f7f6 f895 	bl	8000288 <__aeabi_dsub>
 800a15e:	4642      	mov	r2, r8
 800a160:	464b      	mov	r3, r9
 800a162:	f7f6 fccf 	bl	8000b04 <__aeabi_dcmpge>
 800a166:	2800      	cmp	r0, #0
 800a168:	f43f aef0 	beq.w	8009f4c <__ieee754_pow+0x794>
 800a16c:	e7e7      	b.n	800a13e <__ieee754_pow+0x986>
 800a16e:	f04f 0a00 	mov.w	sl, #0
 800a172:	e717      	b.n	8009fa4 <__ieee754_pow+0x7ec>
 800a174:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a178:	4619      	mov	r1, r3
 800a17a:	e7d2      	b.n	800a122 <__ieee754_pow+0x96a>
 800a17c:	491a      	ldr	r1, [pc, #104]	; (800a1e8 <__ieee754_pow+0xa30>)
 800a17e:	2000      	movs	r0, #0
 800a180:	f7ff bb9e 	b.w	80098c0 <__ieee754_pow+0x108>
 800a184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a188:	f7ff bb9a 	b.w	80098c0 <__ieee754_pow+0x108>
 800a18c:	9000      	str	r0, [sp, #0]
 800a18e:	f7ff bb76 	b.w	800987e <__ieee754_pow+0xc6>
 800a192:	2100      	movs	r1, #0
 800a194:	f7ff bb60 	b.w	8009858 <__ieee754_pow+0xa0>
 800a198:	00000000 	.word	0x00000000
 800a19c:	3fe62e43 	.word	0x3fe62e43
 800a1a0:	fefa39ef 	.word	0xfefa39ef
 800a1a4:	3fe62e42 	.word	0x3fe62e42
 800a1a8:	0ca86c39 	.word	0x0ca86c39
 800a1ac:	be205c61 	.word	0xbe205c61
 800a1b0:	72bea4d0 	.word	0x72bea4d0
 800a1b4:	3e663769 	.word	0x3e663769
 800a1b8:	c5d26bf1 	.word	0xc5d26bf1
 800a1bc:	3ebbbd41 	.word	0x3ebbbd41
 800a1c0:	af25de2c 	.word	0xaf25de2c
 800a1c4:	3f11566a 	.word	0x3f11566a
 800a1c8:	16bebd93 	.word	0x16bebd93
 800a1cc:	3f66c16c 	.word	0x3f66c16c
 800a1d0:	5555553e 	.word	0x5555553e
 800a1d4:	3fc55555 	.word	0x3fc55555
 800a1d8:	c2f8f359 	.word	0xc2f8f359
 800a1dc:	01a56e1f 	.word	0x01a56e1f
 800a1e0:	3fe00000 	.word	0x3fe00000
 800a1e4:	000fffff 	.word	0x000fffff
 800a1e8:	3ff00000 	.word	0x3ff00000
 800a1ec:	4090cbff 	.word	0x4090cbff
 800a1f0:	3f6f3400 	.word	0x3f6f3400
 800a1f4:	652b82fe 	.word	0x652b82fe
 800a1f8:	3c971547 	.word	0x3c971547

0800a1fc <__ieee754_sqrt>:
 800a1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a200:	ec55 4b10 	vmov	r4, r5, d0
 800a204:	4e56      	ldr	r6, [pc, #344]	; (800a360 <__ieee754_sqrt+0x164>)
 800a206:	43ae      	bics	r6, r5
 800a208:	ee10 0a10 	vmov	r0, s0
 800a20c:	ee10 3a10 	vmov	r3, s0
 800a210:	4629      	mov	r1, r5
 800a212:	462a      	mov	r2, r5
 800a214:	d110      	bne.n	800a238 <__ieee754_sqrt+0x3c>
 800a216:	ee10 2a10 	vmov	r2, s0
 800a21a:	462b      	mov	r3, r5
 800a21c:	f7f6 f9ec 	bl	80005f8 <__aeabi_dmul>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4620      	mov	r0, r4
 800a226:	4629      	mov	r1, r5
 800a228:	f7f6 f830 	bl	800028c <__adddf3>
 800a22c:	4604      	mov	r4, r0
 800a22e:	460d      	mov	r5, r1
 800a230:	ec45 4b10 	vmov	d0, r4, r5
 800a234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a238:	2d00      	cmp	r5, #0
 800a23a:	dc10      	bgt.n	800a25e <__ieee754_sqrt+0x62>
 800a23c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a240:	4330      	orrs	r0, r6
 800a242:	d0f5      	beq.n	800a230 <__ieee754_sqrt+0x34>
 800a244:	b15d      	cbz	r5, 800a25e <__ieee754_sqrt+0x62>
 800a246:	ee10 2a10 	vmov	r2, s0
 800a24a:	462b      	mov	r3, r5
 800a24c:	ee10 0a10 	vmov	r0, s0
 800a250:	f7f6 f81a 	bl	8000288 <__aeabi_dsub>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	f7f6 faf8 	bl	800084c <__aeabi_ddiv>
 800a25c:	e7e6      	b.n	800a22c <__ieee754_sqrt+0x30>
 800a25e:	1509      	asrs	r1, r1, #20
 800a260:	d076      	beq.n	800a350 <__ieee754_sqrt+0x154>
 800a262:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a266:	07ce      	lsls	r6, r1, #31
 800a268:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a26c:	bf5e      	ittt	pl
 800a26e:	0fda      	lsrpl	r2, r3, #31
 800a270:	005b      	lslpl	r3, r3, #1
 800a272:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a276:	0fda      	lsrs	r2, r3, #31
 800a278:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a27c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a280:	2000      	movs	r0, #0
 800a282:	106d      	asrs	r5, r5, #1
 800a284:	005b      	lsls	r3, r3, #1
 800a286:	f04f 0e16 	mov.w	lr, #22
 800a28a:	4684      	mov	ip, r0
 800a28c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a290:	eb0c 0401 	add.w	r4, ip, r1
 800a294:	4294      	cmp	r4, r2
 800a296:	bfde      	ittt	le
 800a298:	1b12      	suble	r2, r2, r4
 800a29a:	eb04 0c01 	addle.w	ip, r4, r1
 800a29e:	1840      	addle	r0, r0, r1
 800a2a0:	0052      	lsls	r2, r2, #1
 800a2a2:	f1be 0e01 	subs.w	lr, lr, #1
 800a2a6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a2aa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a2ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a2b2:	d1ed      	bne.n	800a290 <__ieee754_sqrt+0x94>
 800a2b4:	4671      	mov	r1, lr
 800a2b6:	2720      	movs	r7, #32
 800a2b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a2bc:	4562      	cmp	r2, ip
 800a2be:	eb04 060e 	add.w	r6, r4, lr
 800a2c2:	dc02      	bgt.n	800a2ca <__ieee754_sqrt+0xce>
 800a2c4:	d113      	bne.n	800a2ee <__ieee754_sqrt+0xf2>
 800a2c6:	429e      	cmp	r6, r3
 800a2c8:	d811      	bhi.n	800a2ee <__ieee754_sqrt+0xf2>
 800a2ca:	2e00      	cmp	r6, #0
 800a2cc:	eb06 0e04 	add.w	lr, r6, r4
 800a2d0:	da43      	bge.n	800a35a <__ieee754_sqrt+0x15e>
 800a2d2:	f1be 0f00 	cmp.w	lr, #0
 800a2d6:	db40      	blt.n	800a35a <__ieee754_sqrt+0x15e>
 800a2d8:	f10c 0801 	add.w	r8, ip, #1
 800a2dc:	eba2 020c 	sub.w	r2, r2, ip
 800a2e0:	429e      	cmp	r6, r3
 800a2e2:	bf88      	it	hi
 800a2e4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a2e8:	1b9b      	subs	r3, r3, r6
 800a2ea:	4421      	add	r1, r4
 800a2ec:	46c4      	mov	ip, r8
 800a2ee:	0052      	lsls	r2, r2, #1
 800a2f0:	3f01      	subs	r7, #1
 800a2f2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a2f6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a2fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a2fe:	d1dd      	bne.n	800a2bc <__ieee754_sqrt+0xc0>
 800a300:	4313      	orrs	r3, r2
 800a302:	d006      	beq.n	800a312 <__ieee754_sqrt+0x116>
 800a304:	1c4c      	adds	r4, r1, #1
 800a306:	bf13      	iteet	ne
 800a308:	3101      	addne	r1, #1
 800a30a:	3001      	addeq	r0, #1
 800a30c:	4639      	moveq	r1, r7
 800a30e:	f021 0101 	bicne.w	r1, r1, #1
 800a312:	1043      	asrs	r3, r0, #1
 800a314:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a318:	0849      	lsrs	r1, r1, #1
 800a31a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a31e:	07c2      	lsls	r2, r0, #31
 800a320:	bf48      	it	mi
 800a322:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a326:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a32a:	460c      	mov	r4, r1
 800a32c:	463d      	mov	r5, r7
 800a32e:	e77f      	b.n	800a230 <__ieee754_sqrt+0x34>
 800a330:	0ada      	lsrs	r2, r3, #11
 800a332:	3815      	subs	r0, #21
 800a334:	055b      	lsls	r3, r3, #21
 800a336:	2a00      	cmp	r2, #0
 800a338:	d0fa      	beq.n	800a330 <__ieee754_sqrt+0x134>
 800a33a:	02d7      	lsls	r7, r2, #11
 800a33c:	d50a      	bpl.n	800a354 <__ieee754_sqrt+0x158>
 800a33e:	f1c1 0420 	rsb	r4, r1, #32
 800a342:	fa23 f404 	lsr.w	r4, r3, r4
 800a346:	1e4d      	subs	r5, r1, #1
 800a348:	408b      	lsls	r3, r1
 800a34a:	4322      	orrs	r2, r4
 800a34c:	1b41      	subs	r1, r0, r5
 800a34e:	e788      	b.n	800a262 <__ieee754_sqrt+0x66>
 800a350:	4608      	mov	r0, r1
 800a352:	e7f0      	b.n	800a336 <__ieee754_sqrt+0x13a>
 800a354:	0052      	lsls	r2, r2, #1
 800a356:	3101      	adds	r1, #1
 800a358:	e7ef      	b.n	800a33a <__ieee754_sqrt+0x13e>
 800a35a:	46e0      	mov	r8, ip
 800a35c:	e7be      	b.n	800a2dc <__ieee754_sqrt+0xe0>
 800a35e:	bf00      	nop
 800a360:	7ff00000 	.word	0x7ff00000
 800a364:	00000000 	.word	0x00000000

0800a368 <atan>:
 800a368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36c:	ec55 4b10 	vmov	r4, r5, d0
 800a370:	4bc3      	ldr	r3, [pc, #780]	; (800a680 <atan+0x318>)
 800a372:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a376:	429e      	cmp	r6, r3
 800a378:	46ab      	mov	fp, r5
 800a37a:	dd18      	ble.n	800a3ae <atan+0x46>
 800a37c:	4bc1      	ldr	r3, [pc, #772]	; (800a684 <atan+0x31c>)
 800a37e:	429e      	cmp	r6, r3
 800a380:	dc01      	bgt.n	800a386 <atan+0x1e>
 800a382:	d109      	bne.n	800a398 <atan+0x30>
 800a384:	b144      	cbz	r4, 800a398 <atan+0x30>
 800a386:	4622      	mov	r2, r4
 800a388:	462b      	mov	r3, r5
 800a38a:	4620      	mov	r0, r4
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7f5 ff7d 	bl	800028c <__adddf3>
 800a392:	4604      	mov	r4, r0
 800a394:	460d      	mov	r5, r1
 800a396:	e006      	b.n	800a3a6 <atan+0x3e>
 800a398:	f1bb 0f00 	cmp.w	fp, #0
 800a39c:	f300 8131 	bgt.w	800a602 <atan+0x29a>
 800a3a0:	a59b      	add	r5, pc, #620	; (adr r5, 800a610 <atan+0x2a8>)
 800a3a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a3a6:	ec45 4b10 	vmov	d0, r4, r5
 800a3aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ae:	4bb6      	ldr	r3, [pc, #728]	; (800a688 <atan+0x320>)
 800a3b0:	429e      	cmp	r6, r3
 800a3b2:	dc14      	bgt.n	800a3de <atan+0x76>
 800a3b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a3b8:	429e      	cmp	r6, r3
 800a3ba:	dc0d      	bgt.n	800a3d8 <atan+0x70>
 800a3bc:	a396      	add	r3, pc, #600	; (adr r3, 800a618 <atan+0x2b0>)
 800a3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c2:	ee10 0a10 	vmov	r0, s0
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	f7f5 ff60 	bl	800028c <__adddf3>
 800a3cc:	4baf      	ldr	r3, [pc, #700]	; (800a68c <atan+0x324>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f7f6 fba2 	bl	8000b18 <__aeabi_dcmpgt>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d1e6      	bne.n	800a3a6 <atan+0x3e>
 800a3d8:	f04f 3aff 	mov.w	sl, #4294967295
 800a3dc:	e02b      	b.n	800a436 <atan+0xce>
 800a3de:	f000 f963 	bl	800a6a8 <fabs>
 800a3e2:	4bab      	ldr	r3, [pc, #684]	; (800a690 <atan+0x328>)
 800a3e4:	429e      	cmp	r6, r3
 800a3e6:	ec55 4b10 	vmov	r4, r5, d0
 800a3ea:	f300 80bf 	bgt.w	800a56c <atan+0x204>
 800a3ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a3f2:	429e      	cmp	r6, r3
 800a3f4:	f300 80a0 	bgt.w	800a538 <atan+0x1d0>
 800a3f8:	ee10 2a10 	vmov	r2, s0
 800a3fc:	ee10 0a10 	vmov	r0, s0
 800a400:	462b      	mov	r3, r5
 800a402:	4629      	mov	r1, r5
 800a404:	f7f5 ff42 	bl	800028c <__adddf3>
 800a408:	4ba0      	ldr	r3, [pc, #640]	; (800a68c <atan+0x324>)
 800a40a:	2200      	movs	r2, #0
 800a40c:	f7f5 ff3c 	bl	8000288 <__aeabi_dsub>
 800a410:	2200      	movs	r2, #0
 800a412:	4606      	mov	r6, r0
 800a414:	460f      	mov	r7, r1
 800a416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a41a:	4620      	mov	r0, r4
 800a41c:	4629      	mov	r1, r5
 800a41e:	f7f5 ff35 	bl	800028c <__adddf3>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	4630      	mov	r0, r6
 800a428:	4639      	mov	r1, r7
 800a42a:	f7f6 fa0f 	bl	800084c <__aeabi_ddiv>
 800a42e:	f04f 0a00 	mov.w	sl, #0
 800a432:	4604      	mov	r4, r0
 800a434:	460d      	mov	r5, r1
 800a436:	4622      	mov	r2, r4
 800a438:	462b      	mov	r3, r5
 800a43a:	4620      	mov	r0, r4
 800a43c:	4629      	mov	r1, r5
 800a43e:	f7f6 f8db 	bl	80005f8 <__aeabi_dmul>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	4680      	mov	r8, r0
 800a448:	4689      	mov	r9, r1
 800a44a:	f7f6 f8d5 	bl	80005f8 <__aeabi_dmul>
 800a44e:	a374      	add	r3, pc, #464	; (adr r3, 800a620 <atan+0x2b8>)
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	4606      	mov	r6, r0
 800a456:	460f      	mov	r7, r1
 800a458:	f7f6 f8ce 	bl	80005f8 <__aeabi_dmul>
 800a45c:	a372      	add	r3, pc, #456	; (adr r3, 800a628 <atan+0x2c0>)
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	f7f5 ff13 	bl	800028c <__adddf3>
 800a466:	4632      	mov	r2, r6
 800a468:	463b      	mov	r3, r7
 800a46a:	f7f6 f8c5 	bl	80005f8 <__aeabi_dmul>
 800a46e:	a370      	add	r3, pc, #448	; (adr r3, 800a630 <atan+0x2c8>)
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	f7f5 ff0a 	bl	800028c <__adddf3>
 800a478:	4632      	mov	r2, r6
 800a47a:	463b      	mov	r3, r7
 800a47c:	f7f6 f8bc 	bl	80005f8 <__aeabi_dmul>
 800a480:	a36d      	add	r3, pc, #436	; (adr r3, 800a638 <atan+0x2d0>)
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	f7f5 ff01 	bl	800028c <__adddf3>
 800a48a:	4632      	mov	r2, r6
 800a48c:	463b      	mov	r3, r7
 800a48e:	f7f6 f8b3 	bl	80005f8 <__aeabi_dmul>
 800a492:	a36b      	add	r3, pc, #428	; (adr r3, 800a640 <atan+0x2d8>)
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	f7f5 fef8 	bl	800028c <__adddf3>
 800a49c:	4632      	mov	r2, r6
 800a49e:	463b      	mov	r3, r7
 800a4a0:	f7f6 f8aa 	bl	80005f8 <__aeabi_dmul>
 800a4a4:	a368      	add	r3, pc, #416	; (adr r3, 800a648 <atan+0x2e0>)
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	f7f5 feef 	bl	800028c <__adddf3>
 800a4ae:	4642      	mov	r2, r8
 800a4b0:	464b      	mov	r3, r9
 800a4b2:	f7f6 f8a1 	bl	80005f8 <__aeabi_dmul>
 800a4b6:	a366      	add	r3, pc, #408	; (adr r3, 800a650 <atan+0x2e8>)
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	4680      	mov	r8, r0
 800a4be:	4689      	mov	r9, r1
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	f7f6 f898 	bl	80005f8 <__aeabi_dmul>
 800a4c8:	a363      	add	r3, pc, #396	; (adr r3, 800a658 <atan+0x2f0>)
 800a4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ce:	f7f5 fedb 	bl	8000288 <__aeabi_dsub>
 800a4d2:	4632      	mov	r2, r6
 800a4d4:	463b      	mov	r3, r7
 800a4d6:	f7f6 f88f 	bl	80005f8 <__aeabi_dmul>
 800a4da:	a361      	add	r3, pc, #388	; (adr r3, 800a660 <atan+0x2f8>)
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	f7f5 fed2 	bl	8000288 <__aeabi_dsub>
 800a4e4:	4632      	mov	r2, r6
 800a4e6:	463b      	mov	r3, r7
 800a4e8:	f7f6 f886 	bl	80005f8 <__aeabi_dmul>
 800a4ec:	a35e      	add	r3, pc, #376	; (adr r3, 800a668 <atan+0x300>)
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	f7f5 fec9 	bl	8000288 <__aeabi_dsub>
 800a4f6:	4632      	mov	r2, r6
 800a4f8:	463b      	mov	r3, r7
 800a4fa:	f7f6 f87d 	bl	80005f8 <__aeabi_dmul>
 800a4fe:	a35c      	add	r3, pc, #368	; (adr r3, 800a670 <atan+0x308>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	f7f5 fec0 	bl	8000288 <__aeabi_dsub>
 800a508:	4632      	mov	r2, r6
 800a50a:	463b      	mov	r3, r7
 800a50c:	f7f6 f874 	bl	80005f8 <__aeabi_dmul>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	4640      	mov	r0, r8
 800a516:	4649      	mov	r1, r9
 800a518:	f7f5 feb8 	bl	800028c <__adddf3>
 800a51c:	4622      	mov	r2, r4
 800a51e:	462b      	mov	r3, r5
 800a520:	f7f6 f86a 	bl	80005f8 <__aeabi_dmul>
 800a524:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
 800a52c:	d14b      	bne.n	800a5c6 <atan+0x25e>
 800a52e:	4620      	mov	r0, r4
 800a530:	4629      	mov	r1, r5
 800a532:	f7f5 fea9 	bl	8000288 <__aeabi_dsub>
 800a536:	e72c      	b.n	800a392 <atan+0x2a>
 800a538:	ee10 0a10 	vmov	r0, s0
 800a53c:	4b53      	ldr	r3, [pc, #332]	; (800a68c <atan+0x324>)
 800a53e:	2200      	movs	r2, #0
 800a540:	4629      	mov	r1, r5
 800a542:	f7f5 fea1 	bl	8000288 <__aeabi_dsub>
 800a546:	4b51      	ldr	r3, [pc, #324]	; (800a68c <atan+0x324>)
 800a548:	4606      	mov	r6, r0
 800a54a:	460f      	mov	r7, r1
 800a54c:	2200      	movs	r2, #0
 800a54e:	4620      	mov	r0, r4
 800a550:	4629      	mov	r1, r5
 800a552:	f7f5 fe9b 	bl	800028c <__adddf3>
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
 800a55a:	4630      	mov	r0, r6
 800a55c:	4639      	mov	r1, r7
 800a55e:	f7f6 f975 	bl	800084c <__aeabi_ddiv>
 800a562:	f04f 0a01 	mov.w	sl, #1
 800a566:	4604      	mov	r4, r0
 800a568:	460d      	mov	r5, r1
 800a56a:	e764      	b.n	800a436 <atan+0xce>
 800a56c:	4b49      	ldr	r3, [pc, #292]	; (800a694 <atan+0x32c>)
 800a56e:	429e      	cmp	r6, r3
 800a570:	da1d      	bge.n	800a5ae <atan+0x246>
 800a572:	ee10 0a10 	vmov	r0, s0
 800a576:	4b48      	ldr	r3, [pc, #288]	; (800a698 <atan+0x330>)
 800a578:	2200      	movs	r2, #0
 800a57a:	4629      	mov	r1, r5
 800a57c:	f7f5 fe84 	bl	8000288 <__aeabi_dsub>
 800a580:	4b45      	ldr	r3, [pc, #276]	; (800a698 <atan+0x330>)
 800a582:	4606      	mov	r6, r0
 800a584:	460f      	mov	r7, r1
 800a586:	2200      	movs	r2, #0
 800a588:	4620      	mov	r0, r4
 800a58a:	4629      	mov	r1, r5
 800a58c:	f7f6 f834 	bl	80005f8 <__aeabi_dmul>
 800a590:	4b3e      	ldr	r3, [pc, #248]	; (800a68c <atan+0x324>)
 800a592:	2200      	movs	r2, #0
 800a594:	f7f5 fe7a 	bl	800028c <__adddf3>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	4630      	mov	r0, r6
 800a59e:	4639      	mov	r1, r7
 800a5a0:	f7f6 f954 	bl	800084c <__aeabi_ddiv>
 800a5a4:	f04f 0a02 	mov.w	sl, #2
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	460d      	mov	r5, r1
 800a5ac:	e743      	b.n	800a436 <atan+0xce>
 800a5ae:	462b      	mov	r3, r5
 800a5b0:	ee10 2a10 	vmov	r2, s0
 800a5b4:	4939      	ldr	r1, [pc, #228]	; (800a69c <atan+0x334>)
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	f7f6 f948 	bl	800084c <__aeabi_ddiv>
 800a5bc:	f04f 0a03 	mov.w	sl, #3
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	460d      	mov	r5, r1
 800a5c4:	e737      	b.n	800a436 <atan+0xce>
 800a5c6:	4b36      	ldr	r3, [pc, #216]	; (800a6a0 <atan+0x338>)
 800a5c8:	4e36      	ldr	r6, [pc, #216]	; (800a6a4 <atan+0x33c>)
 800a5ca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a5ce:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a5d2:	e9da 2300 	ldrd	r2, r3, [sl]
 800a5d6:	f7f5 fe57 	bl	8000288 <__aeabi_dsub>
 800a5da:	4622      	mov	r2, r4
 800a5dc:	462b      	mov	r3, r5
 800a5de:	f7f5 fe53 	bl	8000288 <__aeabi_dsub>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a5ea:	f7f5 fe4d 	bl	8000288 <__aeabi_dsub>
 800a5ee:	f1bb 0f00 	cmp.w	fp, #0
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	460d      	mov	r5, r1
 800a5f6:	f6bf aed6 	bge.w	800a3a6 <atan+0x3e>
 800a5fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5fe:	461d      	mov	r5, r3
 800a600:	e6d1      	b.n	800a3a6 <atan+0x3e>
 800a602:	a51d      	add	r5, pc, #116	; (adr r5, 800a678 <atan+0x310>)
 800a604:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a608:	e6cd      	b.n	800a3a6 <atan+0x3e>
 800a60a:	bf00      	nop
 800a60c:	f3af 8000 	nop.w
 800a610:	54442d18 	.word	0x54442d18
 800a614:	bff921fb 	.word	0xbff921fb
 800a618:	8800759c 	.word	0x8800759c
 800a61c:	7e37e43c 	.word	0x7e37e43c
 800a620:	e322da11 	.word	0xe322da11
 800a624:	3f90ad3a 	.word	0x3f90ad3a
 800a628:	24760deb 	.word	0x24760deb
 800a62c:	3fa97b4b 	.word	0x3fa97b4b
 800a630:	a0d03d51 	.word	0xa0d03d51
 800a634:	3fb10d66 	.word	0x3fb10d66
 800a638:	c54c206e 	.word	0xc54c206e
 800a63c:	3fb745cd 	.word	0x3fb745cd
 800a640:	920083ff 	.word	0x920083ff
 800a644:	3fc24924 	.word	0x3fc24924
 800a648:	5555550d 	.word	0x5555550d
 800a64c:	3fd55555 	.word	0x3fd55555
 800a650:	2c6a6c2f 	.word	0x2c6a6c2f
 800a654:	bfa2b444 	.word	0xbfa2b444
 800a658:	52defd9a 	.word	0x52defd9a
 800a65c:	3fadde2d 	.word	0x3fadde2d
 800a660:	af749a6d 	.word	0xaf749a6d
 800a664:	3fb3b0f2 	.word	0x3fb3b0f2
 800a668:	fe231671 	.word	0xfe231671
 800a66c:	3fbc71c6 	.word	0x3fbc71c6
 800a670:	9998ebc4 	.word	0x9998ebc4
 800a674:	3fc99999 	.word	0x3fc99999
 800a678:	54442d18 	.word	0x54442d18
 800a67c:	3ff921fb 	.word	0x3ff921fb
 800a680:	440fffff 	.word	0x440fffff
 800a684:	7ff00000 	.word	0x7ff00000
 800a688:	3fdbffff 	.word	0x3fdbffff
 800a68c:	3ff00000 	.word	0x3ff00000
 800a690:	3ff2ffff 	.word	0x3ff2ffff
 800a694:	40038000 	.word	0x40038000
 800a698:	3ff80000 	.word	0x3ff80000
 800a69c:	bff00000 	.word	0xbff00000
 800a6a0:	0800b578 	.word	0x0800b578
 800a6a4:	0800b558 	.word	0x0800b558

0800a6a8 <fabs>:
 800a6a8:	ec51 0b10 	vmov	r0, r1, d0
 800a6ac:	ee10 2a10 	vmov	r2, s0
 800a6b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a6b4:	ec43 2b10 	vmov	d0, r2, r3
 800a6b8:	4770      	bx	lr

0800a6ba <finite>:
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	ed8d 0b00 	vstr	d0, [sp]
 800a6c0:	9801      	ldr	r0, [sp, #4]
 800a6c2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a6c6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a6ca:	0fc0      	lsrs	r0, r0, #31
 800a6cc:	b002      	add	sp, #8
 800a6ce:	4770      	bx	lr

0800a6d0 <nan>:
 800a6d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a6d8 <nan+0x8>
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	00000000 	.word	0x00000000
 800a6dc:	7ff80000 	.word	0x7ff80000

0800a6e0 <rint>:
 800a6e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6e2:	ec51 0b10 	vmov	r0, r1, d0
 800a6e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a6ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a6ee:	2e13      	cmp	r6, #19
 800a6f0:	ee10 4a10 	vmov	r4, s0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a6fa:	dc58      	bgt.n	800a7ae <rint+0xce>
 800a6fc:	2e00      	cmp	r6, #0
 800a6fe:	da2b      	bge.n	800a758 <rint+0x78>
 800a700:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a704:	4302      	orrs	r2, r0
 800a706:	d023      	beq.n	800a750 <rint+0x70>
 800a708:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a70c:	4302      	orrs	r2, r0
 800a70e:	4254      	negs	r4, r2
 800a710:	4314      	orrs	r4, r2
 800a712:	0c4b      	lsrs	r3, r1, #17
 800a714:	0b24      	lsrs	r4, r4, #12
 800a716:	045b      	lsls	r3, r3, #17
 800a718:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a71c:	ea44 0103 	orr.w	r1, r4, r3
 800a720:	4b32      	ldr	r3, [pc, #200]	; (800a7ec <rint+0x10c>)
 800a722:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a726:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	4630      	mov	r0, r6
 800a730:	4639      	mov	r1, r7
 800a732:	f7f5 fdab 	bl	800028c <__adddf3>
 800a736:	e9cd 0100 	strd	r0, r1, [sp]
 800a73a:	463b      	mov	r3, r7
 800a73c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a740:	4632      	mov	r2, r6
 800a742:	f7f5 fda1 	bl	8000288 <__aeabi_dsub>
 800a746:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a74a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a74e:	4639      	mov	r1, r7
 800a750:	ec41 0b10 	vmov	d0, r0, r1
 800a754:	b003      	add	sp, #12
 800a756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a758:	4a25      	ldr	r2, [pc, #148]	; (800a7f0 <rint+0x110>)
 800a75a:	4132      	asrs	r2, r6
 800a75c:	ea01 0702 	and.w	r7, r1, r2
 800a760:	4307      	orrs	r7, r0
 800a762:	d0f5      	beq.n	800a750 <rint+0x70>
 800a764:	0851      	lsrs	r1, r2, #1
 800a766:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a76a:	4314      	orrs	r4, r2
 800a76c:	d00c      	beq.n	800a788 <rint+0xa8>
 800a76e:	ea23 0201 	bic.w	r2, r3, r1
 800a772:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a776:	2e13      	cmp	r6, #19
 800a778:	fa43 f606 	asr.w	r6, r3, r6
 800a77c:	bf0c      	ite	eq
 800a77e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a782:	2400      	movne	r4, #0
 800a784:	ea42 0306 	orr.w	r3, r2, r6
 800a788:	4918      	ldr	r1, [pc, #96]	; (800a7ec <rint+0x10c>)
 800a78a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a78e:	4622      	mov	r2, r4
 800a790:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a794:	4620      	mov	r0, r4
 800a796:	4629      	mov	r1, r5
 800a798:	f7f5 fd78 	bl	800028c <__adddf3>
 800a79c:	e9cd 0100 	strd	r0, r1, [sp]
 800a7a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7a4:	4622      	mov	r2, r4
 800a7a6:	462b      	mov	r3, r5
 800a7a8:	f7f5 fd6e 	bl	8000288 <__aeabi_dsub>
 800a7ac:	e7d0      	b.n	800a750 <rint+0x70>
 800a7ae:	2e33      	cmp	r6, #51	; 0x33
 800a7b0:	dd07      	ble.n	800a7c2 <rint+0xe2>
 800a7b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a7b6:	d1cb      	bne.n	800a750 <rint+0x70>
 800a7b8:	ee10 2a10 	vmov	r2, s0
 800a7bc:	f7f5 fd66 	bl	800028c <__adddf3>
 800a7c0:	e7c6      	b.n	800a750 <rint+0x70>
 800a7c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a7c6:	f04f 36ff 	mov.w	r6, #4294967295
 800a7ca:	40d6      	lsrs	r6, r2
 800a7cc:	4230      	tst	r0, r6
 800a7ce:	d0bf      	beq.n	800a750 <rint+0x70>
 800a7d0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a7d4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a7d8:	bf1f      	itttt	ne
 800a7da:	ea24 0101 	bicne.w	r1, r4, r1
 800a7de:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a7e2:	fa44 f202 	asrne.w	r2, r4, r2
 800a7e6:	ea41 0402 	orrne.w	r4, r1, r2
 800a7ea:	e7cd      	b.n	800a788 <rint+0xa8>
 800a7ec:	0800b598 	.word	0x0800b598
 800a7f0:	000fffff 	.word	0x000fffff
 800a7f4:	00000000 	.word	0x00000000

0800a7f8 <scalbn>:
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	ec55 4b10 	vmov	r4, r5, d0
 800a7fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a802:	4606      	mov	r6, r0
 800a804:	462b      	mov	r3, r5
 800a806:	b99a      	cbnz	r2, 800a830 <scalbn+0x38>
 800a808:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a80c:	4323      	orrs	r3, r4
 800a80e:	d036      	beq.n	800a87e <scalbn+0x86>
 800a810:	4b39      	ldr	r3, [pc, #228]	; (800a8f8 <scalbn+0x100>)
 800a812:	4629      	mov	r1, r5
 800a814:	ee10 0a10 	vmov	r0, s0
 800a818:	2200      	movs	r2, #0
 800a81a:	f7f5 feed 	bl	80005f8 <__aeabi_dmul>
 800a81e:	4b37      	ldr	r3, [pc, #220]	; (800a8fc <scalbn+0x104>)
 800a820:	429e      	cmp	r6, r3
 800a822:	4604      	mov	r4, r0
 800a824:	460d      	mov	r5, r1
 800a826:	da10      	bge.n	800a84a <scalbn+0x52>
 800a828:	a32b      	add	r3, pc, #172	; (adr r3, 800a8d8 <scalbn+0xe0>)
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	e03a      	b.n	800a8a6 <scalbn+0xae>
 800a830:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a834:	428a      	cmp	r2, r1
 800a836:	d10c      	bne.n	800a852 <scalbn+0x5a>
 800a838:	ee10 2a10 	vmov	r2, s0
 800a83c:	4620      	mov	r0, r4
 800a83e:	4629      	mov	r1, r5
 800a840:	f7f5 fd24 	bl	800028c <__adddf3>
 800a844:	4604      	mov	r4, r0
 800a846:	460d      	mov	r5, r1
 800a848:	e019      	b.n	800a87e <scalbn+0x86>
 800a84a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a84e:	460b      	mov	r3, r1
 800a850:	3a36      	subs	r2, #54	; 0x36
 800a852:	4432      	add	r2, r6
 800a854:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a858:	428a      	cmp	r2, r1
 800a85a:	dd08      	ble.n	800a86e <scalbn+0x76>
 800a85c:	2d00      	cmp	r5, #0
 800a85e:	a120      	add	r1, pc, #128	; (adr r1, 800a8e0 <scalbn+0xe8>)
 800a860:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a864:	da1c      	bge.n	800a8a0 <scalbn+0xa8>
 800a866:	a120      	add	r1, pc, #128	; (adr r1, 800a8e8 <scalbn+0xf0>)
 800a868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a86c:	e018      	b.n	800a8a0 <scalbn+0xa8>
 800a86e:	2a00      	cmp	r2, #0
 800a870:	dd08      	ble.n	800a884 <scalbn+0x8c>
 800a872:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a876:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a87a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a87e:	ec45 4b10 	vmov	d0, r4, r5
 800a882:	bd70      	pop	{r4, r5, r6, pc}
 800a884:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a888:	da19      	bge.n	800a8be <scalbn+0xc6>
 800a88a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a88e:	429e      	cmp	r6, r3
 800a890:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a894:	dd0a      	ble.n	800a8ac <scalbn+0xb4>
 800a896:	a112      	add	r1, pc, #72	; (adr r1, 800a8e0 <scalbn+0xe8>)
 800a898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d1e2      	bne.n	800a866 <scalbn+0x6e>
 800a8a0:	a30f      	add	r3, pc, #60	; (adr r3, 800a8e0 <scalbn+0xe8>)
 800a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a6:	f7f5 fea7 	bl	80005f8 <__aeabi_dmul>
 800a8aa:	e7cb      	b.n	800a844 <scalbn+0x4c>
 800a8ac:	a10a      	add	r1, pc, #40	; (adr r1, 800a8d8 <scalbn+0xe0>)
 800a8ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0b8      	beq.n	800a828 <scalbn+0x30>
 800a8b6:	a10e      	add	r1, pc, #56	; (adr r1, 800a8f0 <scalbn+0xf8>)
 800a8b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8bc:	e7b4      	b.n	800a828 <scalbn+0x30>
 800a8be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a8c2:	3236      	adds	r2, #54	; 0x36
 800a8c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a8c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	4b0c      	ldr	r3, [pc, #48]	; (800a900 <scalbn+0x108>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	e7e8      	b.n	800a8a6 <scalbn+0xae>
 800a8d4:	f3af 8000 	nop.w
 800a8d8:	c2f8f359 	.word	0xc2f8f359
 800a8dc:	01a56e1f 	.word	0x01a56e1f
 800a8e0:	8800759c 	.word	0x8800759c
 800a8e4:	7e37e43c 	.word	0x7e37e43c
 800a8e8:	8800759c 	.word	0x8800759c
 800a8ec:	fe37e43c 	.word	0xfe37e43c
 800a8f0:	c2f8f359 	.word	0xc2f8f359
 800a8f4:	81a56e1f 	.word	0x81a56e1f
 800a8f8:	43500000 	.word	0x43500000
 800a8fc:	ffff3cb0 	.word	0xffff3cb0
 800a900:	3c900000 	.word	0x3c900000

0800a904 <_init>:
 800a904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a906:	bf00      	nop
 800a908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a90a:	bc08      	pop	{r3}
 800a90c:	469e      	mov	lr, r3
 800a90e:	4770      	bx	lr

0800a910 <_fini>:
 800a910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a912:	bf00      	nop
 800a914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a916:	bc08      	pop	{r3}
 800a918:	469e      	mov	lr, r3
 800a91a:	4770      	bx	lr
