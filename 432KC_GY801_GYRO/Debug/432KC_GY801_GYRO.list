
432KC_GY801_GYRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000775c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  080078f0  080078f0  000178f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d64  08007d64  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007d64  08007d64  00017d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d6c  08007d6c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d70  08007d70  00017d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001dc  08007f50  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08007f50  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001795b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e83  00000000  00000000  00037b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0003a9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  0003bc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ef3  00000000  00000000  0003cda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015137  00000000  00000000  0005fc9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce7be  00000000  00000000  00074dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143590  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e38  00000000  00000000  001435e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078d4 	.word	0x080078d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080078d4 	.word	0x080078d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <Init_ADXL345>:

#include "main.h"
#include "ADXL345.h"

void	Init_ADXL345()
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af02      	add	r7, sp, #8
	  uint8_t regVal[2];

	  // Measurement mode
	  regVal[0] = ADXL345_POWER_CTL; regVal[1] = ADXL345_MEASURE;
 8000f46:	232d      	movs	r3, #45	; 0x2d
 8000f48:	713b      	strb	r3, [r7, #4]
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)ADXL345,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8000f4e:	bf00      	nop
 8000f50:	1d3a      	adds	r2, r7, #4
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2302      	movs	r3, #2
 8000f5a:	21a6      	movs	r1, #166	; 0xa6
 8000f5c:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <Init_ADXL345+0x78>)
 8000f5e:	f001 fa25 	bl	80023ac <HAL_I2C_Master_Transmit>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f3      	bne.n	8000f50 <Init_ADXL345+0x10>

	  // Data ready
	  regVal[0] = ADXL345_INT_ENABLE; regVal[1] = 0x80;
 8000f68:	232e      	movs	r3, #46	; 0x2e
 8000f6a:	713b      	strb	r3, [r7, #4]
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)ADXL345,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8000f70:	bf00      	nop
 8000f72:	1d3a      	adds	r2, r7, #4
 8000f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	21a6      	movs	r1, #166	; 0xa6
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <Init_ADXL345+0x78>)
 8000f80:	f001 fa14 	bl	80023ac <HAL_I2C_Master_Transmit>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1f3      	bne.n	8000f72 <Init_ADXL345+0x32>


	  // Full resolution +-16g
	  regVal[0] = ADXL345_DATA_FORMAT; regVal[1] = ADXL345_BW_RATE_200HZ;
 8000f8a:	2331      	movs	r3, #49	; 0x31
 8000f8c:	713b      	strb	r3, [r7, #4]
 8000f8e:	230b      	movs	r3, #11
 8000f90:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)ADXL345,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8000f92:	bf00      	nop
 8000f94:	1d3a      	adds	r2, r7, #4
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	21a6      	movs	r1, #166	; 0xa6
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <Init_ADXL345+0x78>)
 8000fa2:	f001 fa03 	bl	80023ac <HAL_I2C_Master_Transmit>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f3      	bne.n	8000f94 <Init_ADXL345+0x54>
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000230 	.word	0x20000230

08000fbc <Init_BMP180_Calib_Param>:
#include "BMP180.h"

uint16_t oversampling=3;

HAL_StatusTypeDef Init_BMP180_Calib_Param(BMP180_Calib_Param *Calib)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b092      	sub	sp, #72	; 0x48
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	6078      	str	r0, [r7, #4]
	uint8_t 	out_buff[22] = {0,},regVal[2]={0,};
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	821a      	strh	r2, [r3, #16]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	843b      	strh	r3, [r7, #32]
	uint16_t 	CalibData[11];

	regVal[0] = BMP180_AC1;
 8000fdc:	23aa      	movs	r3, #170	; 0xaa
 8000fde:	f887 3020 	strb.w	r3, [r7, #32]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)BMP180_WRITE_ADDRESS,(uint8_t *)&regVal[0],1,1000)!=HAL_OK);
 8000fe2:	bf00      	nop
 8000fe4:	f107 0220 	add.w	r2, r7, #32
 8000fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	21ee      	movs	r1, #238	; 0xee
 8000ff2:	483e      	ldr	r0, [pc, #248]	; (80010ec <Init_BMP180_Calib_Param+0x130>)
 8000ff4:	f001 f9da 	bl	80023ac <HAL_I2C_Master_Transmit>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f2      	bne.n	8000fe4 <Init_BMP180_Calib_Param+0x28>
	while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)BMP180_READ_ADDRESS,(uint8_t *)out_buff,22,1000)!=HAL_OK);
 8000ffe:	bf00      	nop
 8001000:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2316      	movs	r3, #22
 800100c:	21ef      	movs	r1, #239	; 0xef
 800100e:	4837      	ldr	r0, [pc, #220]	; (80010ec <Init_BMP180_Calib_Param+0x130>)
 8001010:	f001 fac0 	bl	8002594 <HAL_I2C_Master_Receive>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f2      	bne.n	8001000 <Init_BMP180_Calib_Param+0x44>

	//	HAL_I2C_Mem_Read(&hi2c1, BMP180_READ_ADDRESS, BMP180_AC1, 1, out_buff, 22, 100);

	for(int i=0;i<11;i++)
 800101a:	2300      	movs	r3, #0
 800101c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800101e:	e034      	b.n	800108a <Init_BMP180_Calib_Param+0xce>
	{
		CalibData[i] = out_buff[i*2]<<8 | out_buff[i*2+1];
 8001020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001028:	4413      	add	r3, r2
 800102a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	3301      	adds	r3, #1
 8001038:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800103c:	440b      	add	r3, r1
 800103e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b21b      	sxth	r3, r3
 8001048:	b29a      	uxth	r2, r3
 800104a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001052:	440b      	add	r3, r1
 8001054:	f823 2c38 	strh.w	r2, [r3, #-56]
		if(CalibData[i]==0 || CalibData[i]==0xFFFF) return HAL_ERROR;
 8001058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001060:	4413      	add	r3, r2
 8001062:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00a      	beq.n	8001080 <Init_BMP180_Calib_Param+0xc4>
 800106a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001072:	4413      	add	r3, r2
 8001074:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	4293      	cmp	r3, r2
 800107e:	d101      	bne.n	8001084 <Init_BMP180_Calib_Param+0xc8>
 8001080:	2301      	movs	r3, #1
 8001082:	e02f      	b.n	80010e4 <Init_BMP180_Calib_Param+0x128>
	for(int i=0;i<11;i++)
 8001084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001086:	3301      	adds	r3, #1
 8001088:	63fb      	str	r3, [r7, #60]	; 0x3c
 800108a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800108c:	2b0a      	cmp	r3, #10
 800108e:	ddc7      	ble.n	8001020 <Init_BMP180_Calib_Param+0x64>
	}

	Calib->AC1 = CalibData[0];
 8001090:	893b      	ldrh	r3, [r7, #8]
 8001092:	b21a      	sxth	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	801a      	strh	r2, [r3, #0]
	Calib->AC2 = CalibData[1];
 8001098:	897b      	ldrh	r3, [r7, #10]
 800109a:	b21a      	sxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	805a      	strh	r2, [r3, #2]
	Calib->AC3 = CalibData[2];
 80010a0:	89bb      	ldrh	r3, [r7, #12]
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	809a      	strh	r2, [r3, #4]
	Calib->AC4 = CalibData[3];
 80010a8:	89fa      	ldrh	r2, [r7, #14]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	80da      	strh	r2, [r3, #6]
	Calib->AC5 = CalibData[4];
 80010ae:	8a3a      	ldrh	r2, [r7, #16]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	811a      	strh	r2, [r3, #8]
	Calib->AC6 = CalibData[5];
 80010b4:	8a7a      	ldrh	r2, [r7, #18]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	815a      	strh	r2, [r3, #10]
	Calib->B1  = CalibData[6];
 80010ba:	8abb      	ldrh	r3, [r7, #20]
 80010bc:	b21a      	sxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	819a      	strh	r2, [r3, #12]
	Calib->B2  = CalibData[7];
 80010c2:	8afb      	ldrh	r3, [r7, #22]
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	81da      	strh	r2, [r3, #14]
	Calib->MB  = CalibData[8];
 80010ca:	8b3b      	ldrh	r3, [r7, #24]
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	821a      	strh	r2, [r3, #16]
	Calib->MC  = CalibData[9];
 80010d2:	8b7b      	ldrh	r3, [r7, #26]
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	825a      	strh	r2, [r3, #18]
	Calib->MD  = CalibData[10];
 80010da:	8bbb      	ldrh	r3, [r7, #28]
 80010dc:	b21a      	sxth	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	829a      	strh	r2, [r3, #20]

	return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3740      	adds	r7, #64	; 0x40
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000230 	.word	0x20000230

080010f0 <BMP180_GetTempC>:

float BMP180_GetTempC()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af02      	add	r7, sp, #8
	float 		tempC=0.0;;
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
	int32_t 	buf,x1,x2;
	uint8_t 	regVal[2]={0,},tmp[2]={0,};
 80010fc:	2300      	movs	r3, #0
 80010fe:	80bb      	strh	r3, [r7, #4]
 8001100:	2300      	movs	r3, #0
 8001102:	803b      	strh	r3, [r7, #0]

	regVal[0]=0xF4; regVal[1]=0x2E;
 8001104:	23f4      	movs	r3, #244	; 0xf4
 8001106:	713b      	strb	r3, [r7, #4]
 8001108:	232e      	movs	r3, #46	; 0x2e
 800110a:	717b      	strb	r3, [r7, #5]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)BMP180_WRITE_ADDRESS,(uint8_t *)regVal,2,1000)!=HAL_OK);
 800110c:	bf00      	nop
 800110e:	1d3a      	adds	r2, r7, #4
 8001110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2302      	movs	r3, #2
 8001118:	21ee      	movs	r1, #238	; 0xee
 800111a:	4837      	ldr	r0, [pc, #220]	; (80011f8 <BMP180_GetTempC+0x108>)
 800111c:	f001 f946 	bl	80023ac <HAL_I2C_Master_Transmit>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f3      	bne.n	800110e <BMP180_GetTempC+0x1e>
	HAL_Delay(5);
 8001126:	2005      	movs	r0, #5
 8001128:	f000 fdf8 	bl	8001d1c <HAL_Delay>
	regVal[0]=0xF6; regVal[1]=0x00;
 800112c:	23f6      	movs	r3, #246	; 0xf6
 800112e:	713b      	strb	r3, [r7, #4]
 8001130:	2300      	movs	r3, #0
 8001132:	717b      	strb	r3, [r7, #5]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)BMP180_WRITE_ADDRESS,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8001134:	bf00      	nop
 8001136:	1d3a      	adds	r2, r7, #4
 8001138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2302      	movs	r3, #2
 8001140:	21ee      	movs	r1, #238	; 0xee
 8001142:	482d      	ldr	r0, [pc, #180]	; (80011f8 <BMP180_GetTempC+0x108>)
 8001144:	f001 f932 	bl	80023ac <HAL_I2C_Master_Transmit>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f3      	bne.n	8001136 <BMP180_GetTempC+0x46>
	while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)BMP180_READ_ADDRESS,(uint8_t *)tmp,2,1000)!=HAL_OK);
 800114e:	bf00      	nop
 8001150:	463a      	mov	r2, r7
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2302      	movs	r3, #2
 800115a:	21ef      	movs	r1, #239	; 0xef
 800115c:	4826      	ldr	r0, [pc, #152]	; (80011f8 <BMP180_GetTempC+0x108>)
 800115e:	f001 fa19 	bl	8002594 <HAL_I2C_Master_Receive>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f3      	bne.n	8001150 <BMP180_GetTempC+0x60>

	printf("%d,%d",tmp[0],tmp[1]);
 8001168:	783b      	ldrb	r3, [r7, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	461a      	mov	r2, r3
 8001170:	4822      	ldr	r0, [pc, #136]	; (80011fc <BMP180_GetTempC+0x10c>)
 8001172:	f004 fabb 	bl	80056ec <iprintf>

	buf = (tmp[0]<<8 | tmp[1]);
 8001176:	783b      	ldrb	r3, [r7, #0]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	787a      	ldrb	r2, [r7, #1]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
	x1 = ((buf - B.AC6) * B.AC5)>>15;
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <BMP180_GetTempC+0x110>)
 8001182:	895b      	ldrh	r3, [r3, #10]
 8001184:	461a      	mov	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <BMP180_GetTempC+0x110>)
 800118c:	8912      	ldrh	r2, [r2, #8]
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	13db      	asrs	r3, r3, #15
 8001194:	60fb      	str	r3, [r7, #12]
	x2 = (B.MC << 11) / (x1 + B.MD);
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <BMP180_GetTempC+0x110>)
 8001198:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800119c:	02da      	lsls	r2, r3, #11
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <BMP180_GetTempC+0x110>)
 80011a0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80011a4:	4619      	mov	r1, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	440b      	add	r3, r1
 80011aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80011ae:	60bb      	str	r3, [r7, #8]
	tempC = ((x1+x2+8) >>4) * 0.1;
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	4413      	add	r3, r2
 80011b6:	3308      	adds	r3, #8
 80011b8:	111b      	asrs	r3, r3, #4
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f9b2 	bl	8000524 <__aeabi_i2d>
 80011c0:	a30b      	add	r3, pc, #44	; (adr r3, 80011f0 <BMP180_GetTempC+0x100>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fa17 	bl	80005f8 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fce9 	bl	8000ba8 <__aeabi_d2f>
 80011d6:	4603      	mov	r3, r0
 80011d8:	617b      	str	r3, [r7, #20]

	return tempC;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	ee07 3a90 	vmov	s15, r3
}
 80011e0:	eeb0 0a67 	vmov.f32	s0, s15
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	f3af 8000 	nop.w
 80011f0:	9999999a 	.word	0x9999999a
 80011f4:	3fb99999 	.word	0x3fb99999
 80011f8:	20000230 	.word	0x20000230
 80011fc:	080078f0 	.word	0x080078f0
 8001200:	20000210 	.word	0x20000210

08001204 <Init_HMC5883L>:
		angle_offset = 0.0;

uint8_t HMC5883Lmode;

void	Init_HMC5883L()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af02      	add	r7, sp, #8
	  uint8_t regVal[2];

	  // Set to 8 samples 15Hz
	  regVal[0] = HMC5883L_CRA; regVal[1] = 0x70;     // 0x70
 800120a:	2300      	movs	r3, #0
 800120c:	713b      	strb	r3, [r7, #4]
 800120e:	2370      	movs	r3, #112	; 0x70
 8001210:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)HMC5883L,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8001212:	bf00      	nop
 8001214:	1d3a      	adds	r2, r7, #4
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2302      	movs	r3, #2
 800121e:	213c      	movs	r1, #60	; 0x3c
 8001220:	4816      	ldr	r0, [pc, #88]	; (800127c <Init_HMC5883L+0x78>)
 8001222:	f001 f8c3 	bl	80023ac <HAL_I2C_Master_Transmit>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f3      	bne.n	8001214 <Init_HMC5883L+0x10>

	  // 1.3 gain LSb / Gauss 1090 (default)
	  regVal[0] = HMC5883L_CRB; regVal[1] = 0x20;
 800122c:	2301      	movs	r3, #1
 800122e:	713b      	strb	r3, [r7, #4]
 8001230:	2320      	movs	r3, #32
 8001232:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)HMC5883L,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8001234:	bf00      	nop
 8001236:	1d3a      	adds	r2, r7, #4
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2302      	movs	r3, #2
 8001240:	213c      	movs	r1, #60	; 0x3c
 8001242:	480e      	ldr	r0, [pc, #56]	; (800127c <Init_HMC5883L+0x78>)
 8001244:	f001 f8b2 	bl	80023ac <HAL_I2C_Master_Transmit>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f3      	bne.n	8001236 <Init_HMC5883L+0x32>

	  // Continuous sampling
	  regVal[0] = HMC5883L_MR; regVal[1] = 0x00;
 800124e:	2302      	movs	r3, #2
 8001250:	713b      	strb	r3, [r7, #4]
 8001252:	2300      	movs	r3, #0
 8001254:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)HMC5883L,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8001256:	bf00      	nop
 8001258:	1d3a      	adds	r2, r7, #4
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2302      	movs	r3, #2
 8001262:	213c      	movs	r1, #60	; 0x3c
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <Init_HMC5883L+0x78>)
 8001266:	f001 f8a1 	bl	80023ac <HAL_I2C_Master_Transmit>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1f3      	bne.n	8001258 <Init_HMC5883L+0x54>
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000230 	.word	0x20000230

08001280 <HMC5883L_WhoAmI>:

uint8_t	HMC5883L_WhoAmI()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af02      	add	r7, sp, #8
	  uint8_t tmp[4] = {0x0A,0,0,0};
 8001286:	230a      	movs	r3, #10
 8001288:	607b      	str	r3, [r7, #4]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)HMC5883L,(uint8_t *)&tmp[0],1,1000)!=HAL_OK);
 800128a:	bf00      	nop
 800128c:	1d3a      	adds	r2, r7, #4
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	213c      	movs	r1, #60	; 0x3c
 8001298:	4811      	ldr	r0, [pc, #68]	; (80012e0 <HMC5883L_WhoAmI+0x60>)
 800129a:	f001 f887 	bl	80023ac <HAL_I2C_Master_Transmit>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f3      	bne.n	800128c <HMC5883L_WhoAmI+0xc>
	  while(HAL_I2C_Master_Receive (&hi2c1,(uint16_t)HMC5883L,(uint8_t *)&tmp[1],3,1000)!=HAL_OK);
 80012a4:	bf00      	nop
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2303      	movs	r3, #3
 80012b2:	213c      	movs	r1, #60	; 0x3c
 80012b4:	480a      	ldr	r0, [pc, #40]	; (80012e0 <HMC5883L_WhoAmI+0x60>)
 80012b6:	f001 f96d 	bl	8002594 <HAL_I2C_Master_Receive>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f2      	bne.n	80012a6 <HMC5883L_WhoAmI+0x26>

	  if(tmp[1]=='H' && tmp[2]=='4' && tmp[3]=='3')
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	2b48      	cmp	r3, #72	; 0x48
 80012c4:	d107      	bne.n	80012d6 <HMC5883L_WhoAmI+0x56>
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	2b34      	cmp	r3, #52	; 0x34
 80012ca:	d104      	bne.n	80012d6 <HMC5883L_WhoAmI+0x56>
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b33      	cmp	r3, #51	; 0x33
 80012d0:	d101      	bne.n	80012d6 <HMC5883L_WhoAmI+0x56>
	  {
		  return 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <HMC5883L_WhoAmI+0x58>
	  }
	  else return 0;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000230 	.word	0x20000230

080012e4 <GY_801_Start>:

#include "main.h"
#include "L3G4200D.h"

void 	GY_801_Start()
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, I2C_VCC_Pin, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2110      	movs	r1, #16
 80012ec:	4807      	ldr	r0, [pc, #28]	; (800130c <GY_801_Start+0x28>)
 80012ee:	f000 ffb5 	bl	800225c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80012f2:	2064      	movs	r0, #100	; 0x64
 80012f4:	f000 fd12 	bl	8001d1c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, I2C_VCC_Pin, GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	2110      	movs	r1, #16
 80012fc:	4803      	ldr	r0, [pc, #12]	; (800130c <GY_801_Start+0x28>)
 80012fe:	f000 ffad 	bl	800225c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001302:	2064      	movs	r0, #100	; 0x64
 8001304:	f000 fd0a 	bl	8001d1c <HAL_Delay>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	48000400 	.word	0x48000400

08001310 <Init_L3G4200D>:

void	Init_L3G4200D()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af02      	add	r7, sp, #8
	  uint8_t regVal[2];

	  // FS = 00 (+/- 250 dps full scale)
	  regVal[0] = L3G4200D_CTRL_REG4; regVal[1] = 0x80;  // 00
 8001316:	2323      	movs	r3, #35	; 0x23
 8001318:	713b      	strb	r3, [r7, #4]
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)regVal,2,1000)!=HAL_OK);
 800131e:	bf00      	nop
 8001320:	1d3a      	adds	r2, r7, #4
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2302      	movs	r3, #2
 800132a:	21d2      	movs	r1, #210	; 0xd2
 800132c:	481e      	ldr	r0, [pc, #120]	; (80013a8 <Init_L3G4200D+0x98>)
 800132e:	f001 f83d 	bl	80023ac <HAL_I2C_Master_Transmit>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f3      	bne.n	8001320 <Init_L3G4200D+0x10>

	  // DR = 01 (200 Hz ODR); BW = 10 (50 Hz bandwidth); PD = 1 (normal mode); Zen = Yen = Xen = 1 (all axes enabled)
	  regVal[0] = L3G4200D_CTRL_REG1; regVal[1] = 0x0F;  // FF
 8001338:	2320      	movs	r3, #32
 800133a:	713b      	strb	r3, [r7, #4]
 800133c:	230f      	movs	r3, #15
 800133e:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8001340:	bf00      	nop
 8001342:	1d3a      	adds	r2, r7, #4
 8001344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2302      	movs	r3, #2
 800134c:	21d2      	movs	r1, #210	; 0xd2
 800134e:	4816      	ldr	r0, [pc, #88]	; (80013a8 <Init_L3G4200D+0x98>)
 8001350:	f001 f82c 	bl	80023ac <HAL_I2C_Master_Transmit>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f3      	bne.n	8001342 <Init_L3G4200D+0x32>


	  // set high-pass filter setting
	  regVal[0] = L3G4200D_CTRL_REG2; regVal[1] = 0x00;
 800135a:	2321      	movs	r3, #33	; 0x21
 800135c:	713b      	strb	r3, [r7, #4]
 800135e:	2300      	movs	r3, #0
 8001360:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8001362:	bf00      	nop
 8001364:	1d3a      	adds	r2, r7, #4
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2302      	movs	r3, #2
 800136e:	21d2      	movs	r1, #210	; 0xd2
 8001370:	480d      	ldr	r0, [pc, #52]	; (80013a8 <Init_L3G4200D+0x98>)
 8001372:	f001 f81b 	bl	80023ac <HAL_I2C_Master_Transmit>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f3      	bne.n	8001364 <Init_L3G4200D+0x54>

	  // enable high-pass filter
	  regVal[0] = L3G4200D_CTRL_REG5; regVal[1] = 0x10;
 800137c:	2324      	movs	r3, #36	; 0x24
 800137e:	713b      	strb	r3, [r7, #4]
 8001380:	2310      	movs	r3, #16
 8001382:	717b      	strb	r3, [r7, #5]
	  while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)L3G4200D,(uint8_t *)regVal,2,1000)!=HAL_OK);
 8001384:	bf00      	nop
 8001386:	1d3a      	adds	r2, r7, #4
 8001388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2302      	movs	r3, #2
 8001390:	21d2      	movs	r1, #210	; 0xd2
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <Init_L3G4200D+0x98>)
 8001394:	f001 f80a 	bl	80023ac <HAL_I2C_Master_Transmit>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f3      	bne.n	8001386 <Init_L3G4200D+0x76>
}
 800139e:	bf00      	nop
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000230 	.word	0x20000230

080013ac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM6)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d107      	bne.n	80013ce <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		if(htim->Instance==TIM6)   GyroData = true;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a06      	ldr	r2, [pc, #24]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d102      	bne.n	80013ce <HAL_TIM_PeriodElapsedCallback+0x22>
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
	}
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40001000 	.word	0x40001000
 80013e0:	200001f8 	.word	0x200001f8

080013e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ea:	f000 fc22 	bl	8001c32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ee:	f000 f86f 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f2:	f000 f965 	bl	80016c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013f6:	f000 f933 	bl	8001660 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013fa:	f000 f8b9 	bl	8001570 <MX_I2C1_Init>
  MX_TIM6_Init();
 80013fe:	f000 f8f7 	bl	80015f0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //  GY-801 Start
  GY_801_Start();
 8001402:	f7ff ff6f 	bl	80012e4 <GY_801_Start>


  Init_L3G4200D();
 8001406:	f7ff ff83 	bl	8001310 <Init_L3G4200D>
  Init_ADXL345();
 800140a:	f7ff fd99 	bl	8000f40 <Init_ADXL345>
  HAL_Delay(100);
 800140e:	2064      	movs	r0, #100	; 0x64
 8001410:	f000 fc84 	bl	8001d1c <HAL_Delay>
  Init_HMC5883L();
 8001414:	f7ff fef6 	bl	8001204 <Init_HMC5883L>
  HAL_Delay(100);
 8001418:	2064      	movs	r0, #100	; 0x64
 800141a:	f000 fc7f 	bl	8001d1c <HAL_Delay>

  while(HAL_TIM_Base_Start_IT(&htim6)!=HAL_OK);
 800141e:	bf00      	nop
 8001420:	4824      	ldr	r0, [pc, #144]	; (80014b4 <main+0xd0>)
 8001422:	f002 fded 	bl	8004000 <HAL_TIM_Base_Start_IT>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f9      	bne.n	8001420 <main+0x3c>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  if(HMC5883L_WhoAmI()==1)
 800142c:	f7ff ff28 	bl	8001280 <HMC5883L_WhoAmI>
 8001430:	4603      	mov	r3, r0
 8001432:	2b01      	cmp	r3, #1
 8001434:	d103      	bne.n	800143e <main+0x5a>
  {
	  printf("HMC5883L OK\r\n");
 8001436:	4820      	ldr	r0, [pc, #128]	; (80014b8 <main+0xd4>)
 8001438:	f004 f9de 	bl	80057f8 <puts>
 800143c:	e002      	b.n	8001444 <main+0x60>
  }
  else
  {
	  printf("HMC5883L Fail\r\n");
 800143e:	481f      	ldr	r0, [pc, #124]	; (80014bc <main+0xd8>)
 8001440:	f004 f9da 	bl	80057f8 <puts>
  }

  if(Init_BMP180_Calib_Param(&B)==HAL_OK)
 8001444:	481e      	ldr	r0, [pc, #120]	; (80014c0 <main+0xdc>)
 8001446:	f7ff fdb9 	bl	8000fbc <Init_BMP180_Calib_Param>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d11c      	bne.n	800148a <main+0xa6>
  {
	  printf("%7d%7d%7d%7d%7d%7d\r\n",B.AC1,B.AC2,B.AC3,B.AC4,B.AC5,B.AC6);
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <main+0xdc>)
 8001452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001456:	4618      	mov	r0, r3
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <main+0xdc>)
 800145a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800145e:	461c      	mov	r4, r3
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <main+0xdc>)
 8001462:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001466:	461d      	mov	r5, r3
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <main+0xdc>)
 800146a:	88db      	ldrh	r3, [r3, #6]
 800146c:	461a      	mov	r2, r3
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <main+0xdc>)
 8001470:	891b      	ldrh	r3, [r3, #8]
 8001472:	4619      	mov	r1, r3
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <main+0xdc>)
 8001476:	895b      	ldrh	r3, [r3, #10]
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	9101      	str	r1, [sp, #4]
 800147c:	9200      	str	r2, [sp, #0]
 800147e:	462b      	mov	r3, r5
 8001480:	4622      	mov	r2, r4
 8001482:	4601      	mov	r1, r0
 8001484:	480f      	ldr	r0, [pc, #60]	; (80014c4 <main+0xe0>)
 8001486:	f004 f931 	bl	80056ec <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(GyroData==true) {
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <main+0xe4>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0fa      	beq.n	800148a <main+0xa6>
//		  ADXL345_Read(&A);

//		  printf("%7d%7d%7d\r\n",A.x,A.y,A.z);
//		  printf("%7d%7d%7d%7d%7d%7d",G.x,G.y,G.z,A.x,A.y,A.z);
//		  printf(",%7.2f\r\n",HMC5883L_Read());
		  printf("%10.4f\r\n",BMP180_GetTempC());
 8001494:	f7ff fe2c 	bl	80010f0 <BMP180_GetTempC>
 8001498:	ee10 3a10 	vmov	r3, s0
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f853 	bl	8000548 <__aeabi_f2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4809      	ldr	r0, [pc, #36]	; (80014cc <main+0xe8>)
 80014a8:	f004 f920 	bl	80056ec <iprintf>
		  GyroData=false;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <main+0xe4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	  if(GyroData==true) {
 80014b2:	e7ea      	b.n	800148a <main+0xa6>
 80014b4:	2000027c 	.word	0x2000027c
 80014b8:	080078f8 	.word	0x080078f8
 80014bc:	08007908 	.word	0x08007908
 80014c0:	20000210 	.word	0x20000210
 80014c4:	08007918 	.word	0x08007918
 80014c8:	200001f8 	.word	0x200001f8
 80014cc:	08007930 	.word	0x08007930

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b096      	sub	sp, #88	; 0x58
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	2244      	movs	r2, #68	; 0x44
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 fc92 	bl	8004e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	463b      	mov	r3, r7
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014f6:	f001 fbc9 	bl	8002c8c <HAL_PWREx_ControlVoltageScaling>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001500:	f000 f93e 	bl	8001780 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001504:	2301      	movs	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001508:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800150c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	2302      	movs	r3, #2
 8001510:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001512:	2303      	movs	r3, #3
 8001514:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001516:	2301      	movs	r3, #1
 8001518:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800151a:	2314      	movs	r3, #20
 800151c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800151e:	2307      	movs	r3, #7
 8001520:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001522:	2302      	movs	r3, #2
 8001524:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001526:	2302      	movs	r3, #2
 8001528:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4618      	mov	r0, r3
 8001530:	f001 fc02 	bl	8002d38 <HAL_RCC_OscConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800153a:	f000 f921 	bl	8001780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153e:	230f      	movs	r3, #15
 8001540:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001542:	2303      	movs	r3, #3
 8001544:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001552:	463b      	mov	r3, r7
 8001554:	2104      	movs	r1, #4
 8001556:	4618      	mov	r0, r3
 8001558:	f002 f80e 	bl	8003578 <HAL_RCC_ClockConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001562:	f000 f90d 	bl	8001780 <Error_Handler>
  }
}
 8001566:	bf00      	nop
 8001568:	3758      	adds	r7, #88	; 0x58
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <MX_I2C1_Init+0x78>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_I2C1_Init+0x74>)
 800157c:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <MX_I2C1_Init+0x7c>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001588:	2201      	movs	r2, #1
 800158a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <MX_I2C1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_I2C1_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015aa:	480e      	ldr	r0, [pc, #56]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015ac:	f000 fe6e 	bl	800228c <HAL_I2C_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015b6:	f000 f8e3 	bl	8001780 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ba:	2100      	movs	r1, #0
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015be:	f001 fabf 	bl	8002b40 <HAL_I2CEx_ConfigAnalogFilter>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015c8:	f000 f8da 	bl	8001780 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015cc:	2100      	movs	r1, #0
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015d0:	f001 fb01 	bl	8002bd6 <HAL_I2CEx_ConfigDigitalFilter>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015da:	f000 f8d1 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000230 	.word	0x20000230
 80015e8:	40005400 	.word	0x40005400
 80015ec:	00702991 	.word	0x00702991

080015f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_TIM6_Init+0x68>)
 8001602:	4a16      	ldr	r2, [pc, #88]	; (800165c <MX_TIM6_Init+0x6c>)
 8001604:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 400-1;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_TIM6_Init+0x68>)
 8001608:	f240 128f 	movw	r2, #399	; 0x18f
 800160c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_TIM6_Init+0x68>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <MX_TIM6_Init+0x68>)
 8001616:	f242 720f 	movw	r2, #9999	; 0x270f
 800161a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_TIM6_Init+0x68>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_TIM6_Init+0x68>)
 8001624:	f002 fc94 	bl	8003f50 <HAL_TIM_Base_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800162e:	f000 f8a7 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <MX_TIM6_Init+0x68>)
 8001640:	f002 fede 	bl	8004400 <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800164a:	f000 f899 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000027c 	.word	0x2000027c
 800165c:	40001000 	.word	0x40001000

08001660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <MX_USART2_UART_Init+0x5c>)
 8001668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_USART2_UART_Init+0x58>)
 80016a4:	f002 ff30 	bl	8004508 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016ae:	f000 f867 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200002c8 	.word	0x200002c8
 80016bc:	40004400 	.word	0x40004400

080016c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_GPIO_Init+0x8c>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <MX_GPIO_Init+0x8c>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_GPIO_Init+0x8c>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_GPIO_Init+0x8c>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <MX_GPIO_Init+0x8c>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_GPIO_Init+0x8c>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_GPIO_Init+0x8c>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <MX_GPIO_Init+0x8c>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_GPIO_Init+0x8c>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|I2C_VCC_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2118      	movs	r1, #24
 8001722:	480b      	ldr	r0, [pc, #44]	; (8001750 <MX_GPIO_Init+0x90>)
 8001724:	f000 fd9a 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin I2C_VCC_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|I2C_VCC_Pin;
 8001728:	2318      	movs	r3, #24
 800172a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	4619      	mov	r1, r3
 800173e:	4804      	ldr	r0, [pc, #16]	; (8001750 <MX_GPIO_Init+0x90>)
 8001740:	f000 fc22 	bl	8001f88 <HAL_GPIO_Init>

}
 8001744:	bf00      	nop
 8001746:	3720      	adds	r7, #32
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000
 8001750:	48000400 	.word	0x48000400

08001754 <_write>:
// printf
//**********************************************************************

#ifdef __GNUC__
int _write(int file,uint8_t*ptr,int len)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,ptr,len,1000);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	b29a      	uxth	r2, r3
 8001764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	4804      	ldr	r0, [pc, #16]	; (800177c <_write+0x28>)
 800176c:	f002 ff1a 	bl	80045a4 <HAL_UART_Transmit>
return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200002c8 	.word	0x200002c8

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
}
 8001786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001788:	e7fe      	b.n	8001788 <Error_Handler+0x8>
	...

0800178c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_MspInit+0x50>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	4a11      	ldr	r2, [pc, #68]	; (80017dc <HAL_MspInit+0x50>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6613      	str	r3, [r2, #96]	; 0x60
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_MspInit+0x50>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_MspInit+0x50>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_MspInit+0x50>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6593      	str	r3, [r2, #88]	; 0x58
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_MspInit+0x50>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	2005      	movs	r0, #5
 80017c8:	f000 fba7 	bl	8001f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80017cc:	2005      	movs	r0, #5
 80017ce:	f000 fbc0 	bl	8001f52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b09e      	sub	sp, #120	; 0x78
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	2254      	movs	r2, #84	; 0x54
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f003 fb01 	bl	8004e08 <memset>
  if(hi2c->Instance==I2C1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <HAL_I2C_MspInit+0xa8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d137      	bne.n	8001880 <HAL_I2C_MspInit+0xa0>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001810:	2340      	movs	r3, #64	; 0x40
 8001812:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001814:	2300      	movs	r3, #0
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4618      	mov	r0, r3
 800181e:	f002 f8b1 	bl	8003984 <HAL_RCCEx_PeriphCLKConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001828:	f7ff ffaa 	bl	8001780 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_I2C_MspInit+0xac>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001830:	4a16      	ldr	r2, [pc, #88]	; (800188c <HAL_I2C_MspInit+0xac>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_I2C_MspInit+0xac>)
 800183a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001844:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001848:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184a:	2312      	movs	r3, #18
 800184c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001856:	2304      	movs	r3, #4
 8001858:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800185e:	4619      	mov	r1, r3
 8001860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001864:	f000 fb90 	bl	8001f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_I2C_MspInit+0xac>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_I2C_MspInit+0xac>)
 800186e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001872:	6593      	str	r3, [r2, #88]	; 0x58
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_I2C_MspInit+0xac>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001880:	bf00      	nop
 8001882:	3778      	adds	r7, #120	; 0x78
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40005400 	.word	0x40005400
 800188c:	40021000 	.word	0x40021000

08001890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <HAL_TIM_Base_MspInit+0x44>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d113      	bne.n	80018ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_TIM_Base_MspInit+0x48>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <HAL_TIM_Base_MspInit+0x48>)
 80018a8:	f043 0310 	orr.w	r3, r3, #16
 80018ac:	6593      	str	r3, [r2, #88]	; 0x58
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_TIM_Base_MspInit+0x48>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2036      	movs	r0, #54	; 0x36
 80018c0:	f000 fb2b 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018c4:	2036      	movs	r0, #54	; 0x36
 80018c6:	f000 fb44 	bl	8001f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40001000 	.word	0x40001000
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b09e      	sub	sp, #120	; 0x78
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	2254      	movs	r2, #84	; 0x54
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 fa83 	bl	8004e08 <memset>
  if(huart->Instance==USART2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a28      	ldr	r2, [pc, #160]	; (80019a8 <HAL_UART_MspInit+0xcc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d148      	bne.n	800199e <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800190c:	2302      	movs	r3, #2
 800190e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	4618      	mov	r0, r3
 800191a:	f002 f833 	bl	8003984 <HAL_RCCEx_PeriphCLKConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001924:	f7ff ff2c 	bl	8001780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_UART_MspInit+0xd0>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192c:	4a1f      	ldr	r2, [pc, #124]	; (80019ac <HAL_UART_MspInit+0xd0>)
 800192e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001932:	6593      	str	r3, [r2, #88]	; 0x58
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <HAL_UART_MspInit+0xd0>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_UART_MspInit+0xd0>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_UART_MspInit+0xd0>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_UART_MspInit+0xd0>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001958:	2304      	movs	r3, #4
 800195a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001968:	2307      	movs	r3, #7
 800196a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001970:	4619      	mov	r1, r3
 8001972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001976:	f000 fb07 	bl	8001f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800197a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800197e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800198c:	2303      	movs	r3, #3
 800198e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001994:	4619      	mov	r1, r3
 8001996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199a:	f000 faf5 	bl	8001f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3778      	adds	r7, #120	; 0x78
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40004400 	.word	0x40004400
 80019ac:	40021000 	.word	0x40021000

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <NMI_Handler+0x4>

080019b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <MemManage_Handler+0x4>

080019c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <UsageFault_Handler+0x4>

080019ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fc:	f000 f96e 	bl	8001cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <TIM6_DAC_IRQHandler+0x10>)
 8001a1a:	f002 fb45 	bl	80040a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000027c 	.word	0x2000027c

08001a28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	return 1;
 8001a2c:	2301      	movs	r3, #1
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_kill>:

int _kill(int pid, int sig)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a42:	f003 f9b7 	bl	8004db4 <__errno>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2216      	movs	r2, #22
 8001a4a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_exit>:

void _exit (int status)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ffe7 	bl	8001a38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a6a:	e7fe      	b.n	8001a6a <_exit+0x12>

08001a6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	e00a      	b.n	8001a94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a7e:	f3af 8000 	nop.w
 8001a82:	4601      	mov	r1, r0
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	60ba      	str	r2, [r7, #8]
 8001a8a:	b2ca      	uxtb	r2, r1
 8001a8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	3301      	adds	r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	dbf0      	blt.n	8001a7e <_read+0x12>
	}

return len;
 8001a9c:	687b      	ldr	r3, [r7, #4]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
	return -1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ace:	605a      	str	r2, [r3, #4]
	return 0;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <_isatty>:

int _isatty(int file)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
	return 0;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <_sbrk+0x5c>)
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <_sbrk+0x60>)
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <_sbrk+0x64>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <_sbrk+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d207      	bcs.n	8001b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b40:	f003 f938 	bl	8004db4 <__errno>
 8001b44:	4603      	mov	r3, r0
 8001b46:	220c      	movs	r2, #12
 8001b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	e009      	b.n	8001b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <_sbrk+0x64>)
 8001b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20010000 	.word	0x20010000
 8001b70:	00000400 	.word	0x00000400
 8001b74:	200001fc 	.word	0x200001fc
 8001b78:	20000360 	.word	0x20000360

08001b7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <SystemInit+0x5c>)
 8001b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b86:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <SystemInit+0x5c>)
 8001b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <SystemInit+0x60>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <SystemInit+0x60>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <SystemInit+0x60>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <SystemInit+0x60>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <SystemInit+0x60>)
 8001ba8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001bac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <SystemInit+0x60>)
 8001bb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bb8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <SystemInit+0x60>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <SystemInit+0x60>)
 8001bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <SystemInit+0x60>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00
 8001bdc:	40021000 	.word	0x40021000

08001be0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001be4:	f7ff ffca 	bl	8001b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001be8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bea:	e003      	b.n	8001bf4 <LoopCopyDataInit>

08001bec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bf0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bf2:	3104      	adds	r1, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bf4:	480a      	ldr	r0, [pc, #40]	; (8001c20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bf8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bfa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bfc:	d3f6      	bcc.n	8001bec <CopyDataInit>
	ldr	r2, =_sbss
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c00:	e002      	b.n	8001c08 <LoopFillZerobss>

08001c02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c04:	f842 3b04 	str.w	r3, [r2], #4

08001c08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <LoopForever+0x16>)
	cmp	r2, r3
 8001c0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c0c:	d3f9      	bcc.n	8001c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f003 f8d7 	bl	8004dc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c12:	f7ff fbe7 	bl	80013e4 <main>

08001c16 <LoopForever>:

LoopForever:
    b LoopForever
 8001c16:	e7fe      	b.n	8001c16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c18:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001c1c:	08007d74 	.word	0x08007d74
	ldr	r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c24:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001c28:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001c2c:	20000360 	.word	0x20000360

08001c30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c30:	e7fe      	b.n	8001c30 <ADC1_IRQHandler>

08001c32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f000 f961 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c42:	2000      	movs	r0, #0
 8001c44:	f000 f80e 	bl	8001c64 <HAL_InitTick>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	71fb      	strb	r3, [r7, #7]
 8001c52:	e001      	b.n	8001c58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c54:	f7ff fd9a 	bl	800178c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_InitTick+0x6c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d023      	beq.n	8001cc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_InitTick+0x70>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <HAL_InitTick+0x6c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f96d 	bl	8001f6e <HAL_SYSTICK_Config>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10f      	bne.n	8001cba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b0f      	cmp	r3, #15
 8001c9e:	d809      	bhi.n	8001cb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f000 f937 	bl	8001f1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cac:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_InitTick+0x74>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e007      	b.n	8001cc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	e004      	b.n	8001cc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	e001      	b.n	8001cc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	20000004 	.word	0x20000004

08001cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x20>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_IncTick+0x24>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_IncTick+0x24>)
 8001cee:	6013      	str	r3, [r2, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000008 	.word	0x20000008
 8001d00:	2000034c 	.word	0x2000034c

08001d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return uwTick;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_GetTick+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	2000034c 	.word	0x2000034c

08001d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7ff ffee 	bl	8001d04 <HAL_GetTick>
 8001d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d34:	d005      	beq.n	8001d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_Delay+0x44>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d42:	bf00      	nop
 8001d44:	f7ff ffde 	bl	8001d04 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d8f7      	bhi.n	8001d44 <HAL_Delay+0x28>
  {
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000008 	.word	0x20000008

08001d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d96:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	60d3      	str	r3, [r2, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <__NVIC_EnableIRQ+0x38>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	; (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f7ff ff8e 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff29 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2c:	f7ff ff3e 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f7ff ff8e 	bl	8001e58 <NVIC_EncodePriority>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff5d 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff31 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffa2 	bl	8001ec0 <SysTick_Config>
 8001f7c:	4603      	mov	r3, r0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f96:	e148      	b.n	800222a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 813a 	beq.w	8002224 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d00b      	beq.n	8001fd0 <HAL_GPIO_Init+0x48>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d007      	beq.n	8001fd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fc4:	2b11      	cmp	r3, #17
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b12      	cmp	r3, #18
 8001fce:	d130      	bne.n	8002032 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002006:	2201      	movs	r2, #1
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	091b      	lsrs	r3, r3, #4
 800201c:	f003 0201 	and.w	r2, r3, #1
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0xea>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b12      	cmp	r3, #18
 8002070:	d123      	bne.n	80020ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	08da      	lsrs	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3208      	adds	r2, #8
 80020b4:	6939      	ldr	r1, [r7, #16]
 80020b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0203 	and.w	r2, r3, #3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8094 	beq.w	8002224 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fc:	4b52      	ldr	r3, [pc, #328]	; (8002248 <HAL_GPIO_Init+0x2c0>)
 80020fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002100:	4a51      	ldr	r2, [pc, #324]	; (8002248 <HAL_GPIO_Init+0x2c0>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6613      	str	r3, [r2, #96]	; 0x60
 8002108:	4b4f      	ldr	r3, [pc, #316]	; (8002248 <HAL_GPIO_Init+0x2c0>)
 800210a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002114:	4a4d      	ldr	r2, [pc, #308]	; (800224c <HAL_GPIO_Init+0x2c4>)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	3302      	adds	r3, #2
 800211c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	220f      	movs	r2, #15
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800213e:	d00d      	beq.n	800215c <HAL_GPIO_Init+0x1d4>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a43      	ldr	r2, [pc, #268]	; (8002250 <HAL_GPIO_Init+0x2c8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d007      	beq.n	8002158 <HAL_GPIO_Init+0x1d0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a42      	ldr	r2, [pc, #264]	; (8002254 <HAL_GPIO_Init+0x2cc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d101      	bne.n	8002154 <HAL_GPIO_Init+0x1cc>
 8002150:	2302      	movs	r3, #2
 8002152:	e004      	b.n	800215e <HAL_GPIO_Init+0x1d6>
 8002154:	2307      	movs	r3, #7
 8002156:	e002      	b.n	800215e <HAL_GPIO_Init+0x1d6>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_GPIO_Init+0x1d6>
 800215c:	2300      	movs	r3, #0
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	f002 0203 	and.w	r2, r2, #3
 8002164:	0092      	lsls	r2, r2, #2
 8002166:	4093      	lsls	r3, r2
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800216e:	4937      	ldr	r1, [pc, #220]	; (800224c <HAL_GPIO_Init+0x2c4>)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800217c:	4b36      	ldr	r3, [pc, #216]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021a0:	4a2d      	ldr	r2, [pc, #180]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80021a6:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021ca:	4a23      	ldr	r2, [pc, #140]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021f4:	4a18      	ldr	r2, [pc, #96]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021fa:	4b17      	ldr	r3, [pc, #92]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800221e:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <HAL_GPIO_Init+0x2d0>)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3301      	adds	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	f47f aeaf 	bne.w	8001f98 <HAL_GPIO_Init+0x10>
  }
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	40021000 	.word	0x40021000
 800224c:	40010000 	.word	0x40010000
 8002250:	48000400 	.word	0x48000400
 8002254:	48000800 	.word	0x48000800
 8002258:	40010400 	.word	0x40010400

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002278:	e002      	b.n	8002280 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e081      	b.n	80023a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fa94 	bl	80017e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2224      	movs	r2, #36	; 0x24
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	e006      	b.n	8002314 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002312:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d104      	bne.n	8002326 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002324:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002338:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002348:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	ea42 0103 	orr.w	r1, r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	021a      	lsls	r2, r3, #8
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69d9      	ldr	r1, [r3, #28]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1a      	ldr	r2, [r3, #32]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	461a      	mov	r2, r3
 80023b8:	460b      	mov	r3, r1
 80023ba:	817b      	strh	r3, [r7, #10]
 80023bc:	4613      	mov	r3, r2
 80023be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	f040 80da 	bne.w	8002582 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_I2C_Master_Transmit+0x30>
 80023d8:	2302      	movs	r3, #2
 80023da:	e0d3      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1d8>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023e4:	f7ff fc8e 	bl	8001d04 <HAL_GetTick>
 80023e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2319      	movs	r3, #25
 80023f0:	2201      	movs	r2, #1
 80023f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f9e6 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0be      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2221      	movs	r2, #33	; 0x21
 800240a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2210      	movs	r2, #16
 8002412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	893a      	ldrh	r2, [r7, #8]
 8002426:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	2bff      	cmp	r3, #255	; 0xff
 8002436:	d90e      	bls.n	8002456 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	22ff      	movs	r2, #255	; 0xff
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	b2da      	uxtb	r2, r3
 8002444:	8979      	ldrh	r1, [r7, #10]
 8002446:	4b51      	ldr	r3, [pc, #324]	; (800258c <HAL_I2C_Master_Transmit+0x1e0>)
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fb48 	bl	8002ae4 <I2C_TransferConfig>
 8002454:	e06c      	b.n	8002530 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	b2da      	uxtb	r2, r3
 8002466:	8979      	ldrh	r1, [r7, #10]
 8002468:	4b48      	ldr	r3, [pc, #288]	; (800258c <HAL_I2C_Master_Transmit+0x1e0>)
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fb37 	bl	8002ae4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002476:	e05b      	b.n	8002530 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	6a39      	ldr	r1, [r7, #32]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f9e3 	bl	8002848 <I2C_WaitOnTXISFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e07b      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	781a      	ldrb	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d034      	beq.n	8002530 <HAL_I2C_Master_Transmit+0x184>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d130      	bne.n	8002530 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	2200      	movs	r2, #0
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f975 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e04d      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2bff      	cmp	r3, #255	; 0xff
 80024f0:	d90e      	bls.n	8002510 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	22ff      	movs	r2, #255	; 0xff
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	8979      	ldrh	r1, [r7, #10]
 8002500:	2300      	movs	r3, #0
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 faeb 	bl	8002ae4 <I2C_TransferConfig>
 800250e:	e00f      	b.n	8002530 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	b2da      	uxtb	r2, r3
 8002520:	8979      	ldrh	r1, [r7, #10]
 8002522:	2300      	movs	r3, #0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fada 	bl	8002ae4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d19e      	bne.n	8002478 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	6a39      	ldr	r1, [r7, #32]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f9c2 	bl	80028c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e01a      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2220      	movs	r2, #32
 8002554:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_I2C_Master_Transmit+0x1e4>)
 8002562:	400b      	ands	r3, r1
 8002564:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	80002000 	.word	0x80002000
 8002590:	fe00e800 	.word	0xfe00e800

08002594 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	461a      	mov	r2, r3
 80025a0:	460b      	mov	r3, r1
 80025a2:	817b      	strh	r3, [r7, #10]
 80025a4:	4613      	mov	r3, r2
 80025a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	f040 80db 	bne.w	800276c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_I2C_Master_Receive+0x30>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e0d4      	b.n	800276e <HAL_I2C_Master_Receive+0x1da>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025cc:	f7ff fb9a 	bl	8001d04 <HAL_GetTick>
 80025d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2319      	movs	r3, #25
 80025d8:	2201      	movs	r2, #1
 80025da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f8f2 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0bf      	b.n	800276e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2222      	movs	r2, #34	; 0x22
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2210      	movs	r2, #16
 80025fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	893a      	ldrh	r2, [r7, #8]
 800260e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	2bff      	cmp	r3, #255	; 0xff
 800261e:	d90e      	bls.n	800263e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	22ff      	movs	r2, #255	; 0xff
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	b2da      	uxtb	r2, r3
 800262c:	8979      	ldrh	r1, [r7, #10]
 800262e:	4b52      	ldr	r3, [pc, #328]	; (8002778 <HAL_I2C_Master_Receive+0x1e4>)
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fa54 	bl	8002ae4 <I2C_TransferConfig>
 800263c:	e06d      	b.n	800271a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	4b49      	ldr	r3, [pc, #292]	; (8002778 <HAL_I2C_Master_Receive+0x1e4>)
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fa43 	bl	8002ae4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800265e:	e05c      	b.n	800271a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	6a39      	ldr	r1, [r7, #32]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f96b 	bl	8002940 <I2C_WaitOnRXNEFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e07c      	b.n	800276e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d034      	beq.n	800271a <HAL_I2C_Master_Receive+0x186>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d130      	bne.n	800271a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	2200      	movs	r2, #0
 80026c0:	2180      	movs	r1, #128	; 0x80
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f880 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e04d      	b.n	800276e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2bff      	cmp	r3, #255	; 0xff
 80026da:	d90e      	bls.n	80026fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	22ff      	movs	r2, #255	; 0xff
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	8979      	ldrh	r1, [r7, #10]
 80026ea:	2300      	movs	r3, #0
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f9f6 	bl	8002ae4 <I2C_TransferConfig>
 80026f8:	e00f      	b.n	800271a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	b2da      	uxtb	r2, r3
 800270a:	8979      	ldrh	r1, [r7, #10]
 800270c:	2300      	movs	r3, #0
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f9e5 	bl	8002ae4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d19d      	bne.n	8002660 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	6a39      	ldr	r1, [r7, #32]
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f8cd 	bl	80028c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e01a      	b.n	800276e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2220      	movs	r2, #32
 800273e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b0c      	ldr	r3, [pc, #48]	; (800277c <HAL_I2C_Master_Receive+0x1e8>)
 800274c:	400b      	ands	r3, r1
 800274e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	e000      	b.n	800276e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800276c:	2302      	movs	r3, #2
  }
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	80002400 	.word	0x80002400
 800277c:	fe00e800 	.word	0xfe00e800

08002780 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d103      	bne.n	800279e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2200      	movs	r2, #0
 800279c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d007      	beq.n	80027bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	619a      	str	r2, [r3, #24]
  }
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d8:	e022      	b.n	8002820 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d01e      	beq.n	8002820 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e2:	f7ff fa8f 	bl	8001d04 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d302      	bcc.n	80027f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d113      	bne.n	8002820 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e00f      	b.n	8002840 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	4013      	ands	r3, r2
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	429a      	cmp	r2, r3
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	429a      	cmp	r2, r3
 800283c:	d0cd      	beq.n	80027da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002854:	e02c      	b.n	80028b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f8dc 	bl	8002a18 <I2C_IsAcknowledgeFailed>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e02a      	b.n	80028c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d01e      	beq.n	80028b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002872:	f7ff fa47 	bl	8001d04 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	429a      	cmp	r2, r3
 8002880:	d302      	bcc.n	8002888 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d113      	bne.n	80028b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	f043 0220 	orr.w	r2, r3, #32
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e007      	b.n	80028c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d1cb      	bne.n	8002856 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028d4:	e028      	b.n	8002928 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f89c 	bl	8002a18 <I2C_IsAcknowledgeFailed>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e026      	b.n	8002938 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ea:	f7ff fa0b 	bl	8001d04 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d113      	bne.n	8002928 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e007      	b.n	8002938 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b20      	cmp	r3, #32
 8002934:	d1cf      	bne.n	80028d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800294c:	e055      	b.n	80029fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f860 	bl	8002a18 <I2C_IsAcknowledgeFailed>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e053      	b.n	8002a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b20      	cmp	r3, #32
 800296e:	d129      	bne.n	80029c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b04      	cmp	r3, #4
 800297c:	d105      	bne.n	800298a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e03f      	b.n	8002a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2220      	movs	r2, #32
 8002990:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800299e:	400b      	ands	r3, r1
 80029a0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e022      	b.n	8002a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c4:	f7ff f99e 	bl	8001d04 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d302      	bcc.n	80029da <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10f      	bne.n	80029fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e007      	b.n	8002a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d1a2      	bne.n	800294e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	fe00e800 	.word	0xfe00e800

08002a18 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d151      	bne.n	8002ad6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a32:	e022      	b.n	8002a7a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3a:	d01e      	beq.n	8002a7a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3c:	f7ff f962 	bl	8001d04 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d302      	bcc.n	8002a52 <I2C_IsAcknowledgeFailed+0x3a>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d113      	bne.n	8002a7a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f043 0220 	orr.w	r2, r3, #32
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e02e      	b.n	8002ad8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d1d5      	bne.n	8002a34 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2220      	movs	r2, #32
 8002a96:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7ff fe71 	bl	8002780 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <I2C_IsAcknowledgeFailed+0xc8>)
 8002aaa:	400b      	ands	r3, r1
 8002aac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f043 0204 	orr.w	r2, r3, #4
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	fe00e800 	.word	0xfe00e800

08002ae4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	817b      	strh	r3, [r7, #10]
 8002af2:	4613      	mov	r3, r2
 8002af4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	0d5b      	lsrs	r3, r3, #21
 8002b00:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b04:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <I2C_TransferConfig+0x58>)
 8002b06:	430b      	orrs	r3, r1
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	ea02 0103 	and.w	r1, r2, r3
 8002b0e:	897b      	ldrh	r3, [r7, #10]
 8002b10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b14:	7a7b      	ldrb	r3, [r7, #9]
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	03ff63ff 	.word	0x03ff63ff

08002b40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d138      	bne.n	8002bc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e032      	b.n	8002bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6819      	ldr	r1, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e000      	b.n	8002bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
  }
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d139      	bne.n	8002c60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e033      	b.n	8002c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2224      	movs	r2, #36	; 0x24
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e000      	b.n	8002c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c60:	2302      	movs	r3, #2
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40007000 	.word	0x40007000

08002c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9a:	d130      	bne.n	8002cfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c9c:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca8:	d038      	beq.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cb2:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cba:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2232      	movs	r2, #50	; 0x32
 8002cc0:	fb02 f303 	mul.w	r3, r2, r3
 8002cc4:	4a1b      	ldr	r2, [pc, #108]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	0c9b      	lsrs	r3, r3, #18
 8002ccc:	3301      	adds	r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cd0:	e002      	b.n	8002cd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cd8:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce4:	d102      	bne.n	8002cec <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f2      	bne.n	8002cd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf8:	d110      	bne.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e00f      	b.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0a:	d007      	beq.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d0c:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d14:	4a05      	ldr	r2, [pc, #20]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	20000000 	.word	0x20000000
 8002d34:	431bde83 	.word	0x431bde83

08002d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d102      	bne.n	8002d4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f000 bc11 	b.w	800356e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4c:	4ba0      	ldr	r3, [pc, #640]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d56:	4b9e      	ldr	r3, [pc, #632]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80e4 	beq.w	8002f36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <HAL_RCC_OscConfig+0x4c>
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	f040 808b 	bne.w	8002e92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	f040 8087 	bne.w	8002e92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d84:	4b92      	ldr	r3, [pc, #584]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_OscConfig+0x64>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e3e8      	b.n	800356e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1a      	ldr	r2, [r3, #32]
 8002da0:	4b8b      	ldr	r3, [pc, #556]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <HAL_RCC_OscConfig+0x7e>
 8002dac:	4b88      	ldr	r3, [pc, #544]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db4:	e005      	b.n	8002dc2 <HAL_RCC_OscConfig+0x8a>
 8002db6:	4b86      	ldr	r3, [pc, #536]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d223      	bcs.n	8002e0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fd7a 	bl	80038c4 <RCC_SetFlashLatencyFromMSIRange>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e3c9      	b.n	800356e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dda:	4b7d      	ldr	r3, [pc, #500]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7c      	ldr	r2, [pc, #496]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002de0:	f043 0308 	orr.w	r3, r3, #8
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b7a      	ldr	r3, [pc, #488]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4977      	ldr	r1, [pc, #476]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002df8:	4b75      	ldr	r3, [pc, #468]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	4972      	ldr	r1, [pc, #456]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
 8002e0c:	e025      	b.n	8002e5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e0e:	4b70      	ldr	r3, [pc, #448]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a6f      	ldr	r2, [pc, #444]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e14:	f043 0308 	orr.w	r3, r3, #8
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	4b6d      	ldr	r3, [pc, #436]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	496a      	ldr	r1, [pc, #424]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2c:	4b68      	ldr	r3, [pc, #416]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	4965      	ldr	r1, [pc, #404]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fd3a 	bl	80038c4 <RCC_SetFlashLatencyFromMSIRange>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e389      	b.n	800356e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e5a:	f000 fc6f 	bl	800373c <HAL_RCC_GetSysClockFreq>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	4b5b      	ldr	r3, [pc, #364]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	495a      	ldr	r1, [pc, #360]	; (8002fd4 <HAL_RCC_OscConfig+0x29c>)
 8002e6c:	5ccb      	ldrb	r3, [r1, r3]
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	fa22 f303 	lsr.w	r3, r2, r3
 8002e76:	4a58      	ldr	r2, [pc, #352]	; (8002fd8 <HAL_RCC_OscConfig+0x2a0>)
 8002e78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e7a:	4b58      	ldr	r3, [pc, #352]	; (8002fdc <HAL_RCC_OscConfig+0x2a4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe fef0 	bl	8001c64 <HAL_InitTick>
 8002e84:	4603      	mov	r3, r0
 8002e86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d052      	beq.n	8002f34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	e36d      	b.n	800356e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d032      	beq.n	8002f00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e9a:	4b4d      	ldr	r3, [pc, #308]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a4c      	ldr	r2, [pc, #304]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ea6:	f7fe ff2d 	bl	8001d04 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eae:	f7fe ff29 	bl	8001d04 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e356      	b.n	800356e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ec0:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ecc:	4b40      	ldr	r3, [pc, #256]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a3f      	ldr	r2, [pc, #252]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002ed2:	f043 0308 	orr.w	r3, r3, #8
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	493a      	ldr	r1, [pc, #232]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eea:	4b39      	ldr	r3, [pc, #228]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	4935      	ldr	r1, [pc, #212]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
 8002efe:	e01a      	b.n	8002f36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f00:	4b33      	ldr	r3, [pc, #204]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a32      	ldr	r2, [pc, #200]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fefa 	bl	8001d04 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f14:	f7fe fef6 	bl	8001d04 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e323      	b.n	800356e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f26:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x1dc>
 8002f32:	e000      	b.n	8002f36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d073      	beq.n	800302a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_OscConfig+0x21c>
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	2b0c      	cmp	r3, #12
 8002f4c:	d10e      	bne.n	8002f6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d10b      	bne.n	8002f6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f54:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d063      	beq.n	8003028 <HAL_RCC_OscConfig+0x2f0>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d15f      	bne.n	8003028 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e300      	b.n	800356e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f74:	d106      	bne.n	8002f84 <HAL_RCC_OscConfig+0x24c>
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e01d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x288>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x270>
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a0f      	ldr	r2, [pc, #60]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a0c      	ldr	r2, [pc, #48]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x288>
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01b      	beq.n	8003000 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fe9c 	bl	8001d04 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fce:	e010      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2ba>
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	0800793c 	.word	0x0800793c
 8002fd8:	20000000 	.word	0x20000000
 8002fdc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fe90 	bl	8001d04 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e2bd      	b.n	800356e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff2:	4baf      	ldr	r3, [pc, #700]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x2a8>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe fe80 	bl	8001d04 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe fe7c 	bl	8001d04 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e2a9      	b.n	800356e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800301a:	4ba5      	ldr	r3, [pc, #660]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x2d0>
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d060      	beq.n	80030f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2b04      	cmp	r3, #4
 800303a:	d005      	beq.n	8003048 <HAL_RCC_OscConfig+0x310>
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2b0c      	cmp	r3, #12
 8003040:	d119      	bne.n	8003076 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d116      	bne.n	8003076 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003048:	4b99      	ldr	r3, [pc, #612]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_OscConfig+0x328>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e286      	b.n	800356e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003060:	4b93      	ldr	r3, [pc, #588]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	4990      	ldr	r1, [pc, #576]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003074:	e040      	b.n	80030f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d023      	beq.n	80030c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800307e:	4b8c      	ldr	r3, [pc, #560]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a8b      	ldr	r2, [pc, #556]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fe fe3b 	bl	8001d04 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003092:	f7fe fe37 	bl	8001d04 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e264      	b.n	800356e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a4:	4b82      	ldr	r3, [pc, #520]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b7f      	ldr	r3, [pc, #508]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	497c      	ldr	r1, [pc, #496]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
 80030c4:	e018      	b.n	80030f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c6:	4b7a      	ldr	r3, [pc, #488]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a79      	ldr	r2, [pc, #484]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80030cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d2:	f7fe fe17 	bl	8001d04 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030da:	f7fe fe13 	bl	8001d04 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e240      	b.n	800356e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030ec:	4b70      	ldr	r3, [pc, #448]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f0      	bne.n	80030da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d03c      	beq.n	800317e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01c      	beq.n	8003146 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310c:	4b68      	ldr	r3, [pc, #416]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800310e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003112:	4a67      	ldr	r2, [pc, #412]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311c:	f7fe fdf2 	bl	8001d04 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003124:	f7fe fdee 	bl	8001d04 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e21b      	b.n	800356e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003136:	4b5e      	ldr	r3, [pc, #376]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0ef      	beq.n	8003124 <HAL_RCC_OscConfig+0x3ec>
 8003144:	e01b      	b.n	800317e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003146:	4b5a      	ldr	r3, [pc, #360]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314c:	4a58      	ldr	r2, [pc, #352]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003156:	f7fe fdd5 	bl	8001d04 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315e:	f7fe fdd1 	bl	8001d04 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e1fe      	b.n	800356e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003170:	4b4f      	ldr	r3, [pc, #316]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1ef      	bne.n	800315e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 80a6 	beq.w	80032d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318c:	2300      	movs	r3, #0
 800318e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003190:	4b47      	ldr	r3, [pc, #284]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10d      	bne.n	80031b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319c:	4b44      	ldr	r3, [pc, #272]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	4a43      	ldr	r2, [pc, #268]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80031a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a6:	6593      	str	r3, [r2, #88]	; 0x58
 80031a8:	4b41      	ldr	r3, [pc, #260]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b4:	2301      	movs	r3, #1
 80031b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b8:	4b3e      	ldr	r3, [pc, #248]	; (80032b4 <HAL_RCC_OscConfig+0x57c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d118      	bne.n	80031f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c4:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <HAL_RCC_OscConfig+0x57c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <HAL_RCC_OscConfig+0x57c>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d0:	f7fe fd98 	bl	8001d04 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d8:	f7fe fd94 	bl	8001d04 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e1c1      	b.n	800356e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ea:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <HAL_RCC_OscConfig+0x57c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d108      	bne.n	8003210 <HAL_RCC_OscConfig+0x4d8>
 80031fe:	4b2c      	ldr	r3, [pc, #176]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	4a2a      	ldr	r2, [pc, #168]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800320e:	e024      	b.n	800325a <HAL_RCC_OscConfig+0x522>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b05      	cmp	r3, #5
 8003216:	d110      	bne.n	800323a <HAL_RCC_OscConfig+0x502>
 8003218:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003220:	f043 0304 	orr.w	r3, r3, #4
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003228:	4b21      	ldr	r3, [pc, #132]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003238:	e00f      	b.n	800325a <HAL_RCC_OscConfig+0x522>
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003240:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003242:	f023 0301 	bic.w	r3, r3, #1
 8003246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800324a:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003252:	f023 0304 	bic.w	r3, r3, #4
 8003256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d016      	beq.n	8003290 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fe fd4f 	bl	8001d04 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe fd4b 	bl	8001d04 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e176      	b.n	800356e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ed      	beq.n	800326a <HAL_RCC_OscConfig+0x532>
 800328e:	e01a      	b.n	80032c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fe fd38 	bl	8001d04 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003296:	e00f      	b.n	80032b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003298:	f7fe fd34 	bl	8001d04 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d906      	bls.n	80032b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e15f      	b.n	800356e <HAL_RCC_OscConfig+0x836>
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b8:	4baa      	ldr	r3, [pc, #680]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e8      	bne.n	8003298 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032c6:	7ffb      	ldrb	r3, [r7, #31]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d105      	bne.n	80032d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032cc:	4ba5      	ldr	r3, [pc, #660]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	4aa4      	ldr	r2, [pc, #656]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80032d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d03c      	beq.n	800335e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01c      	beq.n	8003326 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032ec:	4b9d      	ldr	r3, [pc, #628]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80032ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032f2:	4a9c      	ldr	r2, [pc, #624]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fe fd02 	bl	8001d04 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003304:	f7fe fcfe 	bl	8001d04 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e12b      	b.n	800356e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003316:	4b93      	ldr	r3, [pc, #588]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 8003318:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0ef      	beq.n	8003304 <HAL_RCC_OscConfig+0x5cc>
 8003324:	e01b      	b.n	800335e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003326:	4b8f      	ldr	r3, [pc, #572]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 8003328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800332c:	4a8d      	ldr	r2, [pc, #564]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7fe fce5 	bl	8001d04 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800333e:	f7fe fce1 	bl	8001d04 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e10e      	b.n	800356e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003350:	4b84      	ldr	r3, [pc, #528]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 8003352:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1ef      	bne.n	800333e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 8102 	beq.w	800356c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	2b02      	cmp	r3, #2
 800336e:	f040 80c5 	bne.w	80034fc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003372:	4b7c      	ldr	r3, [pc, #496]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f003 0203 	and.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	429a      	cmp	r2, r3
 8003384:	d12c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	3b01      	subs	r3, #1
 8003392:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003394:	429a      	cmp	r2, r3
 8003396:	d123      	bne.n	80033e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d11b      	bne.n	80033e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d113      	bne.n	80033e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	3b01      	subs	r3, #1
 80033c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d109      	bne.n	80033e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	3b01      	subs	r3, #1
 80033da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d067      	beq.n	80034b0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b0c      	cmp	r3, #12
 80033e4:	d062      	beq.n	80034ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033e6:	4b5f      	ldr	r3, [pc, #380]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0bb      	b.n	800356e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033f6:	4b5b      	ldr	r3, [pc, #364]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a5a      	ldr	r2, [pc, #360]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80033fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003400:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003402:	f7fe fc7f 	bl	8001d04 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7fe fc7b 	bl	8001d04 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e0a8      	b.n	800356e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341c:	4b51      	ldr	r3, [pc, #324]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f0      	bne.n	800340a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003428:	4b4e      	ldr	r3, [pc, #312]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <HAL_RCC_OscConfig+0x830>)
 800342e:	4013      	ands	r3, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003438:	3a01      	subs	r2, #1
 800343a:	0112      	lsls	r2, r2, #4
 800343c:	4311      	orrs	r1, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003442:	0212      	lsls	r2, r2, #8
 8003444:	4311      	orrs	r1, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800344a:	0852      	lsrs	r2, r2, #1
 800344c:	3a01      	subs	r2, #1
 800344e:	0552      	lsls	r2, r2, #21
 8003450:	4311      	orrs	r1, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003456:	0852      	lsrs	r2, r2, #1
 8003458:	3a01      	subs	r2, #1
 800345a:	0652      	lsls	r2, r2, #25
 800345c:	4311      	orrs	r1, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003462:	06d2      	lsls	r2, r2, #27
 8003464:	430a      	orrs	r2, r1
 8003466:	493f      	ldr	r1, [pc, #252]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 8003468:	4313      	orrs	r3, r2
 800346a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800346c:	4b3d      	ldr	r3, [pc, #244]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a3c      	ldr	r2, [pc, #240]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 8003472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003476:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003478:	4b3a      	ldr	r3, [pc, #232]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a39      	ldr	r2, [pc, #228]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 800347e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003482:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003484:	f7fe fc3e 	bl	8001d04 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fc3a 	bl	8001d04 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e067      	b.n	800356e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349e:	4b31      	ldr	r3, [pc, #196]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034aa:	e05f      	b.n	800356c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e05e      	b.n	800356e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b0:	4b2c      	ldr	r3, [pc, #176]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d157      	bne.n	800356c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034bc:	4b29      	ldr	r3, [pc, #164]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a28      	ldr	r2, [pc, #160]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80034c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034c8:	4b26      	ldr	r3, [pc, #152]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4a25      	ldr	r2, [pc, #148]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80034ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034d4:	f7fe fc16 	bl	8001d04 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fe fc12 	bl	8001d04 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e03f      	b.n	800356e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ee:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x7a4>
 80034fa:	e037      	b.n	800356c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b0c      	cmp	r3, #12
 8003500:	d02d      	beq.n	800355e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003502:	4b18      	ldr	r3, [pc, #96]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a17      	ldr	r2, [pc, #92]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 8003508:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800350c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800350e:	4b15      	ldr	r3, [pc, #84]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d105      	bne.n	8003526 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4a11      	ldr	r2, [pc, #68]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 8003520:	f023 0303 	bic.w	r3, r3, #3
 8003524:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003526:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	4a0e      	ldr	r2, [pc, #56]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 800352c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003534:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fe fbe5 	bl	8001d04 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353e:	f7fe fbe1 	bl	8001d04 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e00e      	b.n	800356e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <HAL_RCC_OscConfig+0x82c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_OscConfig+0x806>
 800355c:	e006      	b.n	800356c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e005      	b.n	800356e <HAL_RCC_OscConfig+0x836>
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop

08003578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0c8      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b66      	ldr	r3, [pc, #408]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d910      	bls.n	80035bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b63      	ldr	r3, [pc, #396]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	4961      	ldr	r1, [pc, #388]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b5f      	ldr	r3, [pc, #380]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0b0      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d04c      	beq.n	8003662 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d0:	4b56      	ldr	r3, [pc, #344]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d121      	bne.n	8003620 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e09e      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d107      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e8:	4b50      	ldr	r3, [pc, #320]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d115      	bne.n	8003620 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e092      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003600:	4b4a      	ldr	r3, [pc, #296]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d109      	bne.n	8003620 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e086      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003610:	4b46      	ldr	r3, [pc, #280]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e07e      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003620:	4b42      	ldr	r3, [pc, #264]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 0203 	bic.w	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	493f      	ldr	r1, [pc, #252]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003632:	f7fe fb67 	bl	8001d04 <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003638:	e00a      	b.n	8003650 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363a:	f7fe fb63 	bl	8001d04 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f241 3288 	movw	r2, #5000	; 0x1388
 8003648:	4293      	cmp	r3, r2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e066      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003650:	4b36      	ldr	r3, [pc, #216]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 020c 	and.w	r2, r3, #12
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	429a      	cmp	r2, r3
 8003660:	d1eb      	bne.n	800363a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800366e:	4b2f      	ldr	r3, [pc, #188]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	492c      	ldr	r1, [pc, #176]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 800367c:	4313      	orrs	r3, r2
 800367e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003680:	4b29      	ldr	r3, [pc, #164]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d210      	bcs.n	80036b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b26      	ldr	r3, [pc, #152]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 0207 	bic.w	r2, r3, #7
 8003696:	4924      	ldr	r1, [pc, #144]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e036      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4918      	ldr	r1, [pc, #96]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4910      	ldr	r1, [pc, #64]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ee:	f000 f825 	bl	800373c <HAL_RCC_GetSysClockFreq>
 80036f2:	4602      	mov	r2, r0
 80036f4:	4b0d      	ldr	r3, [pc, #52]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	091b      	lsrs	r3, r3, #4
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	490c      	ldr	r1, [pc, #48]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	5ccb      	ldrb	r3, [r1, r3]
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	fa22 f303 	lsr.w	r3, r2, r3
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe faa6 	bl	8001c64 <HAL_InitTick>
 8003718:	4603      	mov	r3, r0
 800371a:	72fb      	strb	r3, [r7, #11]

  return status;
 800371c:	7afb      	ldrb	r3, [r7, #11]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40022000 	.word	0x40022000
 800372c:	40021000 	.word	0x40021000
 8003730:	0800793c 	.word	0x0800793c
 8003734:	20000000 	.word	0x20000000
 8003738:	20000004 	.word	0x20000004

0800373c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800373c:	b480      	push	{r7}
 800373e:	b089      	sub	sp, #36	; 0x24
 8003740:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800374a:	4b3e      	ldr	r3, [pc, #248]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003754:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0x34>
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b0c      	cmp	r3, #12
 8003768:	d121      	bne.n	80037ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d11e      	bne.n	80037ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003770:	4b34      	ldr	r3, [pc, #208]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d107      	bne.n	800378c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800377c:	4b31      	ldr	r3, [pc, #196]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 800377e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003782:	0a1b      	lsrs	r3, r3, #8
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	e005      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800378c:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003798:	4a2b      	ldr	r2, [pc, #172]	; (8003848 <HAL_RCC_GetSysClockFreq+0x10c>)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10d      	bne.n	80037c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d102      	bne.n	80037ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037b4:	4b25      	ldr	r3, [pc, #148]	; (800384c <HAL_RCC_GetSysClockFreq+0x110>)
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	e004      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037c0:	4b23      	ldr	r3, [pc, #140]	; (8003850 <HAL_RCC_GetSysClockFreq+0x114>)
 80037c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b0c      	cmp	r3, #12
 80037c8:	d134      	bne.n	8003834 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d003      	beq.n	80037e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d003      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0xac>
 80037e0:	e005      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037e2:	4b1a      	ldr	r3, [pc, #104]	; (800384c <HAL_RCC_GetSysClockFreq+0x110>)
 80037e4:	617b      	str	r3, [r7, #20]
      break;
 80037e6:	e005      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_RCC_GetSysClockFreq+0x114>)
 80037ea:	617b      	str	r3, [r7, #20]
      break;
 80037ec:	e002      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	617b      	str	r3, [r7, #20]
      break;
 80037f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037f4:	4b13      	ldr	r3, [pc, #76]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	3301      	adds	r3, #1
 8003800:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	fb02 f203 	mul.w	r2, r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800381a:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	0e5b      	lsrs	r3, r3, #25
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	3301      	adds	r3, #1
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003834:	69bb      	ldr	r3, [r7, #24]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
 8003848:	08007954 	.word	0x08007954
 800384c:	00f42400 	.word	0x00f42400
 8003850:	007a1200 	.word	0x007a1200

08003854 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_RCC_GetHCLKFreq+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000000 	.word	0x20000000

0800386c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003870:	f7ff fff0 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4904      	ldr	r1, [pc, #16]	; (8003894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	0800794c 	.word	0x0800794c

08003898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800389c:	f7ff ffda 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	0adb      	lsrs	r3, r3, #11
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4904      	ldr	r1, [pc, #16]	; (80038c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000
 80038c0:	0800794c 	.word	0x0800794c

080038c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038cc:	2300      	movs	r3, #0
 80038ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038d0:	4b2a      	ldr	r3, [pc, #168]	; (800397c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038dc:	f7ff f9c8 	bl	8002c70 <HAL_PWREx_GetVoltageRange>
 80038e0:	6178      	str	r0, [r7, #20]
 80038e2:	e014      	b.n	800390e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038e4:	4b25      	ldr	r3, [pc, #148]	; (800397c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	4a24      	ldr	r2, [pc, #144]	; (800397c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ee:	6593      	str	r3, [r2, #88]	; 0x58
 80038f0:	4b22      	ldr	r3, [pc, #136]	; (800397c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038fc:	f7ff f9b8 	bl	8002c70 <HAL_PWREx_GetVoltageRange>
 8003900:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003902:	4b1e      	ldr	r3, [pc, #120]	; (800397c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003906:	4a1d      	ldr	r2, [pc, #116]	; (800397c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003914:	d10b      	bne.n	800392e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d919      	bls.n	8003950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2ba0      	cmp	r3, #160	; 0xa0
 8003920:	d902      	bls.n	8003928 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003922:	2302      	movs	r3, #2
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	e013      	b.n	8003950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003928:	2301      	movs	r3, #1
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	e010      	b.n	8003950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b80      	cmp	r3, #128	; 0x80
 8003932:	d902      	bls.n	800393a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003934:	2303      	movs	r3, #3
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	e00a      	b.n	8003950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b80      	cmp	r3, #128	; 0x80
 800393e:	d102      	bne.n	8003946 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003940:	2302      	movs	r3, #2
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	e004      	b.n	8003950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b70      	cmp	r3, #112	; 0x70
 800394a:	d101      	bne.n	8003950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800394c:	2301      	movs	r3, #1
 800394e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f023 0207 	bic.w	r2, r3, #7
 8003958:	4909      	ldr	r1, [pc, #36]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003960:	4b07      	ldr	r3, [pc, #28]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	429a      	cmp	r2, r3
 800396c:	d001      	beq.n	8003972 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40021000 	.word	0x40021000
 8003980:	40022000 	.word	0x40022000

08003984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800398c:	2300      	movs	r3, #0
 800398e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003990:	2300      	movs	r3, #0
 8003992:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800399c:	2b00      	cmp	r3, #0
 800399e:	d031      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039a8:	d01a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80039aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039ae:	d814      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d009      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039b8:	d10f      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80039ba:	4bac      	ldr	r3, [pc, #688]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	4aab      	ldr	r2, [pc, #684]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039c6:	e00c      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f9cc 	bl	8003d6c <RCCEx_PLLSAI1_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039d8:	e003      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	74fb      	strb	r3, [r7, #19]
      break;
 80039de:	e000      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80039e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e2:	7cfb      	ldrb	r3, [r7, #19]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039e8:	4ba0      	ldr	r3, [pc, #640]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	499d      	ldr	r1, [pc, #628]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039fe:	e001      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8099 	beq.w	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a12:	2300      	movs	r3, #0
 8003a14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a16:	4b95      	ldr	r3, [pc, #596]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003a26:	2300      	movs	r3, #0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00d      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2c:	4b8f      	ldr	r3, [pc, #572]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a30:	4a8e      	ldr	r2, [pc, #568]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a36:	6593      	str	r3, [r2, #88]	; 0x58
 8003a38:	4b8c      	ldr	r3, [pc, #560]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a44:	2301      	movs	r3, #1
 8003a46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a48:	4b89      	ldr	r3, [pc, #548]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a88      	ldr	r2, [pc, #544]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a54:	f7fe f956 	bl	8001d04 <HAL_GetTick>
 8003a58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a5a:	e009      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5c:	f7fe f952 	bl	8001d04 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d902      	bls.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	74fb      	strb	r3, [r7, #19]
        break;
 8003a6e:	e005      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a70:	4b7f      	ldr	r3, [pc, #508]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0ef      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a7c:	7cfb      	ldrb	r3, [r7, #19]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d155      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a82:	4b7a      	ldr	r3, [pc, #488]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01e      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d019      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a9e:	4b73      	ldr	r3, [pc, #460]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aaa:	4b70      	ldr	r3, [pc, #448]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	4a6e      	ldr	r2, [pc, #440]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aba:	4b6c      	ldr	r3, [pc, #432]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac0:	4a6a      	ldr	r2, [pc, #424]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003aca:	4a68      	ldr	r2, [pc, #416]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d016      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fe f912 	bl	8001d04 <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae2:	e00b      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae4:	f7fe f90e 	bl	8001d04 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d902      	bls.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	74fb      	strb	r3, [r7, #19]
            break;
 8003afa:	e006      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afc:	4b5b      	ldr	r3, [pc, #364]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0ec      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003b0a:	7cfb      	ldrb	r3, [r7, #19]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10b      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b10:	4b56      	ldr	r3, [pc, #344]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1e:	4953      	ldr	r1, [pc, #332]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b26:	e004      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	74bb      	strb	r3, [r7, #18]
 8003b2c:	e001      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2e:	7cfb      	ldrb	r3, [r7, #19]
 8003b30:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b32:	7c7b      	ldrb	r3, [r7, #17]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d105      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b38:	4b4c      	ldr	r3, [pc, #304]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	4a4b      	ldr	r2, [pc, #300]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b50:	4b46      	ldr	r3, [pc, #280]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f023 0203 	bic.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4943      	ldr	r1, [pc, #268]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b72:	4b3e      	ldr	r3, [pc, #248]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f023 020c 	bic.w	r2, r3, #12
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	493a      	ldr	r1, [pc, #232]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b94:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	4932      	ldr	r1, [pc, #200]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bb6:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	4929      	ldr	r1, [pc, #164]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bd8:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	4921      	ldr	r1, [pc, #132]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bfa:	4b1c      	ldr	r3, [pc, #112]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	4918      	ldr	r1, [pc, #96]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c1c:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	4910      	ldr	r1, [pc, #64]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d02c      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	4907      	ldr	r1, [pc, #28]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c5c:	d10a      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c5e:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	4a02      	ldr	r2, [pc, #8]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c68:	60d3      	str	r3, [r2, #12]
 8003c6a:	e015      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3304      	adds	r3, #4
 8003c82:	2101      	movs	r1, #1
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 f871 	bl	8003d6c <RCCEx_PLLSAI1_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c8e:	7cfb      	ldrb	r3, [r7, #19]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003c94:	7cfb      	ldrb	r3, [r7, #19]
 8003c96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d028      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ca4:	4b30      	ldr	r3, [pc, #192]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	492d      	ldr	r1, [pc, #180]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc4:	4b28      	ldr	r3, [pc, #160]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a27      	ldr	r2, [pc, #156]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cce:	60d3      	str	r3, [r2, #12]
 8003cd0:	e011      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cda:	d10c      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f842 	bl	8003d6c <RCCEx_PLLSAI1_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003cf2:	7cfb      	ldrb	r3, [r7, #19]
 8003cf4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01c      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d10:	4915      	ldr	r1, [pc, #84]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3304      	adds	r3, #4
 8003d26:	2102      	movs	r1, #2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 f81f 	bl	8003d6c <RCCEx_PLLSAI1_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d32:	7cfb      	ldrb	r3, [r7, #19]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003d38:	7cfb      	ldrb	r3, [r7, #19]
 8003d3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d56:	4904      	ldr	r1, [pc, #16]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000

08003d6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d7a:	4b74      	ldr	r3, [pc, #464]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d018      	beq.n	8003db8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d86:	4b71      	ldr	r3, [pc, #452]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0203 	and.w	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d10d      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
       ||
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d9e:	4b6b      	ldr	r3, [pc, #428]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
       ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d047      	beq.n	8003e42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
 8003db6:	e044      	b.n	8003e42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d018      	beq.n	8003df2 <RCCEx_PLLSAI1_Config+0x86>
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d825      	bhi.n	8003e10 <RCCEx_PLLSAI1_Config+0xa4>
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d002      	beq.n	8003dce <RCCEx_PLLSAI1_Config+0x62>
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d009      	beq.n	8003de0 <RCCEx_PLLSAI1_Config+0x74>
 8003dcc:	e020      	b.n	8003e10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dce:	4b5f      	ldr	r3, [pc, #380]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d11d      	bne.n	8003e16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dde:	e01a      	b.n	8003e16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003de0:	4b5a      	ldr	r3, [pc, #360]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d116      	bne.n	8003e1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df0:	e013      	b.n	8003e1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003df2:	4b56      	ldr	r3, [pc, #344]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dfe:	4b53      	ldr	r3, [pc, #332]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e0e:	e006      	b.n	8003e1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
      break;
 8003e14:	e004      	b.n	8003e20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e16:	bf00      	nop
 8003e18:	e002      	b.n	8003e20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10d      	bne.n	8003e42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e26:	4b49      	ldr	r3, [pc, #292]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6819      	ldr	r1, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	4943      	ldr	r1, [pc, #268]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d17c      	bne.n	8003f42 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e48:	4b40      	ldr	r3, [pc, #256]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a3f      	ldr	r2, [pc, #252]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e54:	f7fd ff56 	bl	8001d04 <HAL_GetTick>
 8003e58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e5a:	e009      	b.n	8003e70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e5c:	f7fd ff52 	bl	8001d04 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d902      	bls.n	8003e70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e6e:	e005      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e70:	4b36      	ldr	r3, [pc, #216]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1ef      	bne.n	8003e5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d15f      	bne.n	8003f42 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d110      	bne.n	8003eaa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e88:	4b30      	ldr	r3, [pc, #192]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6892      	ldr	r2, [r2, #8]
 8003e98:	0211      	lsls	r1, r2, #8
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68d2      	ldr	r2, [r2, #12]
 8003e9e:	06d2      	lsls	r2, r2, #27
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	492a      	ldr	r1, [pc, #168]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	610b      	str	r3, [r1, #16]
 8003ea8:	e027      	b.n	8003efa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d112      	bne.n	8003ed6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eb0:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003eb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6892      	ldr	r2, [r2, #8]
 8003ec0:	0211      	lsls	r1, r2, #8
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6912      	ldr	r2, [r2, #16]
 8003ec6:	0852      	lsrs	r2, r2, #1
 8003ec8:	3a01      	subs	r2, #1
 8003eca:	0552      	lsls	r2, r2, #21
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	491f      	ldr	r1, [pc, #124]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	610b      	str	r3, [r1, #16]
 8003ed4:	e011      	b.n	8003efa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ede:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6892      	ldr	r2, [r2, #8]
 8003ee6:	0211      	lsls	r1, r2, #8
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6952      	ldr	r2, [r2, #20]
 8003eec:	0852      	lsrs	r2, r2, #1
 8003eee:	3a01      	subs	r2, #1
 8003ef0:	0652      	lsls	r2, r2, #25
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	4915      	ldr	r1, [pc, #84]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003efa:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a13      	ldr	r2, [pc, #76]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f06:	f7fd fefd 	bl	8001d04 <HAL_GetTick>
 8003f0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f0c:	e009      	b.n	8003f22 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f0e:	f7fd fef9 	bl	8001d04 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d902      	bls.n	8003f22 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	73fb      	strb	r3, [r7, #15]
          break;
 8003f20:	e005      	b.n	8003f2e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0ef      	beq.n	8003f0e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d106      	bne.n	8003f42 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	4903      	ldr	r1, [pc, #12]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40021000 	.word	0x40021000

08003f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e049      	b.n	8003ff6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fd fc8a 	bl	8001890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	f000 f9d2 	bl	8004338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d001      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e03b      	b.n	8004090 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a19      	ldr	r2, [pc, #100]	; (800409c <HAL_TIM_Base_Start_IT+0x9c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d009      	beq.n	800404e <HAL_TIM_Base_Start_IT+0x4e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004042:	d004      	beq.n	800404e <HAL_TIM_Base_Start_IT+0x4e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <HAL_TIM_Base_Start_IT+0xa0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d115      	bne.n	800407a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <HAL_TIM_Base_Start_IT+0xa4>)
 8004056:	4013      	ands	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b06      	cmp	r3, #6
 800405e:	d015      	beq.n	800408c <HAL_TIM_Base_Start_IT+0x8c>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004066:	d011      	beq.n	800408c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004078:	e008      	b.n	800408c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0201 	orr.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e000      	b.n	800408e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40014000 	.word	0x40014000
 80040a4:	00010007 	.word	0x00010007

080040a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d122      	bne.n	8004104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d11b      	bne.n	8004104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0202 	mvn.w	r2, #2
 80040d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f905 	bl	80042fa <HAL_TIM_IC_CaptureCallback>
 80040f0:	e005      	b.n	80040fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f8f7 	bl	80042e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f908 	bl	800430e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b04      	cmp	r3, #4
 8004110:	d122      	bne.n	8004158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b04      	cmp	r3, #4
 800411e:	d11b      	bne.n	8004158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0204 	mvn.w	r2, #4
 8004128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f8db 	bl	80042fa <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f8cd 	bl	80042e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f8de 	bl	800430e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b08      	cmp	r3, #8
 8004164:	d122      	bne.n	80041ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b08      	cmp	r3, #8
 8004172:	d11b      	bne.n	80041ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0208 	mvn.w	r2, #8
 800417c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2204      	movs	r2, #4
 8004182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f8b1 	bl	80042fa <HAL_TIM_IC_CaptureCallback>
 8004198:	e005      	b.n	80041a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f8a3 	bl	80042e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f8b4 	bl	800430e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b10      	cmp	r3, #16
 80041b8:	d122      	bne.n	8004200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d11b      	bne.n	8004200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0210 	mvn.w	r2, #16
 80041d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2208      	movs	r2, #8
 80041d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f887 	bl	80042fa <HAL_TIM_IC_CaptureCallback>
 80041ec:	e005      	b.n	80041fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f879 	bl	80042e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f88a 	bl	800430e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d10e      	bne.n	800422c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d107      	bne.n	800422c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0201 	mvn.w	r2, #1
 8004224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fd f8c0 	bl	80013ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b80      	cmp	r3, #128	; 0x80
 8004238:	d10e      	bne.n	8004258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	2b80      	cmp	r3, #128	; 0x80
 8004246:	d107      	bne.n	8004258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f944 	bl	80044e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004266:	d10e      	bne.n	8004286 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	2b80      	cmp	r3, #128	; 0x80
 8004274:	d107      	bne.n	8004286 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800427e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f937 	bl	80044f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d10e      	bne.n	80042b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b40      	cmp	r3, #64	; 0x40
 80042a0:	d107      	bne.n	80042b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f838 	bl	8004322 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d10e      	bne.n	80042de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	d107      	bne.n	80042de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f06f 0220 	mvn.w	r2, #32
 80042d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f8f7 	bl	80044cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a2a      	ldr	r2, [pc, #168]	; (80043f4 <TIM_Base_SetConfig+0xbc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d003      	beq.n	8004358 <TIM_Base_SetConfig+0x20>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004356:	d108      	bne.n	800436a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a21      	ldr	r2, [pc, #132]	; (80043f4 <TIM_Base_SetConfig+0xbc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00b      	beq.n	800438a <TIM_Base_SetConfig+0x52>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004378:	d007      	beq.n	800438a <TIM_Base_SetConfig+0x52>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <TIM_Base_SetConfig+0xc0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d003      	beq.n	800438a <TIM_Base_SetConfig+0x52>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <TIM_Base_SetConfig+0xc4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d108      	bne.n	800439c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a0c      	ldr	r2, [pc, #48]	; (80043f4 <TIM_Base_SetConfig+0xbc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d007      	beq.n	80043d8 <TIM_Base_SetConfig+0xa0>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a0b      	ldr	r2, [pc, #44]	; (80043f8 <TIM_Base_SetConfig+0xc0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d003      	beq.n	80043d8 <TIM_Base_SetConfig+0xa0>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a0a      	ldr	r2, [pc, #40]	; (80043fc <TIM_Base_SetConfig+0xc4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d103      	bne.n	80043e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	615a      	str	r2, [r3, #20]
}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40014400 	.word	0x40014400

08004400 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004414:	2302      	movs	r3, #2
 8004416:	e04f      	b.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a21      	ldr	r2, [pc, #132]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d108      	bne.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004448:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a14      	ldr	r2, [pc, #80]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d009      	beq.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004480:	d004      	beq.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a10      	ldr	r2, [pc, #64]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d10c      	bne.n	80044a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004492:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	4313      	orrs	r3, r2
 800449c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	40012c00 	.word	0x40012c00
 80044c8:	40014000 	.word	0x40014000

080044cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e040      	b.n	800459c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fd f9d6 	bl	80018dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2224      	movs	r2, #36	; 0x24
 8004534:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0201 	bic.w	r2, r2, #1
 8004544:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f8c0 	bl	80046cc <UART_SetConfig>
 800454c:	4603      	mov	r3, r0
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e022      	b.n	800459c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fac0 	bl	8004ae4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004572:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004582:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fb47 	bl	8004c28 <UART_CheckIdleState>
 800459a:	4603      	mov	r3, r0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08a      	sub	sp, #40	; 0x28
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	4613      	mov	r3, r2
 80045b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	f040 8082 	bne.w	80046c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_UART_Transmit+0x26>
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e07a      	b.n	80046c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_UART_Transmit+0x38>
 80045d8:	2302      	movs	r3, #2
 80045da:	e073      	b.n	80046c4 <HAL_UART_Transmit+0x120>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2221      	movs	r2, #33	; 0x21
 80045f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045f2:	f7fd fb87 	bl	8001d04 <HAL_GetTick>
 80045f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	88fa      	ldrh	r2, [r7, #6]
 80045fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	88fa      	ldrh	r2, [r7, #6]
 8004604:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004610:	d108      	bne.n	8004624 <HAL_UART_Transmit+0x80>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	e003      	b.n	800462c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004628:	2300      	movs	r3, #0
 800462a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004634:	e02d      	b.n	8004692 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2200      	movs	r2, #0
 800463e:	2180      	movs	r1, #128	; 0x80
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fb3a 	bl	8004cba <UART_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e039      	b.n	80046c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10b      	bne.n	800466e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	881a      	ldrh	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004662:	b292      	uxth	r2, r2
 8004664:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	3302      	adds	r3, #2
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	e008      	b.n	8004680 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	781a      	ldrb	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	b292      	uxth	r2, r2
 8004678:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	3301      	adds	r3, #1
 800467e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1cb      	bne.n	8004636 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2200      	movs	r2, #0
 80046a6:	2140      	movs	r1, #64	; 0x40
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fb06 	bl	8004cba <UART_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e005      	b.n	80046c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e000      	b.n	80046c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3720      	adds	r7, #32
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046cc:	b5b0      	push	{r4, r5, r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4baf      	ldr	r3, [pc, #700]	; (80049b4 <UART_SetConfig+0x2e8>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6812      	ldr	r2, [r2, #0]
 80046fe:	69f9      	ldr	r1, [r7, #28]
 8004700:	430b      	orrs	r3, r1
 8004702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4aa4      	ldr	r2, [pc, #656]	; (80049b8 <UART_SetConfig+0x2ec>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d004      	beq.n	8004734 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	4313      	orrs	r3, r2
 8004732:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	430a      	orrs	r2, r1
 8004746:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a9b      	ldr	r2, [pc, #620]	; (80049bc <UART_SetConfig+0x2f0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d121      	bne.n	8004796 <UART_SetConfig+0xca>
 8004752:	4b9b      	ldr	r3, [pc, #620]	; (80049c0 <UART_SetConfig+0x2f4>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	2b03      	cmp	r3, #3
 800475e:	d817      	bhi.n	8004790 <UART_SetConfig+0xc4>
 8004760:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <UART_SetConfig+0x9c>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	08004779 	.word	0x08004779
 800476c:	08004785 	.word	0x08004785
 8004770:	0800477f 	.word	0x0800477f
 8004774:	0800478b 	.word	0x0800478b
 8004778:	2301      	movs	r3, #1
 800477a:	76fb      	strb	r3, [r7, #27]
 800477c:	e070      	b.n	8004860 <UART_SetConfig+0x194>
 800477e:	2302      	movs	r3, #2
 8004780:	76fb      	strb	r3, [r7, #27]
 8004782:	e06d      	b.n	8004860 <UART_SetConfig+0x194>
 8004784:	2304      	movs	r3, #4
 8004786:	76fb      	strb	r3, [r7, #27]
 8004788:	e06a      	b.n	8004860 <UART_SetConfig+0x194>
 800478a:	2308      	movs	r3, #8
 800478c:	76fb      	strb	r3, [r7, #27]
 800478e:	e067      	b.n	8004860 <UART_SetConfig+0x194>
 8004790:	2310      	movs	r3, #16
 8004792:	76fb      	strb	r3, [r7, #27]
 8004794:	e064      	b.n	8004860 <UART_SetConfig+0x194>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a8a      	ldr	r2, [pc, #552]	; (80049c4 <UART_SetConfig+0x2f8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d132      	bne.n	8004806 <UART_SetConfig+0x13a>
 80047a0:	4b87      	ldr	r3, [pc, #540]	; (80049c0 <UART_SetConfig+0x2f4>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b0c      	cmp	r3, #12
 80047ac:	d828      	bhi.n	8004800 <UART_SetConfig+0x134>
 80047ae:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <UART_SetConfig+0xe8>)
 80047b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b4:	080047e9 	.word	0x080047e9
 80047b8:	08004801 	.word	0x08004801
 80047bc:	08004801 	.word	0x08004801
 80047c0:	08004801 	.word	0x08004801
 80047c4:	080047f5 	.word	0x080047f5
 80047c8:	08004801 	.word	0x08004801
 80047cc:	08004801 	.word	0x08004801
 80047d0:	08004801 	.word	0x08004801
 80047d4:	080047ef 	.word	0x080047ef
 80047d8:	08004801 	.word	0x08004801
 80047dc:	08004801 	.word	0x08004801
 80047e0:	08004801 	.word	0x08004801
 80047e4:	080047fb 	.word	0x080047fb
 80047e8:	2300      	movs	r3, #0
 80047ea:	76fb      	strb	r3, [r7, #27]
 80047ec:	e038      	b.n	8004860 <UART_SetConfig+0x194>
 80047ee:	2302      	movs	r3, #2
 80047f0:	76fb      	strb	r3, [r7, #27]
 80047f2:	e035      	b.n	8004860 <UART_SetConfig+0x194>
 80047f4:	2304      	movs	r3, #4
 80047f6:	76fb      	strb	r3, [r7, #27]
 80047f8:	e032      	b.n	8004860 <UART_SetConfig+0x194>
 80047fa:	2308      	movs	r3, #8
 80047fc:	76fb      	strb	r3, [r7, #27]
 80047fe:	e02f      	b.n	8004860 <UART_SetConfig+0x194>
 8004800:	2310      	movs	r3, #16
 8004802:	76fb      	strb	r3, [r7, #27]
 8004804:	e02c      	b.n	8004860 <UART_SetConfig+0x194>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a6b      	ldr	r2, [pc, #428]	; (80049b8 <UART_SetConfig+0x2ec>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d125      	bne.n	800485c <UART_SetConfig+0x190>
 8004810:	4b6b      	ldr	r3, [pc, #428]	; (80049c0 <UART_SetConfig+0x2f4>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800481a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800481e:	d017      	beq.n	8004850 <UART_SetConfig+0x184>
 8004820:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004824:	d817      	bhi.n	8004856 <UART_SetConfig+0x18a>
 8004826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482a:	d00b      	beq.n	8004844 <UART_SetConfig+0x178>
 800482c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004830:	d811      	bhi.n	8004856 <UART_SetConfig+0x18a>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <UART_SetConfig+0x172>
 8004836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483a:	d006      	beq.n	800484a <UART_SetConfig+0x17e>
 800483c:	e00b      	b.n	8004856 <UART_SetConfig+0x18a>
 800483e:	2300      	movs	r3, #0
 8004840:	76fb      	strb	r3, [r7, #27]
 8004842:	e00d      	b.n	8004860 <UART_SetConfig+0x194>
 8004844:	2302      	movs	r3, #2
 8004846:	76fb      	strb	r3, [r7, #27]
 8004848:	e00a      	b.n	8004860 <UART_SetConfig+0x194>
 800484a:	2304      	movs	r3, #4
 800484c:	76fb      	strb	r3, [r7, #27]
 800484e:	e007      	b.n	8004860 <UART_SetConfig+0x194>
 8004850:	2308      	movs	r3, #8
 8004852:	76fb      	strb	r3, [r7, #27]
 8004854:	e004      	b.n	8004860 <UART_SetConfig+0x194>
 8004856:	2310      	movs	r3, #16
 8004858:	76fb      	strb	r3, [r7, #27]
 800485a:	e001      	b.n	8004860 <UART_SetConfig+0x194>
 800485c:	2310      	movs	r3, #16
 800485e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a54      	ldr	r2, [pc, #336]	; (80049b8 <UART_SetConfig+0x2ec>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d173      	bne.n	8004952 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800486a:	7efb      	ldrb	r3, [r7, #27]
 800486c:	2b08      	cmp	r3, #8
 800486e:	d824      	bhi.n	80048ba <UART_SetConfig+0x1ee>
 8004870:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <UART_SetConfig+0x1ac>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	0800489d 	.word	0x0800489d
 800487c:	080048bb 	.word	0x080048bb
 8004880:	080048a5 	.word	0x080048a5
 8004884:	080048bb 	.word	0x080048bb
 8004888:	080048ab 	.word	0x080048ab
 800488c:	080048bb 	.word	0x080048bb
 8004890:	080048bb 	.word	0x080048bb
 8004894:	080048bb 	.word	0x080048bb
 8004898:	080048b3 	.word	0x080048b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800489c:	f7fe ffe6 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 80048a0:	6178      	str	r0, [r7, #20]
        break;
 80048a2:	e00f      	b.n	80048c4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a4:	4b48      	ldr	r3, [pc, #288]	; (80049c8 <UART_SetConfig+0x2fc>)
 80048a6:	617b      	str	r3, [r7, #20]
        break;
 80048a8:	e00c      	b.n	80048c4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048aa:	f7fe ff47 	bl	800373c <HAL_RCC_GetSysClockFreq>
 80048ae:	6178      	str	r0, [r7, #20]
        break;
 80048b0:	e008      	b.n	80048c4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b6:	617b      	str	r3, [r7, #20]
        break;
 80048b8:	e004      	b.n	80048c4 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	76bb      	strb	r3, [r7, #26]
        break;
 80048c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 80fe 	beq.w	8004ac8 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	4413      	add	r3, r2
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d305      	bcc.n	80048e8 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d902      	bls.n	80048ee <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	76bb      	strb	r3, [r7, #26]
 80048ec:	e0ec      	b.n	8004ac8 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	020b      	lsls	r3, r1, #8
 8004900:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004904:	0202      	lsls	r2, r0, #8
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	6849      	ldr	r1, [r1, #4]
 800490a:	0849      	lsrs	r1, r1, #1
 800490c:	4608      	mov	r0, r1
 800490e:	f04f 0100 	mov.w	r1, #0
 8004912:	1814      	adds	r4, r2, r0
 8004914:	eb43 0501 	adc.w	r5, r3, r1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	461a      	mov	r2, r3
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	4620      	mov	r0, r4
 8004924:	4629      	mov	r1, r5
 8004926:	f7fc f98f 	bl	8000c48 <__aeabi_uldivmod>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4613      	mov	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004938:	d308      	bcc.n	800494c <UART_SetConfig+0x280>
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004940:	d204      	bcs.n	800494c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	60da      	str	r2, [r3, #12]
 800494a:	e0bd      	b.n	8004ac8 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	76bb      	strb	r3, [r7, #26]
 8004950:	e0ba      	b.n	8004ac8 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495a:	d168      	bne.n	8004a2e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800495c:	7efb      	ldrb	r3, [r7, #27]
 800495e:	2b08      	cmp	r3, #8
 8004960:	d834      	bhi.n	80049cc <UART_SetConfig+0x300>
 8004962:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <UART_SetConfig+0x29c>)
 8004964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004968:	0800498d 	.word	0x0800498d
 800496c:	08004995 	.word	0x08004995
 8004970:	0800499d 	.word	0x0800499d
 8004974:	080049cd 	.word	0x080049cd
 8004978:	080049a3 	.word	0x080049a3
 800497c:	080049cd 	.word	0x080049cd
 8004980:	080049cd 	.word	0x080049cd
 8004984:	080049cd 	.word	0x080049cd
 8004988:	080049ab 	.word	0x080049ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800498c:	f7fe ff6e 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 8004990:	6178      	str	r0, [r7, #20]
        break;
 8004992:	e020      	b.n	80049d6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004994:	f7fe ff80 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 8004998:	6178      	str	r0, [r7, #20]
        break;
 800499a:	e01c      	b.n	80049d6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800499c:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <UART_SetConfig+0x2fc>)
 800499e:	617b      	str	r3, [r7, #20]
        break;
 80049a0:	e019      	b.n	80049d6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049a2:	f7fe fecb 	bl	800373c <HAL_RCC_GetSysClockFreq>
 80049a6:	6178      	str	r0, [r7, #20]
        break;
 80049a8:	e015      	b.n	80049d6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ae:	617b      	str	r3, [r7, #20]
        break;
 80049b0:	e011      	b.n	80049d6 <UART_SetConfig+0x30a>
 80049b2:	bf00      	nop
 80049b4:	efff69f3 	.word	0xefff69f3
 80049b8:	40008000 	.word	0x40008000
 80049bc:	40013800 	.word	0x40013800
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40004400 	.word	0x40004400
 80049c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	76bb      	strb	r3, [r7, #26]
        break;
 80049d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d075      	beq.n	8004ac8 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	005a      	lsls	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	441a      	add	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b0f      	cmp	r3, #15
 80049f8:	d916      	bls.n	8004a28 <UART_SetConfig+0x35c>
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a00:	d212      	bcs.n	8004a28 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f023 030f 	bic.w	r3, r3, #15
 8004a0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	89fb      	ldrh	r3, [r7, #14]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	89fa      	ldrh	r2, [r7, #14]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	e04f      	b.n	8004ac8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	76bb      	strb	r3, [r7, #26]
 8004a2c:	e04c      	b.n	8004ac8 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a2e:	7efb      	ldrb	r3, [r7, #27]
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d828      	bhi.n	8004a86 <UART_SetConfig+0x3ba>
 8004a34:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <UART_SetConfig+0x370>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a69 	.word	0x08004a69
 8004a44:	08004a71 	.word	0x08004a71
 8004a48:	08004a87 	.word	0x08004a87
 8004a4c:	08004a77 	.word	0x08004a77
 8004a50:	08004a87 	.word	0x08004a87
 8004a54:	08004a87 	.word	0x08004a87
 8004a58:	08004a87 	.word	0x08004a87
 8004a5c:	08004a7f 	.word	0x08004a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a60:	f7fe ff04 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 8004a64:	6178      	str	r0, [r7, #20]
        break;
 8004a66:	e013      	b.n	8004a90 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a68:	f7fe ff16 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 8004a6c:	6178      	str	r0, [r7, #20]
        break;
 8004a6e:	e00f      	b.n	8004a90 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a70:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <UART_SetConfig+0x414>)
 8004a72:	617b      	str	r3, [r7, #20]
        break;
 8004a74:	e00c      	b.n	8004a90 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a76:	f7fe fe61 	bl	800373c <HAL_RCC_GetSysClockFreq>
 8004a7a:	6178      	str	r0, [r7, #20]
        break;
 8004a7c:	e008      	b.n	8004a90 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a82:	617b      	str	r3, [r7, #20]
        break;
 8004a84:	e004      	b.n	8004a90 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	76bb      	strb	r3, [r7, #26]
        break;
 8004a8e:	bf00      	nop
    }

    if (pclk != 0U)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	085a      	lsrs	r2, r3, #1
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	441a      	add	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	2b0f      	cmp	r3, #15
 8004ab0:	d908      	bls.n	8004ac4 <UART_SetConfig+0x3f8>
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab8:	d204      	bcs.n	8004ac4 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	e001      	b.n	8004ac8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ad4:	7ebb      	ldrb	r3, [r7, #26]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bdb0      	pop	{r4, r5, r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	00f42400 	.word	0x00f42400

08004ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01a      	beq.n	8004bfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be2:	d10a      	bne.n	8004bfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c38:	f7fd f864 	bl	8001d04 <HAL_GetTick>
 8004c3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d10e      	bne.n	8004c6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f82d 	bl	8004cba <UART_WaitOnFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e023      	b.n	8004cb2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d10e      	bne.n	8004c96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f817 	bl	8004cba <UART_WaitOnFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e00d      	b.n	8004cb2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	603b      	str	r3, [r7, #0]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cca:	e05e      	b.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd2:	d05a      	beq.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd4:	f7fd f816 	bl	8001d04 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d302      	bcc.n	8004cea <UART_WaitOnFlagUntilTimeout+0x30>
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d11b      	bne.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cf8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0201 	bic.w	r2, r2, #1
 8004d08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e043      	b.n	8004daa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d02c      	beq.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3e:	d124      	bne.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d48:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d58:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2220      	movs	r2, #32
 8004d74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e00f      	b.n	8004daa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4013      	ands	r3, r2
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	bf0c      	ite	eq
 8004d9a:	2301      	moveq	r3, #1
 8004d9c:	2300      	movne	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d091      	beq.n	8004ccc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <__errno>:
 8004db4:	4b01      	ldr	r3, [pc, #4]	; (8004dbc <__errno+0x8>)
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	2000000c 	.word	0x2000000c

08004dc0 <__libc_init_array>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	4d0d      	ldr	r5, [pc, #52]	; (8004df8 <__libc_init_array+0x38>)
 8004dc4:	4c0d      	ldr	r4, [pc, #52]	; (8004dfc <__libc_init_array+0x3c>)
 8004dc6:	1b64      	subs	r4, r4, r5
 8004dc8:	10a4      	asrs	r4, r4, #2
 8004dca:	2600      	movs	r6, #0
 8004dcc:	42a6      	cmp	r6, r4
 8004dce:	d109      	bne.n	8004de4 <__libc_init_array+0x24>
 8004dd0:	4d0b      	ldr	r5, [pc, #44]	; (8004e00 <__libc_init_array+0x40>)
 8004dd2:	4c0c      	ldr	r4, [pc, #48]	; (8004e04 <__libc_init_array+0x44>)
 8004dd4:	f002 fd7e 	bl	80078d4 <_init>
 8004dd8:	1b64      	subs	r4, r4, r5
 8004dda:	10a4      	asrs	r4, r4, #2
 8004ddc:	2600      	movs	r6, #0
 8004dde:	42a6      	cmp	r6, r4
 8004de0:	d105      	bne.n	8004dee <__libc_init_array+0x2e>
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de8:	4798      	blx	r3
 8004dea:	3601      	adds	r6, #1
 8004dec:	e7ee      	b.n	8004dcc <__libc_init_array+0xc>
 8004dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df2:	4798      	blx	r3
 8004df4:	3601      	adds	r6, #1
 8004df6:	e7f2      	b.n	8004dde <__libc_init_array+0x1e>
 8004df8:	08007d6c 	.word	0x08007d6c
 8004dfc:	08007d6c 	.word	0x08007d6c
 8004e00:	08007d6c 	.word	0x08007d6c
 8004e04:	08007d70 	.word	0x08007d70

08004e08 <memset>:
 8004e08:	4402      	add	r2, r0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d100      	bne.n	8004e12 <memset+0xa>
 8004e10:	4770      	bx	lr
 8004e12:	f803 1b01 	strb.w	r1, [r3], #1
 8004e16:	e7f9      	b.n	8004e0c <memset+0x4>

08004e18 <__cvt>:
 8004e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	ec55 4b10 	vmov	r4, r5, d0
 8004e20:	2d00      	cmp	r5, #0
 8004e22:	460e      	mov	r6, r1
 8004e24:	4619      	mov	r1, r3
 8004e26:	462b      	mov	r3, r5
 8004e28:	bfbb      	ittet	lt
 8004e2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e2e:	461d      	movlt	r5, r3
 8004e30:	2300      	movge	r3, #0
 8004e32:	232d      	movlt	r3, #45	; 0x2d
 8004e34:	700b      	strb	r3, [r1, #0]
 8004e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e3c:	4691      	mov	r9, r2
 8004e3e:	f023 0820 	bic.w	r8, r3, #32
 8004e42:	bfbc      	itt	lt
 8004e44:	4622      	movlt	r2, r4
 8004e46:	4614      	movlt	r4, r2
 8004e48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e4c:	d005      	beq.n	8004e5a <__cvt+0x42>
 8004e4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e52:	d100      	bne.n	8004e56 <__cvt+0x3e>
 8004e54:	3601      	adds	r6, #1
 8004e56:	2102      	movs	r1, #2
 8004e58:	e000      	b.n	8004e5c <__cvt+0x44>
 8004e5a:	2103      	movs	r1, #3
 8004e5c:	ab03      	add	r3, sp, #12
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	ab02      	add	r3, sp, #8
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	ec45 4b10 	vmov	d0, r4, r5
 8004e68:	4653      	mov	r3, sl
 8004e6a:	4632      	mov	r2, r6
 8004e6c:	f000 fe18 	bl	8005aa0 <_dtoa_r>
 8004e70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e74:	4607      	mov	r7, r0
 8004e76:	d102      	bne.n	8004e7e <__cvt+0x66>
 8004e78:	f019 0f01 	tst.w	r9, #1
 8004e7c:	d022      	beq.n	8004ec4 <__cvt+0xac>
 8004e7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e82:	eb07 0906 	add.w	r9, r7, r6
 8004e86:	d110      	bne.n	8004eaa <__cvt+0x92>
 8004e88:	783b      	ldrb	r3, [r7, #0]
 8004e8a:	2b30      	cmp	r3, #48	; 0x30
 8004e8c:	d10a      	bne.n	8004ea4 <__cvt+0x8c>
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2300      	movs	r3, #0
 8004e92:	4620      	mov	r0, r4
 8004e94:	4629      	mov	r1, r5
 8004e96:	f7fb fe17 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e9a:	b918      	cbnz	r0, 8004ea4 <__cvt+0x8c>
 8004e9c:	f1c6 0601 	rsb	r6, r6, #1
 8004ea0:	f8ca 6000 	str.w	r6, [sl]
 8004ea4:	f8da 3000 	ldr.w	r3, [sl]
 8004ea8:	4499      	add	r9, r3
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2300      	movs	r3, #0
 8004eae:	4620      	mov	r0, r4
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	f7fb fe09 	bl	8000ac8 <__aeabi_dcmpeq>
 8004eb6:	b108      	cbz	r0, 8004ebc <__cvt+0xa4>
 8004eb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ebc:	2230      	movs	r2, #48	; 0x30
 8004ebe:	9b03      	ldr	r3, [sp, #12]
 8004ec0:	454b      	cmp	r3, r9
 8004ec2:	d307      	bcc.n	8004ed4 <__cvt+0xbc>
 8004ec4:	9b03      	ldr	r3, [sp, #12]
 8004ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ec8:	1bdb      	subs	r3, r3, r7
 8004eca:	4638      	mov	r0, r7
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	b004      	add	sp, #16
 8004ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed4:	1c59      	adds	r1, r3, #1
 8004ed6:	9103      	str	r1, [sp, #12]
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	e7f0      	b.n	8004ebe <__cvt+0xa6>

08004edc <__exponent>:
 8004edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2900      	cmp	r1, #0
 8004ee2:	bfb8      	it	lt
 8004ee4:	4249      	neglt	r1, r1
 8004ee6:	f803 2b02 	strb.w	r2, [r3], #2
 8004eea:	bfb4      	ite	lt
 8004eec:	222d      	movlt	r2, #45	; 0x2d
 8004eee:	222b      	movge	r2, #43	; 0x2b
 8004ef0:	2909      	cmp	r1, #9
 8004ef2:	7042      	strb	r2, [r0, #1]
 8004ef4:	dd2a      	ble.n	8004f4c <__exponent+0x70>
 8004ef6:	f10d 0407 	add.w	r4, sp, #7
 8004efa:	46a4      	mov	ip, r4
 8004efc:	270a      	movs	r7, #10
 8004efe:	46a6      	mov	lr, r4
 8004f00:	460a      	mov	r2, r1
 8004f02:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f06:	fb07 1516 	mls	r5, r7, r6, r1
 8004f0a:	3530      	adds	r5, #48	; 0x30
 8004f0c:	2a63      	cmp	r2, #99	; 0x63
 8004f0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f16:	4631      	mov	r1, r6
 8004f18:	dcf1      	bgt.n	8004efe <__exponent+0x22>
 8004f1a:	3130      	adds	r1, #48	; 0x30
 8004f1c:	f1ae 0502 	sub.w	r5, lr, #2
 8004f20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f24:	1c44      	adds	r4, r0, #1
 8004f26:	4629      	mov	r1, r5
 8004f28:	4561      	cmp	r1, ip
 8004f2a:	d30a      	bcc.n	8004f42 <__exponent+0x66>
 8004f2c:	f10d 0209 	add.w	r2, sp, #9
 8004f30:	eba2 020e 	sub.w	r2, r2, lr
 8004f34:	4565      	cmp	r5, ip
 8004f36:	bf88      	it	hi
 8004f38:	2200      	movhi	r2, #0
 8004f3a:	4413      	add	r3, r2
 8004f3c:	1a18      	subs	r0, r3, r0
 8004f3e:	b003      	add	sp, #12
 8004f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f4a:	e7ed      	b.n	8004f28 <__exponent+0x4c>
 8004f4c:	2330      	movs	r3, #48	; 0x30
 8004f4e:	3130      	adds	r1, #48	; 0x30
 8004f50:	7083      	strb	r3, [r0, #2]
 8004f52:	70c1      	strb	r1, [r0, #3]
 8004f54:	1d03      	adds	r3, r0, #4
 8004f56:	e7f1      	b.n	8004f3c <__exponent+0x60>

08004f58 <_printf_float>:
 8004f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5c:	ed2d 8b02 	vpush	{d8}
 8004f60:	b08d      	sub	sp, #52	; 0x34
 8004f62:	460c      	mov	r4, r1
 8004f64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f68:	4616      	mov	r6, r2
 8004f6a:	461f      	mov	r7, r3
 8004f6c:	4605      	mov	r5, r0
 8004f6e:	f001 fd3b 	bl	80069e8 <_localeconv_r>
 8004f72:	f8d0 a000 	ldr.w	sl, [r0]
 8004f76:	4650      	mov	r0, sl
 8004f78:	f7fb f92a 	bl	80001d0 <strlen>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	9305      	str	r3, [sp, #20]
 8004f84:	f8d8 3000 	ldr.w	r3, [r8]
 8004f88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f8c:	3307      	adds	r3, #7
 8004f8e:	f023 0307 	bic.w	r3, r3, #7
 8004f92:	f103 0208 	add.w	r2, r3, #8
 8004f96:	f8c8 2000 	str.w	r2, [r8]
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004fa2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004fa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004faa:	9307      	str	r3, [sp, #28]
 8004fac:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fb0:	ee08 0a10 	vmov	s16, r0
 8004fb4:	4b9f      	ldr	r3, [pc, #636]	; (8005234 <_printf_float+0x2dc>)
 8004fb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fba:	f04f 32ff 	mov.w	r2, #4294967295
 8004fbe:	f7fb fdb5 	bl	8000b2c <__aeabi_dcmpun>
 8004fc2:	bb88      	cbnz	r0, 8005028 <_printf_float+0xd0>
 8004fc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fc8:	4b9a      	ldr	r3, [pc, #616]	; (8005234 <_printf_float+0x2dc>)
 8004fca:	f04f 32ff 	mov.w	r2, #4294967295
 8004fce:	f7fb fd8f 	bl	8000af0 <__aeabi_dcmple>
 8004fd2:	bb48      	cbnz	r0, 8005028 <_printf_float+0xd0>
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	4640      	mov	r0, r8
 8004fda:	4649      	mov	r1, r9
 8004fdc:	f7fb fd7e 	bl	8000adc <__aeabi_dcmplt>
 8004fe0:	b110      	cbz	r0, 8004fe8 <_printf_float+0x90>
 8004fe2:	232d      	movs	r3, #45	; 0x2d
 8004fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe8:	4b93      	ldr	r3, [pc, #588]	; (8005238 <_printf_float+0x2e0>)
 8004fea:	4894      	ldr	r0, [pc, #592]	; (800523c <_printf_float+0x2e4>)
 8004fec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ff0:	bf94      	ite	ls
 8004ff2:	4698      	movls	r8, r3
 8004ff4:	4680      	movhi	r8, r0
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	6123      	str	r3, [r4, #16]
 8004ffa:	9b05      	ldr	r3, [sp, #20]
 8004ffc:	f023 0204 	bic.w	r2, r3, #4
 8005000:	6022      	str	r2, [r4, #0]
 8005002:	f04f 0900 	mov.w	r9, #0
 8005006:	9700      	str	r7, [sp, #0]
 8005008:	4633      	mov	r3, r6
 800500a:	aa0b      	add	r2, sp, #44	; 0x2c
 800500c:	4621      	mov	r1, r4
 800500e:	4628      	mov	r0, r5
 8005010:	f000 f9d8 	bl	80053c4 <_printf_common>
 8005014:	3001      	adds	r0, #1
 8005016:	f040 8090 	bne.w	800513a <_printf_float+0x1e2>
 800501a:	f04f 30ff 	mov.w	r0, #4294967295
 800501e:	b00d      	add	sp, #52	; 0x34
 8005020:	ecbd 8b02 	vpop	{d8}
 8005024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005028:	4642      	mov	r2, r8
 800502a:	464b      	mov	r3, r9
 800502c:	4640      	mov	r0, r8
 800502e:	4649      	mov	r1, r9
 8005030:	f7fb fd7c 	bl	8000b2c <__aeabi_dcmpun>
 8005034:	b140      	cbz	r0, 8005048 <_printf_float+0xf0>
 8005036:	464b      	mov	r3, r9
 8005038:	2b00      	cmp	r3, #0
 800503a:	bfbc      	itt	lt
 800503c:	232d      	movlt	r3, #45	; 0x2d
 800503e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005042:	487f      	ldr	r0, [pc, #508]	; (8005240 <_printf_float+0x2e8>)
 8005044:	4b7f      	ldr	r3, [pc, #508]	; (8005244 <_printf_float+0x2ec>)
 8005046:	e7d1      	b.n	8004fec <_printf_float+0x94>
 8005048:	6863      	ldr	r3, [r4, #4]
 800504a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800504e:	9206      	str	r2, [sp, #24]
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	d13f      	bne.n	80050d4 <_printf_float+0x17c>
 8005054:	2306      	movs	r3, #6
 8005056:	6063      	str	r3, [r4, #4]
 8005058:	9b05      	ldr	r3, [sp, #20]
 800505a:	6861      	ldr	r1, [r4, #4]
 800505c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005060:	2300      	movs	r3, #0
 8005062:	9303      	str	r3, [sp, #12]
 8005064:	ab0a      	add	r3, sp, #40	; 0x28
 8005066:	e9cd b301 	strd	fp, r3, [sp, #4]
 800506a:	ab09      	add	r3, sp, #36	; 0x24
 800506c:	ec49 8b10 	vmov	d0, r8, r9
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	6022      	str	r2, [r4, #0]
 8005074:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005078:	4628      	mov	r0, r5
 800507a:	f7ff fecd 	bl	8004e18 <__cvt>
 800507e:	9b06      	ldr	r3, [sp, #24]
 8005080:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005082:	2b47      	cmp	r3, #71	; 0x47
 8005084:	4680      	mov	r8, r0
 8005086:	d108      	bne.n	800509a <_printf_float+0x142>
 8005088:	1cc8      	adds	r0, r1, #3
 800508a:	db02      	blt.n	8005092 <_printf_float+0x13a>
 800508c:	6863      	ldr	r3, [r4, #4]
 800508e:	4299      	cmp	r1, r3
 8005090:	dd41      	ble.n	8005116 <_printf_float+0x1be>
 8005092:	f1ab 0b02 	sub.w	fp, fp, #2
 8005096:	fa5f fb8b 	uxtb.w	fp, fp
 800509a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800509e:	d820      	bhi.n	80050e2 <_printf_float+0x18a>
 80050a0:	3901      	subs	r1, #1
 80050a2:	465a      	mov	r2, fp
 80050a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050a8:	9109      	str	r1, [sp, #36]	; 0x24
 80050aa:	f7ff ff17 	bl	8004edc <__exponent>
 80050ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050b0:	1813      	adds	r3, r2, r0
 80050b2:	2a01      	cmp	r2, #1
 80050b4:	4681      	mov	r9, r0
 80050b6:	6123      	str	r3, [r4, #16]
 80050b8:	dc02      	bgt.n	80050c0 <_printf_float+0x168>
 80050ba:	6822      	ldr	r2, [r4, #0]
 80050bc:	07d2      	lsls	r2, r2, #31
 80050be:	d501      	bpl.n	80050c4 <_printf_float+0x16c>
 80050c0:	3301      	adds	r3, #1
 80050c2:	6123      	str	r3, [r4, #16]
 80050c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d09c      	beq.n	8005006 <_printf_float+0xae>
 80050cc:	232d      	movs	r3, #45	; 0x2d
 80050ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d2:	e798      	b.n	8005006 <_printf_float+0xae>
 80050d4:	9a06      	ldr	r2, [sp, #24]
 80050d6:	2a47      	cmp	r2, #71	; 0x47
 80050d8:	d1be      	bne.n	8005058 <_printf_float+0x100>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1bc      	bne.n	8005058 <_printf_float+0x100>
 80050de:	2301      	movs	r3, #1
 80050e0:	e7b9      	b.n	8005056 <_printf_float+0xfe>
 80050e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80050e6:	d118      	bne.n	800511a <_printf_float+0x1c2>
 80050e8:	2900      	cmp	r1, #0
 80050ea:	6863      	ldr	r3, [r4, #4]
 80050ec:	dd0b      	ble.n	8005106 <_printf_float+0x1ae>
 80050ee:	6121      	str	r1, [r4, #16]
 80050f0:	b913      	cbnz	r3, 80050f8 <_printf_float+0x1a0>
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	07d0      	lsls	r0, r2, #31
 80050f6:	d502      	bpl.n	80050fe <_printf_float+0x1a6>
 80050f8:	3301      	adds	r3, #1
 80050fa:	440b      	add	r3, r1
 80050fc:	6123      	str	r3, [r4, #16]
 80050fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005100:	f04f 0900 	mov.w	r9, #0
 8005104:	e7de      	b.n	80050c4 <_printf_float+0x16c>
 8005106:	b913      	cbnz	r3, 800510e <_printf_float+0x1b6>
 8005108:	6822      	ldr	r2, [r4, #0]
 800510a:	07d2      	lsls	r2, r2, #31
 800510c:	d501      	bpl.n	8005112 <_printf_float+0x1ba>
 800510e:	3302      	adds	r3, #2
 8005110:	e7f4      	b.n	80050fc <_printf_float+0x1a4>
 8005112:	2301      	movs	r3, #1
 8005114:	e7f2      	b.n	80050fc <_printf_float+0x1a4>
 8005116:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800511a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800511c:	4299      	cmp	r1, r3
 800511e:	db05      	blt.n	800512c <_printf_float+0x1d4>
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	6121      	str	r1, [r4, #16]
 8005124:	07d8      	lsls	r0, r3, #31
 8005126:	d5ea      	bpl.n	80050fe <_printf_float+0x1a6>
 8005128:	1c4b      	adds	r3, r1, #1
 800512a:	e7e7      	b.n	80050fc <_printf_float+0x1a4>
 800512c:	2900      	cmp	r1, #0
 800512e:	bfd4      	ite	le
 8005130:	f1c1 0202 	rsble	r2, r1, #2
 8005134:	2201      	movgt	r2, #1
 8005136:	4413      	add	r3, r2
 8005138:	e7e0      	b.n	80050fc <_printf_float+0x1a4>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	055a      	lsls	r2, r3, #21
 800513e:	d407      	bmi.n	8005150 <_printf_float+0x1f8>
 8005140:	6923      	ldr	r3, [r4, #16]
 8005142:	4642      	mov	r2, r8
 8005144:	4631      	mov	r1, r6
 8005146:	4628      	mov	r0, r5
 8005148:	47b8      	blx	r7
 800514a:	3001      	adds	r0, #1
 800514c:	d12c      	bne.n	80051a8 <_printf_float+0x250>
 800514e:	e764      	b.n	800501a <_printf_float+0xc2>
 8005150:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005154:	f240 80e0 	bls.w	8005318 <_printf_float+0x3c0>
 8005158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800515c:	2200      	movs	r2, #0
 800515e:	2300      	movs	r3, #0
 8005160:	f7fb fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005164:	2800      	cmp	r0, #0
 8005166:	d034      	beq.n	80051d2 <_printf_float+0x27a>
 8005168:	4a37      	ldr	r2, [pc, #220]	; (8005248 <_printf_float+0x2f0>)
 800516a:	2301      	movs	r3, #1
 800516c:	4631      	mov	r1, r6
 800516e:	4628      	mov	r0, r5
 8005170:	47b8      	blx	r7
 8005172:	3001      	adds	r0, #1
 8005174:	f43f af51 	beq.w	800501a <_printf_float+0xc2>
 8005178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800517c:	429a      	cmp	r2, r3
 800517e:	db02      	blt.n	8005186 <_printf_float+0x22e>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	07d8      	lsls	r0, r3, #31
 8005184:	d510      	bpl.n	80051a8 <_printf_float+0x250>
 8005186:	ee18 3a10 	vmov	r3, s16
 800518a:	4652      	mov	r2, sl
 800518c:	4631      	mov	r1, r6
 800518e:	4628      	mov	r0, r5
 8005190:	47b8      	blx	r7
 8005192:	3001      	adds	r0, #1
 8005194:	f43f af41 	beq.w	800501a <_printf_float+0xc2>
 8005198:	f04f 0800 	mov.w	r8, #0
 800519c:	f104 091a 	add.w	r9, r4, #26
 80051a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a2:	3b01      	subs	r3, #1
 80051a4:	4543      	cmp	r3, r8
 80051a6:	dc09      	bgt.n	80051bc <_printf_float+0x264>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	079b      	lsls	r3, r3, #30
 80051ac:	f100 8105 	bmi.w	80053ba <_printf_float+0x462>
 80051b0:	68e0      	ldr	r0, [r4, #12]
 80051b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051b4:	4298      	cmp	r0, r3
 80051b6:	bfb8      	it	lt
 80051b8:	4618      	movlt	r0, r3
 80051ba:	e730      	b.n	800501e <_printf_float+0xc6>
 80051bc:	2301      	movs	r3, #1
 80051be:	464a      	mov	r2, r9
 80051c0:	4631      	mov	r1, r6
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f af27 	beq.w	800501a <_printf_float+0xc2>
 80051cc:	f108 0801 	add.w	r8, r8, #1
 80051d0:	e7e6      	b.n	80051a0 <_printf_float+0x248>
 80051d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	dc39      	bgt.n	800524c <_printf_float+0x2f4>
 80051d8:	4a1b      	ldr	r2, [pc, #108]	; (8005248 <_printf_float+0x2f0>)
 80051da:	2301      	movs	r3, #1
 80051dc:	4631      	mov	r1, r6
 80051de:	4628      	mov	r0, r5
 80051e0:	47b8      	blx	r7
 80051e2:	3001      	adds	r0, #1
 80051e4:	f43f af19 	beq.w	800501a <_printf_float+0xc2>
 80051e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051ec:	4313      	orrs	r3, r2
 80051ee:	d102      	bne.n	80051f6 <_printf_float+0x29e>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	07d9      	lsls	r1, r3, #31
 80051f4:	d5d8      	bpl.n	80051a8 <_printf_float+0x250>
 80051f6:	ee18 3a10 	vmov	r3, s16
 80051fa:	4652      	mov	r2, sl
 80051fc:	4631      	mov	r1, r6
 80051fe:	4628      	mov	r0, r5
 8005200:	47b8      	blx	r7
 8005202:	3001      	adds	r0, #1
 8005204:	f43f af09 	beq.w	800501a <_printf_float+0xc2>
 8005208:	f04f 0900 	mov.w	r9, #0
 800520c:	f104 0a1a 	add.w	sl, r4, #26
 8005210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005212:	425b      	negs	r3, r3
 8005214:	454b      	cmp	r3, r9
 8005216:	dc01      	bgt.n	800521c <_printf_float+0x2c4>
 8005218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800521a:	e792      	b.n	8005142 <_printf_float+0x1ea>
 800521c:	2301      	movs	r3, #1
 800521e:	4652      	mov	r2, sl
 8005220:	4631      	mov	r1, r6
 8005222:	4628      	mov	r0, r5
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	f43f aef7 	beq.w	800501a <_printf_float+0xc2>
 800522c:	f109 0901 	add.w	r9, r9, #1
 8005230:	e7ee      	b.n	8005210 <_printf_float+0x2b8>
 8005232:	bf00      	nop
 8005234:	7fefffff 	.word	0x7fefffff
 8005238:	08007988 	.word	0x08007988
 800523c:	0800798c 	.word	0x0800798c
 8005240:	08007994 	.word	0x08007994
 8005244:	08007990 	.word	0x08007990
 8005248:	08007998 	.word	0x08007998
 800524c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800524e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005250:	429a      	cmp	r2, r3
 8005252:	bfa8      	it	ge
 8005254:	461a      	movge	r2, r3
 8005256:	2a00      	cmp	r2, #0
 8005258:	4691      	mov	r9, r2
 800525a:	dc37      	bgt.n	80052cc <_printf_float+0x374>
 800525c:	f04f 0b00 	mov.w	fp, #0
 8005260:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005264:	f104 021a 	add.w	r2, r4, #26
 8005268:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800526a:	9305      	str	r3, [sp, #20]
 800526c:	eba3 0309 	sub.w	r3, r3, r9
 8005270:	455b      	cmp	r3, fp
 8005272:	dc33      	bgt.n	80052dc <_printf_float+0x384>
 8005274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005278:	429a      	cmp	r2, r3
 800527a:	db3b      	blt.n	80052f4 <_printf_float+0x39c>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	07da      	lsls	r2, r3, #31
 8005280:	d438      	bmi.n	80052f4 <_printf_float+0x39c>
 8005282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005284:	9b05      	ldr	r3, [sp, #20]
 8005286:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	eba2 0901 	sub.w	r9, r2, r1
 800528e:	4599      	cmp	r9, r3
 8005290:	bfa8      	it	ge
 8005292:	4699      	movge	r9, r3
 8005294:	f1b9 0f00 	cmp.w	r9, #0
 8005298:	dc35      	bgt.n	8005306 <_printf_float+0x3ae>
 800529a:	f04f 0800 	mov.w	r8, #0
 800529e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052a2:	f104 0a1a 	add.w	sl, r4, #26
 80052a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052aa:	1a9b      	subs	r3, r3, r2
 80052ac:	eba3 0309 	sub.w	r3, r3, r9
 80052b0:	4543      	cmp	r3, r8
 80052b2:	f77f af79 	ble.w	80051a8 <_printf_float+0x250>
 80052b6:	2301      	movs	r3, #1
 80052b8:	4652      	mov	r2, sl
 80052ba:	4631      	mov	r1, r6
 80052bc:	4628      	mov	r0, r5
 80052be:	47b8      	blx	r7
 80052c0:	3001      	adds	r0, #1
 80052c2:	f43f aeaa 	beq.w	800501a <_printf_float+0xc2>
 80052c6:	f108 0801 	add.w	r8, r8, #1
 80052ca:	e7ec      	b.n	80052a6 <_printf_float+0x34e>
 80052cc:	4613      	mov	r3, r2
 80052ce:	4631      	mov	r1, r6
 80052d0:	4642      	mov	r2, r8
 80052d2:	4628      	mov	r0, r5
 80052d4:	47b8      	blx	r7
 80052d6:	3001      	adds	r0, #1
 80052d8:	d1c0      	bne.n	800525c <_printf_float+0x304>
 80052da:	e69e      	b.n	800501a <_printf_float+0xc2>
 80052dc:	2301      	movs	r3, #1
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	9205      	str	r2, [sp, #20]
 80052e4:	47b8      	blx	r7
 80052e6:	3001      	adds	r0, #1
 80052e8:	f43f ae97 	beq.w	800501a <_printf_float+0xc2>
 80052ec:	9a05      	ldr	r2, [sp, #20]
 80052ee:	f10b 0b01 	add.w	fp, fp, #1
 80052f2:	e7b9      	b.n	8005268 <_printf_float+0x310>
 80052f4:	ee18 3a10 	vmov	r3, s16
 80052f8:	4652      	mov	r2, sl
 80052fa:	4631      	mov	r1, r6
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b8      	blx	r7
 8005300:	3001      	adds	r0, #1
 8005302:	d1be      	bne.n	8005282 <_printf_float+0x32a>
 8005304:	e689      	b.n	800501a <_printf_float+0xc2>
 8005306:	9a05      	ldr	r2, [sp, #20]
 8005308:	464b      	mov	r3, r9
 800530a:	4442      	add	r2, r8
 800530c:	4631      	mov	r1, r6
 800530e:	4628      	mov	r0, r5
 8005310:	47b8      	blx	r7
 8005312:	3001      	adds	r0, #1
 8005314:	d1c1      	bne.n	800529a <_printf_float+0x342>
 8005316:	e680      	b.n	800501a <_printf_float+0xc2>
 8005318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800531a:	2a01      	cmp	r2, #1
 800531c:	dc01      	bgt.n	8005322 <_printf_float+0x3ca>
 800531e:	07db      	lsls	r3, r3, #31
 8005320:	d538      	bpl.n	8005394 <_printf_float+0x43c>
 8005322:	2301      	movs	r3, #1
 8005324:	4642      	mov	r2, r8
 8005326:	4631      	mov	r1, r6
 8005328:	4628      	mov	r0, r5
 800532a:	47b8      	blx	r7
 800532c:	3001      	adds	r0, #1
 800532e:	f43f ae74 	beq.w	800501a <_printf_float+0xc2>
 8005332:	ee18 3a10 	vmov	r3, s16
 8005336:	4652      	mov	r2, sl
 8005338:	4631      	mov	r1, r6
 800533a:	4628      	mov	r0, r5
 800533c:	47b8      	blx	r7
 800533e:	3001      	adds	r0, #1
 8005340:	f43f ae6b 	beq.w	800501a <_printf_float+0xc2>
 8005344:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005348:	2200      	movs	r2, #0
 800534a:	2300      	movs	r3, #0
 800534c:	f7fb fbbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005350:	b9d8      	cbnz	r0, 800538a <_printf_float+0x432>
 8005352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005354:	f108 0201 	add.w	r2, r8, #1
 8005358:	3b01      	subs	r3, #1
 800535a:	4631      	mov	r1, r6
 800535c:	4628      	mov	r0, r5
 800535e:	47b8      	blx	r7
 8005360:	3001      	adds	r0, #1
 8005362:	d10e      	bne.n	8005382 <_printf_float+0x42a>
 8005364:	e659      	b.n	800501a <_printf_float+0xc2>
 8005366:	2301      	movs	r3, #1
 8005368:	4652      	mov	r2, sl
 800536a:	4631      	mov	r1, r6
 800536c:	4628      	mov	r0, r5
 800536e:	47b8      	blx	r7
 8005370:	3001      	adds	r0, #1
 8005372:	f43f ae52 	beq.w	800501a <_printf_float+0xc2>
 8005376:	f108 0801 	add.w	r8, r8, #1
 800537a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800537c:	3b01      	subs	r3, #1
 800537e:	4543      	cmp	r3, r8
 8005380:	dcf1      	bgt.n	8005366 <_printf_float+0x40e>
 8005382:	464b      	mov	r3, r9
 8005384:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005388:	e6dc      	b.n	8005144 <_printf_float+0x1ec>
 800538a:	f04f 0800 	mov.w	r8, #0
 800538e:	f104 0a1a 	add.w	sl, r4, #26
 8005392:	e7f2      	b.n	800537a <_printf_float+0x422>
 8005394:	2301      	movs	r3, #1
 8005396:	4642      	mov	r2, r8
 8005398:	e7df      	b.n	800535a <_printf_float+0x402>
 800539a:	2301      	movs	r3, #1
 800539c:	464a      	mov	r2, r9
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b8      	blx	r7
 80053a4:	3001      	adds	r0, #1
 80053a6:	f43f ae38 	beq.w	800501a <_printf_float+0xc2>
 80053aa:	f108 0801 	add.w	r8, r8, #1
 80053ae:	68e3      	ldr	r3, [r4, #12]
 80053b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053b2:	1a5b      	subs	r3, r3, r1
 80053b4:	4543      	cmp	r3, r8
 80053b6:	dcf0      	bgt.n	800539a <_printf_float+0x442>
 80053b8:	e6fa      	b.n	80051b0 <_printf_float+0x258>
 80053ba:	f04f 0800 	mov.w	r8, #0
 80053be:	f104 0919 	add.w	r9, r4, #25
 80053c2:	e7f4      	b.n	80053ae <_printf_float+0x456>

080053c4 <_printf_common>:
 80053c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053c8:	4616      	mov	r6, r2
 80053ca:	4699      	mov	r9, r3
 80053cc:	688a      	ldr	r2, [r1, #8]
 80053ce:	690b      	ldr	r3, [r1, #16]
 80053d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053d4:	4293      	cmp	r3, r2
 80053d6:	bfb8      	it	lt
 80053d8:	4613      	movlt	r3, r2
 80053da:	6033      	str	r3, [r6, #0]
 80053dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053e0:	4607      	mov	r7, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	b10a      	cbz	r2, 80053ea <_printf_common+0x26>
 80053e6:	3301      	adds	r3, #1
 80053e8:	6033      	str	r3, [r6, #0]
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	0699      	lsls	r1, r3, #26
 80053ee:	bf42      	ittt	mi
 80053f0:	6833      	ldrmi	r3, [r6, #0]
 80053f2:	3302      	addmi	r3, #2
 80053f4:	6033      	strmi	r3, [r6, #0]
 80053f6:	6825      	ldr	r5, [r4, #0]
 80053f8:	f015 0506 	ands.w	r5, r5, #6
 80053fc:	d106      	bne.n	800540c <_printf_common+0x48>
 80053fe:	f104 0a19 	add.w	sl, r4, #25
 8005402:	68e3      	ldr	r3, [r4, #12]
 8005404:	6832      	ldr	r2, [r6, #0]
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	42ab      	cmp	r3, r5
 800540a:	dc26      	bgt.n	800545a <_printf_common+0x96>
 800540c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005410:	1e13      	subs	r3, r2, #0
 8005412:	6822      	ldr	r2, [r4, #0]
 8005414:	bf18      	it	ne
 8005416:	2301      	movne	r3, #1
 8005418:	0692      	lsls	r2, r2, #26
 800541a:	d42b      	bmi.n	8005474 <_printf_common+0xb0>
 800541c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005420:	4649      	mov	r1, r9
 8005422:	4638      	mov	r0, r7
 8005424:	47c0      	blx	r8
 8005426:	3001      	adds	r0, #1
 8005428:	d01e      	beq.n	8005468 <_printf_common+0xa4>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	68e5      	ldr	r5, [r4, #12]
 800542e:	6832      	ldr	r2, [r6, #0]
 8005430:	f003 0306 	and.w	r3, r3, #6
 8005434:	2b04      	cmp	r3, #4
 8005436:	bf08      	it	eq
 8005438:	1aad      	subeq	r5, r5, r2
 800543a:	68a3      	ldr	r3, [r4, #8]
 800543c:	6922      	ldr	r2, [r4, #16]
 800543e:	bf0c      	ite	eq
 8005440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005444:	2500      	movne	r5, #0
 8005446:	4293      	cmp	r3, r2
 8005448:	bfc4      	itt	gt
 800544a:	1a9b      	subgt	r3, r3, r2
 800544c:	18ed      	addgt	r5, r5, r3
 800544e:	2600      	movs	r6, #0
 8005450:	341a      	adds	r4, #26
 8005452:	42b5      	cmp	r5, r6
 8005454:	d11a      	bne.n	800548c <_printf_common+0xc8>
 8005456:	2000      	movs	r0, #0
 8005458:	e008      	b.n	800546c <_printf_common+0xa8>
 800545a:	2301      	movs	r3, #1
 800545c:	4652      	mov	r2, sl
 800545e:	4649      	mov	r1, r9
 8005460:	4638      	mov	r0, r7
 8005462:	47c0      	blx	r8
 8005464:	3001      	adds	r0, #1
 8005466:	d103      	bne.n	8005470 <_printf_common+0xac>
 8005468:	f04f 30ff 	mov.w	r0, #4294967295
 800546c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005470:	3501      	adds	r5, #1
 8005472:	e7c6      	b.n	8005402 <_printf_common+0x3e>
 8005474:	18e1      	adds	r1, r4, r3
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	2030      	movs	r0, #48	; 0x30
 800547a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800547e:	4422      	add	r2, r4
 8005480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005488:	3302      	adds	r3, #2
 800548a:	e7c7      	b.n	800541c <_printf_common+0x58>
 800548c:	2301      	movs	r3, #1
 800548e:	4622      	mov	r2, r4
 8005490:	4649      	mov	r1, r9
 8005492:	4638      	mov	r0, r7
 8005494:	47c0      	blx	r8
 8005496:	3001      	adds	r0, #1
 8005498:	d0e6      	beq.n	8005468 <_printf_common+0xa4>
 800549a:	3601      	adds	r6, #1
 800549c:	e7d9      	b.n	8005452 <_printf_common+0x8e>
	...

080054a0 <_printf_i>:
 80054a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054a4:	460c      	mov	r4, r1
 80054a6:	4691      	mov	r9, r2
 80054a8:	7e27      	ldrb	r7, [r4, #24]
 80054aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054ac:	2f78      	cmp	r7, #120	; 0x78
 80054ae:	4680      	mov	r8, r0
 80054b0:	469a      	mov	sl, r3
 80054b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054b6:	d807      	bhi.n	80054c8 <_printf_i+0x28>
 80054b8:	2f62      	cmp	r7, #98	; 0x62
 80054ba:	d80a      	bhi.n	80054d2 <_printf_i+0x32>
 80054bc:	2f00      	cmp	r7, #0
 80054be:	f000 80d8 	beq.w	8005672 <_printf_i+0x1d2>
 80054c2:	2f58      	cmp	r7, #88	; 0x58
 80054c4:	f000 80a3 	beq.w	800560e <_printf_i+0x16e>
 80054c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054d0:	e03a      	b.n	8005548 <_printf_i+0xa8>
 80054d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054d6:	2b15      	cmp	r3, #21
 80054d8:	d8f6      	bhi.n	80054c8 <_printf_i+0x28>
 80054da:	a001      	add	r0, pc, #4	; (adr r0, 80054e0 <_printf_i+0x40>)
 80054dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80054e0:	08005539 	.word	0x08005539
 80054e4:	0800554d 	.word	0x0800554d
 80054e8:	080054c9 	.word	0x080054c9
 80054ec:	080054c9 	.word	0x080054c9
 80054f0:	080054c9 	.word	0x080054c9
 80054f4:	080054c9 	.word	0x080054c9
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	080054c9 	.word	0x080054c9
 8005500:	080054c9 	.word	0x080054c9
 8005504:	080054c9 	.word	0x080054c9
 8005508:	080054c9 	.word	0x080054c9
 800550c:	08005659 	.word	0x08005659
 8005510:	0800557d 	.word	0x0800557d
 8005514:	0800563b 	.word	0x0800563b
 8005518:	080054c9 	.word	0x080054c9
 800551c:	080054c9 	.word	0x080054c9
 8005520:	0800567b 	.word	0x0800567b
 8005524:	080054c9 	.word	0x080054c9
 8005528:	0800557d 	.word	0x0800557d
 800552c:	080054c9 	.word	0x080054c9
 8005530:	080054c9 	.word	0x080054c9
 8005534:	08005643 	.word	0x08005643
 8005538:	680b      	ldr	r3, [r1, #0]
 800553a:	1d1a      	adds	r2, r3, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	600a      	str	r2, [r1, #0]
 8005540:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005548:	2301      	movs	r3, #1
 800554a:	e0a3      	b.n	8005694 <_printf_i+0x1f4>
 800554c:	6825      	ldr	r5, [r4, #0]
 800554e:	6808      	ldr	r0, [r1, #0]
 8005550:	062e      	lsls	r6, r5, #24
 8005552:	f100 0304 	add.w	r3, r0, #4
 8005556:	d50a      	bpl.n	800556e <_printf_i+0xce>
 8005558:	6805      	ldr	r5, [r0, #0]
 800555a:	600b      	str	r3, [r1, #0]
 800555c:	2d00      	cmp	r5, #0
 800555e:	da03      	bge.n	8005568 <_printf_i+0xc8>
 8005560:	232d      	movs	r3, #45	; 0x2d
 8005562:	426d      	negs	r5, r5
 8005564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005568:	485e      	ldr	r0, [pc, #376]	; (80056e4 <_printf_i+0x244>)
 800556a:	230a      	movs	r3, #10
 800556c:	e019      	b.n	80055a2 <_printf_i+0x102>
 800556e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005572:	6805      	ldr	r5, [r0, #0]
 8005574:	600b      	str	r3, [r1, #0]
 8005576:	bf18      	it	ne
 8005578:	b22d      	sxthne	r5, r5
 800557a:	e7ef      	b.n	800555c <_printf_i+0xbc>
 800557c:	680b      	ldr	r3, [r1, #0]
 800557e:	6825      	ldr	r5, [r4, #0]
 8005580:	1d18      	adds	r0, r3, #4
 8005582:	6008      	str	r0, [r1, #0]
 8005584:	0628      	lsls	r0, r5, #24
 8005586:	d501      	bpl.n	800558c <_printf_i+0xec>
 8005588:	681d      	ldr	r5, [r3, #0]
 800558a:	e002      	b.n	8005592 <_printf_i+0xf2>
 800558c:	0669      	lsls	r1, r5, #25
 800558e:	d5fb      	bpl.n	8005588 <_printf_i+0xe8>
 8005590:	881d      	ldrh	r5, [r3, #0]
 8005592:	4854      	ldr	r0, [pc, #336]	; (80056e4 <_printf_i+0x244>)
 8005594:	2f6f      	cmp	r7, #111	; 0x6f
 8005596:	bf0c      	ite	eq
 8005598:	2308      	moveq	r3, #8
 800559a:	230a      	movne	r3, #10
 800559c:	2100      	movs	r1, #0
 800559e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055a2:	6866      	ldr	r6, [r4, #4]
 80055a4:	60a6      	str	r6, [r4, #8]
 80055a6:	2e00      	cmp	r6, #0
 80055a8:	bfa2      	ittt	ge
 80055aa:	6821      	ldrge	r1, [r4, #0]
 80055ac:	f021 0104 	bicge.w	r1, r1, #4
 80055b0:	6021      	strge	r1, [r4, #0]
 80055b2:	b90d      	cbnz	r5, 80055b8 <_printf_i+0x118>
 80055b4:	2e00      	cmp	r6, #0
 80055b6:	d04d      	beq.n	8005654 <_printf_i+0x1b4>
 80055b8:	4616      	mov	r6, r2
 80055ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80055be:	fb03 5711 	mls	r7, r3, r1, r5
 80055c2:	5dc7      	ldrb	r7, [r0, r7]
 80055c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055c8:	462f      	mov	r7, r5
 80055ca:	42bb      	cmp	r3, r7
 80055cc:	460d      	mov	r5, r1
 80055ce:	d9f4      	bls.n	80055ba <_printf_i+0x11a>
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d10b      	bne.n	80055ec <_printf_i+0x14c>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	07df      	lsls	r7, r3, #31
 80055d8:	d508      	bpl.n	80055ec <_printf_i+0x14c>
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	6861      	ldr	r1, [r4, #4]
 80055de:	4299      	cmp	r1, r3
 80055e0:	bfde      	ittt	le
 80055e2:	2330      	movle	r3, #48	; 0x30
 80055e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055ec:	1b92      	subs	r2, r2, r6
 80055ee:	6122      	str	r2, [r4, #16]
 80055f0:	f8cd a000 	str.w	sl, [sp]
 80055f4:	464b      	mov	r3, r9
 80055f6:	aa03      	add	r2, sp, #12
 80055f8:	4621      	mov	r1, r4
 80055fa:	4640      	mov	r0, r8
 80055fc:	f7ff fee2 	bl	80053c4 <_printf_common>
 8005600:	3001      	adds	r0, #1
 8005602:	d14c      	bne.n	800569e <_printf_i+0x1fe>
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	b004      	add	sp, #16
 800560a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800560e:	4835      	ldr	r0, [pc, #212]	; (80056e4 <_printf_i+0x244>)
 8005610:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	680e      	ldr	r6, [r1, #0]
 8005618:	061f      	lsls	r7, r3, #24
 800561a:	f856 5b04 	ldr.w	r5, [r6], #4
 800561e:	600e      	str	r6, [r1, #0]
 8005620:	d514      	bpl.n	800564c <_printf_i+0x1ac>
 8005622:	07d9      	lsls	r1, r3, #31
 8005624:	bf44      	itt	mi
 8005626:	f043 0320 	orrmi.w	r3, r3, #32
 800562a:	6023      	strmi	r3, [r4, #0]
 800562c:	b91d      	cbnz	r5, 8005636 <_printf_i+0x196>
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	f023 0320 	bic.w	r3, r3, #32
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	2310      	movs	r3, #16
 8005638:	e7b0      	b.n	800559c <_printf_i+0xfc>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	f043 0320 	orr.w	r3, r3, #32
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	2378      	movs	r3, #120	; 0x78
 8005644:	4828      	ldr	r0, [pc, #160]	; (80056e8 <_printf_i+0x248>)
 8005646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800564a:	e7e3      	b.n	8005614 <_printf_i+0x174>
 800564c:	065e      	lsls	r6, r3, #25
 800564e:	bf48      	it	mi
 8005650:	b2ad      	uxthmi	r5, r5
 8005652:	e7e6      	b.n	8005622 <_printf_i+0x182>
 8005654:	4616      	mov	r6, r2
 8005656:	e7bb      	b.n	80055d0 <_printf_i+0x130>
 8005658:	680b      	ldr	r3, [r1, #0]
 800565a:	6826      	ldr	r6, [r4, #0]
 800565c:	6960      	ldr	r0, [r4, #20]
 800565e:	1d1d      	adds	r5, r3, #4
 8005660:	600d      	str	r5, [r1, #0]
 8005662:	0635      	lsls	r5, r6, #24
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	d501      	bpl.n	800566c <_printf_i+0x1cc>
 8005668:	6018      	str	r0, [r3, #0]
 800566a:	e002      	b.n	8005672 <_printf_i+0x1d2>
 800566c:	0671      	lsls	r1, r6, #25
 800566e:	d5fb      	bpl.n	8005668 <_printf_i+0x1c8>
 8005670:	8018      	strh	r0, [r3, #0]
 8005672:	2300      	movs	r3, #0
 8005674:	6123      	str	r3, [r4, #16]
 8005676:	4616      	mov	r6, r2
 8005678:	e7ba      	b.n	80055f0 <_printf_i+0x150>
 800567a:	680b      	ldr	r3, [r1, #0]
 800567c:	1d1a      	adds	r2, r3, #4
 800567e:	600a      	str	r2, [r1, #0]
 8005680:	681e      	ldr	r6, [r3, #0]
 8005682:	6862      	ldr	r2, [r4, #4]
 8005684:	2100      	movs	r1, #0
 8005686:	4630      	mov	r0, r6
 8005688:	f7fa fdaa 	bl	80001e0 <memchr>
 800568c:	b108      	cbz	r0, 8005692 <_printf_i+0x1f2>
 800568e:	1b80      	subs	r0, r0, r6
 8005690:	6060      	str	r0, [r4, #4]
 8005692:	6863      	ldr	r3, [r4, #4]
 8005694:	6123      	str	r3, [r4, #16]
 8005696:	2300      	movs	r3, #0
 8005698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800569c:	e7a8      	b.n	80055f0 <_printf_i+0x150>
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	4632      	mov	r2, r6
 80056a2:	4649      	mov	r1, r9
 80056a4:	4640      	mov	r0, r8
 80056a6:	47d0      	blx	sl
 80056a8:	3001      	adds	r0, #1
 80056aa:	d0ab      	beq.n	8005604 <_printf_i+0x164>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	079b      	lsls	r3, r3, #30
 80056b0:	d413      	bmi.n	80056da <_printf_i+0x23a>
 80056b2:	68e0      	ldr	r0, [r4, #12]
 80056b4:	9b03      	ldr	r3, [sp, #12]
 80056b6:	4298      	cmp	r0, r3
 80056b8:	bfb8      	it	lt
 80056ba:	4618      	movlt	r0, r3
 80056bc:	e7a4      	b.n	8005608 <_printf_i+0x168>
 80056be:	2301      	movs	r3, #1
 80056c0:	4632      	mov	r2, r6
 80056c2:	4649      	mov	r1, r9
 80056c4:	4640      	mov	r0, r8
 80056c6:	47d0      	blx	sl
 80056c8:	3001      	adds	r0, #1
 80056ca:	d09b      	beq.n	8005604 <_printf_i+0x164>
 80056cc:	3501      	adds	r5, #1
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	9903      	ldr	r1, [sp, #12]
 80056d2:	1a5b      	subs	r3, r3, r1
 80056d4:	42ab      	cmp	r3, r5
 80056d6:	dcf2      	bgt.n	80056be <_printf_i+0x21e>
 80056d8:	e7eb      	b.n	80056b2 <_printf_i+0x212>
 80056da:	2500      	movs	r5, #0
 80056dc:	f104 0619 	add.w	r6, r4, #25
 80056e0:	e7f5      	b.n	80056ce <_printf_i+0x22e>
 80056e2:	bf00      	nop
 80056e4:	0800799a 	.word	0x0800799a
 80056e8:	080079ab 	.word	0x080079ab

080056ec <iprintf>:
 80056ec:	b40f      	push	{r0, r1, r2, r3}
 80056ee:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <iprintf+0x2c>)
 80056f0:	b513      	push	{r0, r1, r4, lr}
 80056f2:	681c      	ldr	r4, [r3, #0]
 80056f4:	b124      	cbz	r4, 8005700 <iprintf+0x14>
 80056f6:	69a3      	ldr	r3, [r4, #24]
 80056f8:	b913      	cbnz	r3, 8005700 <iprintf+0x14>
 80056fa:	4620      	mov	r0, r4
 80056fc:	f001 f8d6 	bl	80068ac <__sinit>
 8005700:	ab05      	add	r3, sp, #20
 8005702:	9a04      	ldr	r2, [sp, #16]
 8005704:	68a1      	ldr	r1, [r4, #8]
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	4620      	mov	r0, r4
 800570a:	f001 fe51 	bl	80073b0 <_vfiprintf_r>
 800570e:	b002      	add	sp, #8
 8005710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005714:	b004      	add	sp, #16
 8005716:	4770      	bx	lr
 8005718:	2000000c 	.word	0x2000000c

0800571c <_puts_r>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	460e      	mov	r6, r1
 8005720:	4605      	mov	r5, r0
 8005722:	b118      	cbz	r0, 800572c <_puts_r+0x10>
 8005724:	6983      	ldr	r3, [r0, #24]
 8005726:	b90b      	cbnz	r3, 800572c <_puts_r+0x10>
 8005728:	f001 f8c0 	bl	80068ac <__sinit>
 800572c:	69ab      	ldr	r3, [r5, #24]
 800572e:	68ac      	ldr	r4, [r5, #8]
 8005730:	b913      	cbnz	r3, 8005738 <_puts_r+0x1c>
 8005732:	4628      	mov	r0, r5
 8005734:	f001 f8ba 	bl	80068ac <__sinit>
 8005738:	4b2c      	ldr	r3, [pc, #176]	; (80057ec <_puts_r+0xd0>)
 800573a:	429c      	cmp	r4, r3
 800573c:	d120      	bne.n	8005780 <_puts_r+0x64>
 800573e:	686c      	ldr	r4, [r5, #4]
 8005740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005742:	07db      	lsls	r3, r3, #31
 8005744:	d405      	bmi.n	8005752 <_puts_r+0x36>
 8005746:	89a3      	ldrh	r3, [r4, #12]
 8005748:	0598      	lsls	r0, r3, #22
 800574a:	d402      	bmi.n	8005752 <_puts_r+0x36>
 800574c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800574e:	f001 f950 	bl	80069f2 <__retarget_lock_acquire_recursive>
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	0719      	lsls	r1, r3, #28
 8005756:	d51d      	bpl.n	8005794 <_puts_r+0x78>
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	b1db      	cbz	r3, 8005794 <_puts_r+0x78>
 800575c:	3e01      	subs	r6, #1
 800575e:	68a3      	ldr	r3, [r4, #8]
 8005760:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005764:	3b01      	subs	r3, #1
 8005766:	60a3      	str	r3, [r4, #8]
 8005768:	bb39      	cbnz	r1, 80057ba <_puts_r+0x9e>
 800576a:	2b00      	cmp	r3, #0
 800576c:	da38      	bge.n	80057e0 <_puts_r+0xc4>
 800576e:	4622      	mov	r2, r4
 8005770:	210a      	movs	r1, #10
 8005772:	4628      	mov	r0, r5
 8005774:	f000 f848 	bl	8005808 <__swbuf_r>
 8005778:	3001      	adds	r0, #1
 800577a:	d011      	beq.n	80057a0 <_puts_r+0x84>
 800577c:	250a      	movs	r5, #10
 800577e:	e011      	b.n	80057a4 <_puts_r+0x88>
 8005780:	4b1b      	ldr	r3, [pc, #108]	; (80057f0 <_puts_r+0xd4>)
 8005782:	429c      	cmp	r4, r3
 8005784:	d101      	bne.n	800578a <_puts_r+0x6e>
 8005786:	68ac      	ldr	r4, [r5, #8]
 8005788:	e7da      	b.n	8005740 <_puts_r+0x24>
 800578a:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <_puts_r+0xd8>)
 800578c:	429c      	cmp	r4, r3
 800578e:	bf08      	it	eq
 8005790:	68ec      	ldreq	r4, [r5, #12]
 8005792:	e7d5      	b.n	8005740 <_puts_r+0x24>
 8005794:	4621      	mov	r1, r4
 8005796:	4628      	mov	r0, r5
 8005798:	f000 f888 	bl	80058ac <__swsetup_r>
 800579c:	2800      	cmp	r0, #0
 800579e:	d0dd      	beq.n	800575c <_puts_r+0x40>
 80057a0:	f04f 35ff 	mov.w	r5, #4294967295
 80057a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057a6:	07da      	lsls	r2, r3, #31
 80057a8:	d405      	bmi.n	80057b6 <_puts_r+0x9a>
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	059b      	lsls	r3, r3, #22
 80057ae:	d402      	bmi.n	80057b6 <_puts_r+0x9a>
 80057b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057b2:	f001 f91f 	bl	80069f4 <__retarget_lock_release_recursive>
 80057b6:	4628      	mov	r0, r5
 80057b8:	bd70      	pop	{r4, r5, r6, pc}
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	da04      	bge.n	80057c8 <_puts_r+0xac>
 80057be:	69a2      	ldr	r2, [r4, #24]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	dc06      	bgt.n	80057d2 <_puts_r+0xb6>
 80057c4:	290a      	cmp	r1, #10
 80057c6:	d004      	beq.n	80057d2 <_puts_r+0xb6>
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	6022      	str	r2, [r4, #0]
 80057ce:	7019      	strb	r1, [r3, #0]
 80057d0:	e7c5      	b.n	800575e <_puts_r+0x42>
 80057d2:	4622      	mov	r2, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	f000 f817 	bl	8005808 <__swbuf_r>
 80057da:	3001      	adds	r0, #1
 80057dc:	d1bf      	bne.n	800575e <_puts_r+0x42>
 80057de:	e7df      	b.n	80057a0 <_puts_r+0x84>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	250a      	movs	r5, #10
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	6022      	str	r2, [r4, #0]
 80057e8:	701d      	strb	r5, [r3, #0]
 80057ea:	e7db      	b.n	80057a4 <_puts_r+0x88>
 80057ec:	08007a70 	.word	0x08007a70
 80057f0:	08007a90 	.word	0x08007a90
 80057f4:	08007a50 	.word	0x08007a50

080057f8 <puts>:
 80057f8:	4b02      	ldr	r3, [pc, #8]	; (8005804 <puts+0xc>)
 80057fa:	4601      	mov	r1, r0
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	f7ff bf8d 	b.w	800571c <_puts_r>
 8005802:	bf00      	nop
 8005804:	2000000c 	.word	0x2000000c

08005808 <__swbuf_r>:
 8005808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580a:	460e      	mov	r6, r1
 800580c:	4614      	mov	r4, r2
 800580e:	4605      	mov	r5, r0
 8005810:	b118      	cbz	r0, 800581a <__swbuf_r+0x12>
 8005812:	6983      	ldr	r3, [r0, #24]
 8005814:	b90b      	cbnz	r3, 800581a <__swbuf_r+0x12>
 8005816:	f001 f849 	bl	80068ac <__sinit>
 800581a:	4b21      	ldr	r3, [pc, #132]	; (80058a0 <__swbuf_r+0x98>)
 800581c:	429c      	cmp	r4, r3
 800581e:	d12b      	bne.n	8005878 <__swbuf_r+0x70>
 8005820:	686c      	ldr	r4, [r5, #4]
 8005822:	69a3      	ldr	r3, [r4, #24]
 8005824:	60a3      	str	r3, [r4, #8]
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	071a      	lsls	r2, r3, #28
 800582a:	d52f      	bpl.n	800588c <__swbuf_r+0x84>
 800582c:	6923      	ldr	r3, [r4, #16]
 800582e:	b36b      	cbz	r3, 800588c <__swbuf_r+0x84>
 8005830:	6923      	ldr	r3, [r4, #16]
 8005832:	6820      	ldr	r0, [r4, #0]
 8005834:	1ac0      	subs	r0, r0, r3
 8005836:	6963      	ldr	r3, [r4, #20]
 8005838:	b2f6      	uxtb	r6, r6
 800583a:	4283      	cmp	r3, r0
 800583c:	4637      	mov	r7, r6
 800583e:	dc04      	bgt.n	800584a <__swbuf_r+0x42>
 8005840:	4621      	mov	r1, r4
 8005842:	4628      	mov	r0, r5
 8005844:	f000 ff9e 	bl	8006784 <_fflush_r>
 8005848:	bb30      	cbnz	r0, 8005898 <__swbuf_r+0x90>
 800584a:	68a3      	ldr	r3, [r4, #8]
 800584c:	3b01      	subs	r3, #1
 800584e:	60a3      	str	r3, [r4, #8]
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	6022      	str	r2, [r4, #0]
 8005856:	701e      	strb	r6, [r3, #0]
 8005858:	6963      	ldr	r3, [r4, #20]
 800585a:	3001      	adds	r0, #1
 800585c:	4283      	cmp	r3, r0
 800585e:	d004      	beq.n	800586a <__swbuf_r+0x62>
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	07db      	lsls	r3, r3, #31
 8005864:	d506      	bpl.n	8005874 <__swbuf_r+0x6c>
 8005866:	2e0a      	cmp	r6, #10
 8005868:	d104      	bne.n	8005874 <__swbuf_r+0x6c>
 800586a:	4621      	mov	r1, r4
 800586c:	4628      	mov	r0, r5
 800586e:	f000 ff89 	bl	8006784 <_fflush_r>
 8005872:	b988      	cbnz	r0, 8005898 <__swbuf_r+0x90>
 8005874:	4638      	mov	r0, r7
 8005876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <__swbuf_r+0x9c>)
 800587a:	429c      	cmp	r4, r3
 800587c:	d101      	bne.n	8005882 <__swbuf_r+0x7a>
 800587e:	68ac      	ldr	r4, [r5, #8]
 8005880:	e7cf      	b.n	8005822 <__swbuf_r+0x1a>
 8005882:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <__swbuf_r+0xa0>)
 8005884:	429c      	cmp	r4, r3
 8005886:	bf08      	it	eq
 8005888:	68ec      	ldreq	r4, [r5, #12]
 800588a:	e7ca      	b.n	8005822 <__swbuf_r+0x1a>
 800588c:	4621      	mov	r1, r4
 800588e:	4628      	mov	r0, r5
 8005890:	f000 f80c 	bl	80058ac <__swsetup_r>
 8005894:	2800      	cmp	r0, #0
 8005896:	d0cb      	beq.n	8005830 <__swbuf_r+0x28>
 8005898:	f04f 37ff 	mov.w	r7, #4294967295
 800589c:	e7ea      	b.n	8005874 <__swbuf_r+0x6c>
 800589e:	bf00      	nop
 80058a0:	08007a70 	.word	0x08007a70
 80058a4:	08007a90 	.word	0x08007a90
 80058a8:	08007a50 	.word	0x08007a50

080058ac <__swsetup_r>:
 80058ac:	4b32      	ldr	r3, [pc, #200]	; (8005978 <__swsetup_r+0xcc>)
 80058ae:	b570      	push	{r4, r5, r6, lr}
 80058b0:	681d      	ldr	r5, [r3, #0]
 80058b2:	4606      	mov	r6, r0
 80058b4:	460c      	mov	r4, r1
 80058b6:	b125      	cbz	r5, 80058c2 <__swsetup_r+0x16>
 80058b8:	69ab      	ldr	r3, [r5, #24]
 80058ba:	b913      	cbnz	r3, 80058c2 <__swsetup_r+0x16>
 80058bc:	4628      	mov	r0, r5
 80058be:	f000 fff5 	bl	80068ac <__sinit>
 80058c2:	4b2e      	ldr	r3, [pc, #184]	; (800597c <__swsetup_r+0xd0>)
 80058c4:	429c      	cmp	r4, r3
 80058c6:	d10f      	bne.n	80058e8 <__swsetup_r+0x3c>
 80058c8:	686c      	ldr	r4, [r5, #4]
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058d0:	0719      	lsls	r1, r3, #28
 80058d2:	d42c      	bmi.n	800592e <__swsetup_r+0x82>
 80058d4:	06dd      	lsls	r5, r3, #27
 80058d6:	d411      	bmi.n	80058fc <__swsetup_r+0x50>
 80058d8:	2309      	movs	r3, #9
 80058da:	6033      	str	r3, [r6, #0]
 80058dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058e0:	81a3      	strh	r3, [r4, #12]
 80058e2:	f04f 30ff 	mov.w	r0, #4294967295
 80058e6:	e03e      	b.n	8005966 <__swsetup_r+0xba>
 80058e8:	4b25      	ldr	r3, [pc, #148]	; (8005980 <__swsetup_r+0xd4>)
 80058ea:	429c      	cmp	r4, r3
 80058ec:	d101      	bne.n	80058f2 <__swsetup_r+0x46>
 80058ee:	68ac      	ldr	r4, [r5, #8]
 80058f0:	e7eb      	b.n	80058ca <__swsetup_r+0x1e>
 80058f2:	4b24      	ldr	r3, [pc, #144]	; (8005984 <__swsetup_r+0xd8>)
 80058f4:	429c      	cmp	r4, r3
 80058f6:	bf08      	it	eq
 80058f8:	68ec      	ldreq	r4, [r5, #12]
 80058fa:	e7e6      	b.n	80058ca <__swsetup_r+0x1e>
 80058fc:	0758      	lsls	r0, r3, #29
 80058fe:	d512      	bpl.n	8005926 <__swsetup_r+0x7a>
 8005900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005902:	b141      	cbz	r1, 8005916 <__swsetup_r+0x6a>
 8005904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005908:	4299      	cmp	r1, r3
 800590a:	d002      	beq.n	8005912 <__swsetup_r+0x66>
 800590c:	4630      	mov	r0, r6
 800590e:	f001 fc7b 	bl	8007208 <_free_r>
 8005912:	2300      	movs	r3, #0
 8005914:	6363      	str	r3, [r4, #52]	; 0x34
 8005916:	89a3      	ldrh	r3, [r4, #12]
 8005918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800591c:	81a3      	strh	r3, [r4, #12]
 800591e:	2300      	movs	r3, #0
 8005920:	6063      	str	r3, [r4, #4]
 8005922:	6923      	ldr	r3, [r4, #16]
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	f043 0308 	orr.w	r3, r3, #8
 800592c:	81a3      	strh	r3, [r4, #12]
 800592e:	6923      	ldr	r3, [r4, #16]
 8005930:	b94b      	cbnz	r3, 8005946 <__swsetup_r+0x9a>
 8005932:	89a3      	ldrh	r3, [r4, #12]
 8005934:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800593c:	d003      	beq.n	8005946 <__swsetup_r+0x9a>
 800593e:	4621      	mov	r1, r4
 8005940:	4630      	mov	r0, r6
 8005942:	f001 f87d 	bl	8006a40 <__smakebuf_r>
 8005946:	89a0      	ldrh	r0, [r4, #12]
 8005948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800594c:	f010 0301 	ands.w	r3, r0, #1
 8005950:	d00a      	beq.n	8005968 <__swsetup_r+0xbc>
 8005952:	2300      	movs	r3, #0
 8005954:	60a3      	str	r3, [r4, #8]
 8005956:	6963      	ldr	r3, [r4, #20]
 8005958:	425b      	negs	r3, r3
 800595a:	61a3      	str	r3, [r4, #24]
 800595c:	6923      	ldr	r3, [r4, #16]
 800595e:	b943      	cbnz	r3, 8005972 <__swsetup_r+0xc6>
 8005960:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005964:	d1ba      	bne.n	80058dc <__swsetup_r+0x30>
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	0781      	lsls	r1, r0, #30
 800596a:	bf58      	it	pl
 800596c:	6963      	ldrpl	r3, [r4, #20]
 800596e:	60a3      	str	r3, [r4, #8]
 8005970:	e7f4      	b.n	800595c <__swsetup_r+0xb0>
 8005972:	2000      	movs	r0, #0
 8005974:	e7f7      	b.n	8005966 <__swsetup_r+0xba>
 8005976:	bf00      	nop
 8005978:	2000000c 	.word	0x2000000c
 800597c:	08007a70 	.word	0x08007a70
 8005980:	08007a90 	.word	0x08007a90
 8005984:	08007a50 	.word	0x08007a50

08005988 <quorem>:
 8005988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	6903      	ldr	r3, [r0, #16]
 800598e:	690c      	ldr	r4, [r1, #16]
 8005990:	42a3      	cmp	r3, r4
 8005992:	4607      	mov	r7, r0
 8005994:	f2c0 8081 	blt.w	8005a9a <quorem+0x112>
 8005998:	3c01      	subs	r4, #1
 800599a:	f101 0814 	add.w	r8, r1, #20
 800599e:	f100 0514 	add.w	r5, r0, #20
 80059a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059b0:	3301      	adds	r3, #1
 80059b2:	429a      	cmp	r2, r3
 80059b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80059c0:	d331      	bcc.n	8005a26 <quorem+0x9e>
 80059c2:	f04f 0e00 	mov.w	lr, #0
 80059c6:	4640      	mov	r0, r8
 80059c8:	46ac      	mov	ip, r5
 80059ca:	46f2      	mov	sl, lr
 80059cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80059d0:	b293      	uxth	r3, r2
 80059d2:	fb06 e303 	mla	r3, r6, r3, lr
 80059d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80059da:	b29b      	uxth	r3, r3
 80059dc:	ebaa 0303 	sub.w	r3, sl, r3
 80059e0:	0c12      	lsrs	r2, r2, #16
 80059e2:	f8dc a000 	ldr.w	sl, [ip]
 80059e6:	fb06 e202 	mla	r2, r6, r2, lr
 80059ea:	fa13 f38a 	uxtah	r3, r3, sl
 80059ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059f2:	fa1f fa82 	uxth.w	sl, r2
 80059f6:	f8dc 2000 	ldr.w	r2, [ip]
 80059fa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80059fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a08:	4581      	cmp	r9, r0
 8005a0a:	f84c 3b04 	str.w	r3, [ip], #4
 8005a0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a12:	d2db      	bcs.n	80059cc <quorem+0x44>
 8005a14:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a18:	b92b      	cbnz	r3, 8005a26 <quorem+0x9e>
 8005a1a:	9b01      	ldr	r3, [sp, #4]
 8005a1c:	3b04      	subs	r3, #4
 8005a1e:	429d      	cmp	r5, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	d32e      	bcc.n	8005a82 <quorem+0xfa>
 8005a24:	613c      	str	r4, [r7, #16]
 8005a26:	4638      	mov	r0, r7
 8005a28:	f001 fade 	bl	8006fe8 <__mcmp>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	db24      	blt.n	8005a7a <quorem+0xf2>
 8005a30:	3601      	adds	r6, #1
 8005a32:	4628      	mov	r0, r5
 8005a34:	f04f 0c00 	mov.w	ip, #0
 8005a38:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a3c:	f8d0 e000 	ldr.w	lr, [r0]
 8005a40:	b293      	uxth	r3, r2
 8005a42:	ebac 0303 	sub.w	r3, ip, r3
 8005a46:	0c12      	lsrs	r2, r2, #16
 8005a48:	fa13 f38e 	uxtah	r3, r3, lr
 8005a4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a5a:	45c1      	cmp	r9, r8
 8005a5c:	f840 3b04 	str.w	r3, [r0], #4
 8005a60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a64:	d2e8      	bcs.n	8005a38 <quorem+0xb0>
 8005a66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a6e:	b922      	cbnz	r2, 8005a7a <quorem+0xf2>
 8005a70:	3b04      	subs	r3, #4
 8005a72:	429d      	cmp	r5, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	d30a      	bcc.n	8005a8e <quorem+0x106>
 8005a78:	613c      	str	r4, [r7, #16]
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	b003      	add	sp, #12
 8005a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	3b04      	subs	r3, #4
 8005a86:	2a00      	cmp	r2, #0
 8005a88:	d1cc      	bne.n	8005a24 <quorem+0x9c>
 8005a8a:	3c01      	subs	r4, #1
 8005a8c:	e7c7      	b.n	8005a1e <quorem+0x96>
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	3b04      	subs	r3, #4
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	d1f0      	bne.n	8005a78 <quorem+0xf0>
 8005a96:	3c01      	subs	r4, #1
 8005a98:	e7eb      	b.n	8005a72 <quorem+0xea>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	e7ee      	b.n	8005a7c <quorem+0xf4>
	...

08005aa0 <_dtoa_r>:
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	ed2d 8b02 	vpush	{d8}
 8005aa8:	ec57 6b10 	vmov	r6, r7, d0
 8005aac:	b095      	sub	sp, #84	; 0x54
 8005aae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ab0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ab4:	9105      	str	r1, [sp, #20]
 8005ab6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005aba:	4604      	mov	r4, r0
 8005abc:	9209      	str	r2, [sp, #36]	; 0x24
 8005abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ac0:	b975      	cbnz	r5, 8005ae0 <_dtoa_r+0x40>
 8005ac2:	2010      	movs	r0, #16
 8005ac4:	f000 fffc 	bl	8006ac0 <malloc>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6260      	str	r0, [r4, #36]	; 0x24
 8005acc:	b920      	cbnz	r0, 8005ad8 <_dtoa_r+0x38>
 8005ace:	4bb2      	ldr	r3, [pc, #712]	; (8005d98 <_dtoa_r+0x2f8>)
 8005ad0:	21ea      	movs	r1, #234	; 0xea
 8005ad2:	48b2      	ldr	r0, [pc, #712]	; (8005d9c <_dtoa_r+0x2fc>)
 8005ad4:	f001 fe02 	bl	80076dc <__assert_func>
 8005ad8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005adc:	6005      	str	r5, [r0, #0]
 8005ade:	60c5      	str	r5, [r0, #12]
 8005ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ae2:	6819      	ldr	r1, [r3, #0]
 8005ae4:	b151      	cbz	r1, 8005afc <_dtoa_r+0x5c>
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	604a      	str	r2, [r1, #4]
 8005aea:	2301      	movs	r3, #1
 8005aec:	4093      	lsls	r3, r2
 8005aee:	608b      	str	r3, [r1, #8]
 8005af0:	4620      	mov	r0, r4
 8005af2:	f001 f83b 	bl	8006b6c <_Bfree>
 8005af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	1e3b      	subs	r3, r7, #0
 8005afe:	bfb9      	ittee	lt
 8005b00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b04:	9303      	strlt	r3, [sp, #12]
 8005b06:	2300      	movge	r3, #0
 8005b08:	f8c8 3000 	strge.w	r3, [r8]
 8005b0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005b10:	4ba3      	ldr	r3, [pc, #652]	; (8005da0 <_dtoa_r+0x300>)
 8005b12:	bfbc      	itt	lt
 8005b14:	2201      	movlt	r2, #1
 8005b16:	f8c8 2000 	strlt.w	r2, [r8]
 8005b1a:	ea33 0309 	bics.w	r3, r3, r9
 8005b1e:	d11b      	bne.n	8005b58 <_dtoa_r+0xb8>
 8005b20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b22:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b2c:	4333      	orrs	r3, r6
 8005b2e:	f000 857a 	beq.w	8006626 <_dtoa_r+0xb86>
 8005b32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b34:	b963      	cbnz	r3, 8005b50 <_dtoa_r+0xb0>
 8005b36:	4b9b      	ldr	r3, [pc, #620]	; (8005da4 <_dtoa_r+0x304>)
 8005b38:	e024      	b.n	8005b84 <_dtoa_r+0xe4>
 8005b3a:	4b9b      	ldr	r3, [pc, #620]	; (8005da8 <_dtoa_r+0x308>)
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	9800      	ldr	r0, [sp, #0]
 8005b46:	b015      	add	sp, #84	; 0x54
 8005b48:	ecbd 8b02 	vpop	{d8}
 8005b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b50:	4b94      	ldr	r3, [pc, #592]	; (8005da4 <_dtoa_r+0x304>)
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	3303      	adds	r3, #3
 8005b56:	e7f3      	b.n	8005b40 <_dtoa_r+0xa0>
 8005b58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	ec51 0b17 	vmov	r0, r1, d7
 8005b62:	2300      	movs	r3, #0
 8005b64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005b68:	f7fa ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b6c:	4680      	mov	r8, r0
 8005b6e:	b158      	cbz	r0, 8005b88 <_dtoa_r+0xe8>
 8005b70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b72:	2301      	movs	r3, #1
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8551 	beq.w	8006620 <_dtoa_r+0xb80>
 8005b7e:	488b      	ldr	r0, [pc, #556]	; (8005dac <_dtoa_r+0x30c>)
 8005b80:	6018      	str	r0, [r3, #0]
 8005b82:	1e43      	subs	r3, r0, #1
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	e7dd      	b.n	8005b44 <_dtoa_r+0xa4>
 8005b88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005b8c:	aa12      	add	r2, sp, #72	; 0x48
 8005b8e:	a913      	add	r1, sp, #76	; 0x4c
 8005b90:	4620      	mov	r0, r4
 8005b92:	f001 facd 	bl	8007130 <__d2b>
 8005b96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b9a:	4683      	mov	fp, r0
 8005b9c:	2d00      	cmp	r5, #0
 8005b9e:	d07c      	beq.n	8005c9a <_dtoa_r+0x1fa>
 8005ba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ba2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005ba6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005baa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005bae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005bb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005bb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bba:	4b7d      	ldr	r3, [pc, #500]	; (8005db0 <_dtoa_r+0x310>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	f7fa fb61 	bl	8000288 <__aeabi_dsub>
 8005bc6:	a36e      	add	r3, pc, #440	; (adr r3, 8005d80 <_dtoa_r+0x2e0>)
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f7fa fd14 	bl	80005f8 <__aeabi_dmul>
 8005bd0:	a36d      	add	r3, pc, #436	; (adr r3, 8005d88 <_dtoa_r+0x2e8>)
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f7fa fb59 	bl	800028c <__adddf3>
 8005bda:	4606      	mov	r6, r0
 8005bdc:	4628      	mov	r0, r5
 8005bde:	460f      	mov	r7, r1
 8005be0:	f7fa fca0 	bl	8000524 <__aeabi_i2d>
 8005be4:	a36a      	add	r3, pc, #424	; (adr r3, 8005d90 <_dtoa_r+0x2f0>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f7fa fd05 	bl	80005f8 <__aeabi_dmul>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	f7fa fb49 	bl	800028c <__adddf3>
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	460f      	mov	r7, r1
 8005bfe:	f7fa ffab 	bl	8000b58 <__aeabi_d2iz>
 8005c02:	2200      	movs	r2, #0
 8005c04:	4682      	mov	sl, r0
 8005c06:	2300      	movs	r3, #0
 8005c08:	4630      	mov	r0, r6
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	f7fa ff66 	bl	8000adc <__aeabi_dcmplt>
 8005c10:	b148      	cbz	r0, 8005c26 <_dtoa_r+0x186>
 8005c12:	4650      	mov	r0, sl
 8005c14:	f7fa fc86 	bl	8000524 <__aeabi_i2d>
 8005c18:	4632      	mov	r2, r6
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	f7fa ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c20:	b908      	cbnz	r0, 8005c26 <_dtoa_r+0x186>
 8005c22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c26:	f1ba 0f16 	cmp.w	sl, #22
 8005c2a:	d854      	bhi.n	8005cd6 <_dtoa_r+0x236>
 8005c2c:	4b61      	ldr	r3, [pc, #388]	; (8005db4 <_dtoa_r+0x314>)
 8005c2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c3a:	f7fa ff4f 	bl	8000adc <__aeabi_dcmplt>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d04b      	beq.n	8005cda <_dtoa_r+0x23a>
 8005c42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c46:	2300      	movs	r3, #0
 8005c48:	930e      	str	r3, [sp, #56]	; 0x38
 8005c4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c4c:	1b5d      	subs	r5, r3, r5
 8005c4e:	1e6b      	subs	r3, r5, #1
 8005c50:	9304      	str	r3, [sp, #16]
 8005c52:	bf43      	ittte	mi
 8005c54:	2300      	movmi	r3, #0
 8005c56:	f1c5 0801 	rsbmi	r8, r5, #1
 8005c5a:	9304      	strmi	r3, [sp, #16]
 8005c5c:	f04f 0800 	movpl.w	r8, #0
 8005c60:	f1ba 0f00 	cmp.w	sl, #0
 8005c64:	db3b      	blt.n	8005cde <_dtoa_r+0x23e>
 8005c66:	9b04      	ldr	r3, [sp, #16]
 8005c68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005c6c:	4453      	add	r3, sl
 8005c6e:	9304      	str	r3, [sp, #16]
 8005c70:	2300      	movs	r3, #0
 8005c72:	9306      	str	r3, [sp, #24]
 8005c74:	9b05      	ldr	r3, [sp, #20]
 8005c76:	2b09      	cmp	r3, #9
 8005c78:	d869      	bhi.n	8005d4e <_dtoa_r+0x2ae>
 8005c7a:	2b05      	cmp	r3, #5
 8005c7c:	bfc4      	itt	gt
 8005c7e:	3b04      	subgt	r3, #4
 8005c80:	9305      	strgt	r3, [sp, #20]
 8005c82:	9b05      	ldr	r3, [sp, #20]
 8005c84:	f1a3 0302 	sub.w	r3, r3, #2
 8005c88:	bfcc      	ite	gt
 8005c8a:	2500      	movgt	r5, #0
 8005c8c:	2501      	movle	r5, #1
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d869      	bhi.n	8005d66 <_dtoa_r+0x2c6>
 8005c92:	e8df f003 	tbb	[pc, r3]
 8005c96:	4e2c      	.short	0x4e2c
 8005c98:	5a4c      	.short	0x5a4c
 8005c9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005c9e:	441d      	add	r5, r3
 8005ca0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	bfc1      	itttt	gt
 8005ca8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005cb0:	fa09 f303 	lslgt.w	r3, r9, r3
 8005cb4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005cb8:	bfda      	itte	le
 8005cba:	f1c3 0320 	rsble	r3, r3, #32
 8005cbe:	fa06 f003 	lslle.w	r0, r6, r3
 8005cc2:	4318      	orrgt	r0, r3
 8005cc4:	f7fa fc1e 	bl	8000504 <__aeabi_ui2d>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	4606      	mov	r6, r0
 8005ccc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005cd0:	3d01      	subs	r5, #1
 8005cd2:	9310      	str	r3, [sp, #64]	; 0x40
 8005cd4:	e771      	b.n	8005bba <_dtoa_r+0x11a>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e7b6      	b.n	8005c48 <_dtoa_r+0x1a8>
 8005cda:	900e      	str	r0, [sp, #56]	; 0x38
 8005cdc:	e7b5      	b.n	8005c4a <_dtoa_r+0x1aa>
 8005cde:	f1ca 0300 	rsb	r3, sl, #0
 8005ce2:	9306      	str	r3, [sp, #24]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	eba8 080a 	sub.w	r8, r8, sl
 8005cea:	930d      	str	r3, [sp, #52]	; 0x34
 8005cec:	e7c2      	b.n	8005c74 <_dtoa_r+0x1d4>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	9308      	str	r3, [sp, #32]
 8005cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	dc39      	bgt.n	8005d6c <_dtoa_r+0x2cc>
 8005cf8:	f04f 0901 	mov.w	r9, #1
 8005cfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d00:	464b      	mov	r3, r9
 8005d02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005d06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d08:	2200      	movs	r2, #0
 8005d0a:	6042      	str	r2, [r0, #4]
 8005d0c:	2204      	movs	r2, #4
 8005d0e:	f102 0614 	add.w	r6, r2, #20
 8005d12:	429e      	cmp	r6, r3
 8005d14:	6841      	ldr	r1, [r0, #4]
 8005d16:	d92f      	bls.n	8005d78 <_dtoa_r+0x2d8>
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 fee7 	bl	8006aec <_Balloc>
 8005d1e:	9000      	str	r0, [sp, #0]
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d14b      	bne.n	8005dbc <_dtoa_r+0x31c>
 8005d24:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <_dtoa_r+0x318>)
 8005d26:	4602      	mov	r2, r0
 8005d28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d2c:	e6d1      	b.n	8005ad2 <_dtoa_r+0x32>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e7de      	b.n	8005cf0 <_dtoa_r+0x250>
 8005d32:	2300      	movs	r3, #0
 8005d34:	9308      	str	r3, [sp, #32]
 8005d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d38:	eb0a 0903 	add.w	r9, sl, r3
 8005d3c:	f109 0301 	add.w	r3, r9, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	9301      	str	r3, [sp, #4]
 8005d44:	bfb8      	it	lt
 8005d46:	2301      	movlt	r3, #1
 8005d48:	e7dd      	b.n	8005d06 <_dtoa_r+0x266>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e7f2      	b.n	8005d34 <_dtoa_r+0x294>
 8005d4e:	2501      	movs	r5, #1
 8005d50:	2300      	movs	r3, #0
 8005d52:	9305      	str	r3, [sp, #20]
 8005d54:	9508      	str	r5, [sp, #32]
 8005d56:	f04f 39ff 	mov.w	r9, #4294967295
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d60:	2312      	movs	r3, #18
 8005d62:	9209      	str	r2, [sp, #36]	; 0x24
 8005d64:	e7cf      	b.n	8005d06 <_dtoa_r+0x266>
 8005d66:	2301      	movs	r3, #1
 8005d68:	9308      	str	r3, [sp, #32]
 8005d6a:	e7f4      	b.n	8005d56 <_dtoa_r+0x2b6>
 8005d6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005d70:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d74:	464b      	mov	r3, r9
 8005d76:	e7c6      	b.n	8005d06 <_dtoa_r+0x266>
 8005d78:	3101      	adds	r1, #1
 8005d7a:	6041      	str	r1, [r0, #4]
 8005d7c:	0052      	lsls	r2, r2, #1
 8005d7e:	e7c6      	b.n	8005d0e <_dtoa_r+0x26e>
 8005d80:	636f4361 	.word	0x636f4361
 8005d84:	3fd287a7 	.word	0x3fd287a7
 8005d88:	8b60c8b3 	.word	0x8b60c8b3
 8005d8c:	3fc68a28 	.word	0x3fc68a28
 8005d90:	509f79fb 	.word	0x509f79fb
 8005d94:	3fd34413 	.word	0x3fd34413
 8005d98:	080079c9 	.word	0x080079c9
 8005d9c:	080079e0 	.word	0x080079e0
 8005da0:	7ff00000 	.word	0x7ff00000
 8005da4:	080079c5 	.word	0x080079c5
 8005da8:	080079bc 	.word	0x080079bc
 8005dac:	08007999 	.word	0x08007999
 8005db0:	3ff80000 	.word	0x3ff80000
 8005db4:	08007b38 	.word	0x08007b38
 8005db8:	08007a3f 	.word	0x08007a3f
 8005dbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dbe:	9a00      	ldr	r2, [sp, #0]
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	9b01      	ldr	r3, [sp, #4]
 8005dc4:	2b0e      	cmp	r3, #14
 8005dc6:	f200 80ad 	bhi.w	8005f24 <_dtoa_r+0x484>
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	f000 80aa 	beq.w	8005f24 <_dtoa_r+0x484>
 8005dd0:	f1ba 0f00 	cmp.w	sl, #0
 8005dd4:	dd36      	ble.n	8005e44 <_dtoa_r+0x3a4>
 8005dd6:	4ac3      	ldr	r2, [pc, #780]	; (80060e4 <_dtoa_r+0x644>)
 8005dd8:	f00a 030f 	and.w	r3, sl, #15
 8005ddc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005de0:	ed93 7b00 	vldr	d7, [r3]
 8005de4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005de8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005dec:	eeb0 8a47 	vmov.f32	s16, s14
 8005df0:	eef0 8a67 	vmov.f32	s17, s15
 8005df4:	d016      	beq.n	8005e24 <_dtoa_r+0x384>
 8005df6:	4bbc      	ldr	r3, [pc, #752]	; (80060e8 <_dtoa_r+0x648>)
 8005df8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e00:	f7fa fd24 	bl	800084c <__aeabi_ddiv>
 8005e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e08:	f007 070f 	and.w	r7, r7, #15
 8005e0c:	2503      	movs	r5, #3
 8005e0e:	4eb6      	ldr	r6, [pc, #728]	; (80060e8 <_dtoa_r+0x648>)
 8005e10:	b957      	cbnz	r7, 8005e28 <_dtoa_r+0x388>
 8005e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e16:	ec53 2b18 	vmov	r2, r3, d8
 8005e1a:	f7fa fd17 	bl	800084c <__aeabi_ddiv>
 8005e1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e22:	e029      	b.n	8005e78 <_dtoa_r+0x3d8>
 8005e24:	2502      	movs	r5, #2
 8005e26:	e7f2      	b.n	8005e0e <_dtoa_r+0x36e>
 8005e28:	07f9      	lsls	r1, r7, #31
 8005e2a:	d508      	bpl.n	8005e3e <_dtoa_r+0x39e>
 8005e2c:	ec51 0b18 	vmov	r0, r1, d8
 8005e30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e34:	f7fa fbe0 	bl	80005f8 <__aeabi_dmul>
 8005e38:	ec41 0b18 	vmov	d8, r0, r1
 8005e3c:	3501      	adds	r5, #1
 8005e3e:	107f      	asrs	r7, r7, #1
 8005e40:	3608      	adds	r6, #8
 8005e42:	e7e5      	b.n	8005e10 <_dtoa_r+0x370>
 8005e44:	f000 80a6 	beq.w	8005f94 <_dtoa_r+0x4f4>
 8005e48:	f1ca 0600 	rsb	r6, sl, #0
 8005e4c:	4ba5      	ldr	r3, [pc, #660]	; (80060e4 <_dtoa_r+0x644>)
 8005e4e:	4fa6      	ldr	r7, [pc, #664]	; (80060e8 <_dtoa_r+0x648>)
 8005e50:	f006 020f 	and.w	r2, r6, #15
 8005e54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e60:	f7fa fbca 	bl	80005f8 <__aeabi_dmul>
 8005e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e68:	1136      	asrs	r6, r6, #4
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2502      	movs	r5, #2
 8005e6e:	2e00      	cmp	r6, #0
 8005e70:	f040 8085 	bne.w	8005f7e <_dtoa_r+0x4de>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1d2      	bne.n	8005e1e <_dtoa_r+0x37e>
 8005e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 808c 	beq.w	8005f98 <_dtoa_r+0x4f8>
 8005e80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e84:	4b99      	ldr	r3, [pc, #612]	; (80060ec <_dtoa_r+0x64c>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	4630      	mov	r0, r6
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	f7fa fe26 	bl	8000adc <__aeabi_dcmplt>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	f000 8081 	beq.w	8005f98 <_dtoa_r+0x4f8>
 8005e96:	9b01      	ldr	r3, [sp, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d07d      	beq.n	8005f98 <_dtoa_r+0x4f8>
 8005e9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ea0:	dd3c      	ble.n	8005f1c <_dtoa_r+0x47c>
 8005ea2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005ea6:	9307      	str	r3, [sp, #28]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4b91      	ldr	r3, [pc, #580]	; (80060f0 <_dtoa_r+0x650>)
 8005eac:	4630      	mov	r0, r6
 8005eae:	4639      	mov	r1, r7
 8005eb0:	f7fa fba2 	bl	80005f8 <__aeabi_dmul>
 8005eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eb8:	3501      	adds	r5, #1
 8005eba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005ebe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f7fa fb2e 	bl	8000524 <__aeabi_i2d>
 8005ec8:	4632      	mov	r2, r6
 8005eca:	463b      	mov	r3, r7
 8005ecc:	f7fa fb94 	bl	80005f8 <__aeabi_dmul>
 8005ed0:	4b88      	ldr	r3, [pc, #544]	; (80060f4 <_dtoa_r+0x654>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f7fa f9da 	bl	800028c <__adddf3>
 8005ed8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ee0:	9303      	str	r3, [sp, #12]
 8005ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d15c      	bne.n	8005fa2 <_dtoa_r+0x502>
 8005ee8:	4b83      	ldr	r3, [pc, #524]	; (80060f8 <_dtoa_r+0x658>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	4630      	mov	r0, r6
 8005eee:	4639      	mov	r1, r7
 8005ef0:	f7fa f9ca 	bl	8000288 <__aeabi_dsub>
 8005ef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ef8:	4606      	mov	r6, r0
 8005efa:	460f      	mov	r7, r1
 8005efc:	f7fa fe0c 	bl	8000b18 <__aeabi_dcmpgt>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	f040 8296 	bne.w	8006432 <_dtoa_r+0x992>
 8005f06:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f10:	4639      	mov	r1, r7
 8005f12:	f7fa fde3 	bl	8000adc <__aeabi_dcmplt>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f040 8288 	bne.w	800642c <_dtoa_r+0x98c>
 8005f1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f2c0 8158 	blt.w	80061dc <_dtoa_r+0x73c>
 8005f2c:	f1ba 0f0e 	cmp.w	sl, #14
 8005f30:	f300 8154 	bgt.w	80061dc <_dtoa_r+0x73c>
 8005f34:	4b6b      	ldr	r3, [pc, #428]	; (80060e4 <_dtoa_r+0x644>)
 8005f36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f280 80e3 	bge.w	800610c <_dtoa_r+0x66c>
 8005f46:	9b01      	ldr	r3, [sp, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f300 80df 	bgt.w	800610c <_dtoa_r+0x66c>
 8005f4e:	f040 826d 	bne.w	800642c <_dtoa_r+0x98c>
 8005f52:	4b69      	ldr	r3, [pc, #420]	; (80060f8 <_dtoa_r+0x658>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	4640      	mov	r0, r8
 8005f58:	4649      	mov	r1, r9
 8005f5a:	f7fa fb4d 	bl	80005f8 <__aeabi_dmul>
 8005f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f62:	f7fa fdcf 	bl	8000b04 <__aeabi_dcmpge>
 8005f66:	9e01      	ldr	r6, [sp, #4]
 8005f68:	4637      	mov	r7, r6
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	f040 8243 	bne.w	80063f6 <_dtoa_r+0x956>
 8005f70:	9d00      	ldr	r5, [sp, #0]
 8005f72:	2331      	movs	r3, #49	; 0x31
 8005f74:	f805 3b01 	strb.w	r3, [r5], #1
 8005f78:	f10a 0a01 	add.w	sl, sl, #1
 8005f7c:	e23f      	b.n	80063fe <_dtoa_r+0x95e>
 8005f7e:	07f2      	lsls	r2, r6, #31
 8005f80:	d505      	bpl.n	8005f8e <_dtoa_r+0x4ee>
 8005f82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f86:	f7fa fb37 	bl	80005f8 <__aeabi_dmul>
 8005f8a:	3501      	adds	r5, #1
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	1076      	asrs	r6, r6, #1
 8005f90:	3708      	adds	r7, #8
 8005f92:	e76c      	b.n	8005e6e <_dtoa_r+0x3ce>
 8005f94:	2502      	movs	r5, #2
 8005f96:	e76f      	b.n	8005e78 <_dtoa_r+0x3d8>
 8005f98:	9b01      	ldr	r3, [sp, #4]
 8005f9a:	f8cd a01c 	str.w	sl, [sp, #28]
 8005f9e:	930c      	str	r3, [sp, #48]	; 0x30
 8005fa0:	e78d      	b.n	8005ebe <_dtoa_r+0x41e>
 8005fa2:	9900      	ldr	r1, [sp, #0]
 8005fa4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005fa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fa8:	4b4e      	ldr	r3, [pc, #312]	; (80060e4 <_dtoa_r+0x644>)
 8005faa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fae:	4401      	add	r1, r0
 8005fb0:	9102      	str	r1, [sp, #8]
 8005fb2:	9908      	ldr	r1, [sp, #32]
 8005fb4:	eeb0 8a47 	vmov.f32	s16, s14
 8005fb8:	eef0 8a67 	vmov.f32	s17, s15
 8005fbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fc4:	2900      	cmp	r1, #0
 8005fc6:	d045      	beq.n	8006054 <_dtoa_r+0x5b4>
 8005fc8:	494c      	ldr	r1, [pc, #304]	; (80060fc <_dtoa_r+0x65c>)
 8005fca:	2000      	movs	r0, #0
 8005fcc:	f7fa fc3e 	bl	800084c <__aeabi_ddiv>
 8005fd0:	ec53 2b18 	vmov	r2, r3, d8
 8005fd4:	f7fa f958 	bl	8000288 <__aeabi_dsub>
 8005fd8:	9d00      	ldr	r5, [sp, #0]
 8005fda:	ec41 0b18 	vmov	d8, r0, r1
 8005fde:	4639      	mov	r1, r7
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f7fa fdb9 	bl	8000b58 <__aeabi_d2iz>
 8005fe6:	900c      	str	r0, [sp, #48]	; 0x30
 8005fe8:	f7fa fa9c 	bl	8000524 <__aeabi_i2d>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	f7fa f948 	bl	8000288 <__aeabi_dsub>
 8005ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ffa:	3330      	adds	r3, #48	; 0x30
 8005ffc:	f805 3b01 	strb.w	r3, [r5], #1
 8006000:	ec53 2b18 	vmov	r2, r3, d8
 8006004:	4606      	mov	r6, r0
 8006006:	460f      	mov	r7, r1
 8006008:	f7fa fd68 	bl	8000adc <__aeabi_dcmplt>
 800600c:	2800      	cmp	r0, #0
 800600e:	d165      	bne.n	80060dc <_dtoa_r+0x63c>
 8006010:	4632      	mov	r2, r6
 8006012:	463b      	mov	r3, r7
 8006014:	4935      	ldr	r1, [pc, #212]	; (80060ec <_dtoa_r+0x64c>)
 8006016:	2000      	movs	r0, #0
 8006018:	f7fa f936 	bl	8000288 <__aeabi_dsub>
 800601c:	ec53 2b18 	vmov	r2, r3, d8
 8006020:	f7fa fd5c 	bl	8000adc <__aeabi_dcmplt>
 8006024:	2800      	cmp	r0, #0
 8006026:	f040 80b9 	bne.w	800619c <_dtoa_r+0x6fc>
 800602a:	9b02      	ldr	r3, [sp, #8]
 800602c:	429d      	cmp	r5, r3
 800602e:	f43f af75 	beq.w	8005f1c <_dtoa_r+0x47c>
 8006032:	4b2f      	ldr	r3, [pc, #188]	; (80060f0 <_dtoa_r+0x650>)
 8006034:	ec51 0b18 	vmov	r0, r1, d8
 8006038:	2200      	movs	r2, #0
 800603a:	f7fa fadd 	bl	80005f8 <__aeabi_dmul>
 800603e:	4b2c      	ldr	r3, [pc, #176]	; (80060f0 <_dtoa_r+0x650>)
 8006040:	ec41 0b18 	vmov	d8, r0, r1
 8006044:	2200      	movs	r2, #0
 8006046:	4630      	mov	r0, r6
 8006048:	4639      	mov	r1, r7
 800604a:	f7fa fad5 	bl	80005f8 <__aeabi_dmul>
 800604e:	4606      	mov	r6, r0
 8006050:	460f      	mov	r7, r1
 8006052:	e7c4      	b.n	8005fde <_dtoa_r+0x53e>
 8006054:	ec51 0b17 	vmov	r0, r1, d7
 8006058:	f7fa face 	bl	80005f8 <__aeabi_dmul>
 800605c:	9b02      	ldr	r3, [sp, #8]
 800605e:	9d00      	ldr	r5, [sp, #0]
 8006060:	930c      	str	r3, [sp, #48]	; 0x30
 8006062:	ec41 0b18 	vmov	d8, r0, r1
 8006066:	4639      	mov	r1, r7
 8006068:	4630      	mov	r0, r6
 800606a:	f7fa fd75 	bl	8000b58 <__aeabi_d2iz>
 800606e:	9011      	str	r0, [sp, #68]	; 0x44
 8006070:	f7fa fa58 	bl	8000524 <__aeabi_i2d>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4630      	mov	r0, r6
 800607a:	4639      	mov	r1, r7
 800607c:	f7fa f904 	bl	8000288 <__aeabi_dsub>
 8006080:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006082:	3330      	adds	r3, #48	; 0x30
 8006084:	f805 3b01 	strb.w	r3, [r5], #1
 8006088:	9b02      	ldr	r3, [sp, #8]
 800608a:	429d      	cmp	r5, r3
 800608c:	4606      	mov	r6, r0
 800608e:	460f      	mov	r7, r1
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	d134      	bne.n	8006100 <_dtoa_r+0x660>
 8006096:	4b19      	ldr	r3, [pc, #100]	; (80060fc <_dtoa_r+0x65c>)
 8006098:	ec51 0b18 	vmov	r0, r1, d8
 800609c:	f7fa f8f6 	bl	800028c <__adddf3>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4630      	mov	r0, r6
 80060a6:	4639      	mov	r1, r7
 80060a8:	f7fa fd36 	bl	8000b18 <__aeabi_dcmpgt>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d175      	bne.n	800619c <_dtoa_r+0x6fc>
 80060b0:	ec53 2b18 	vmov	r2, r3, d8
 80060b4:	4911      	ldr	r1, [pc, #68]	; (80060fc <_dtoa_r+0x65c>)
 80060b6:	2000      	movs	r0, #0
 80060b8:	f7fa f8e6 	bl	8000288 <__aeabi_dsub>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4630      	mov	r0, r6
 80060c2:	4639      	mov	r1, r7
 80060c4:	f7fa fd0a 	bl	8000adc <__aeabi_dcmplt>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	f43f af27 	beq.w	8005f1c <_dtoa_r+0x47c>
 80060ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060d0:	1e6b      	subs	r3, r5, #1
 80060d2:	930c      	str	r3, [sp, #48]	; 0x30
 80060d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060d8:	2b30      	cmp	r3, #48	; 0x30
 80060da:	d0f8      	beq.n	80060ce <_dtoa_r+0x62e>
 80060dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80060e0:	e04a      	b.n	8006178 <_dtoa_r+0x6d8>
 80060e2:	bf00      	nop
 80060e4:	08007b38 	.word	0x08007b38
 80060e8:	08007b10 	.word	0x08007b10
 80060ec:	3ff00000 	.word	0x3ff00000
 80060f0:	40240000 	.word	0x40240000
 80060f4:	401c0000 	.word	0x401c0000
 80060f8:	40140000 	.word	0x40140000
 80060fc:	3fe00000 	.word	0x3fe00000
 8006100:	4baf      	ldr	r3, [pc, #700]	; (80063c0 <_dtoa_r+0x920>)
 8006102:	f7fa fa79 	bl	80005f8 <__aeabi_dmul>
 8006106:	4606      	mov	r6, r0
 8006108:	460f      	mov	r7, r1
 800610a:	e7ac      	b.n	8006066 <_dtoa_r+0x5c6>
 800610c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006110:	9d00      	ldr	r5, [sp, #0]
 8006112:	4642      	mov	r2, r8
 8006114:	464b      	mov	r3, r9
 8006116:	4630      	mov	r0, r6
 8006118:	4639      	mov	r1, r7
 800611a:	f7fa fb97 	bl	800084c <__aeabi_ddiv>
 800611e:	f7fa fd1b 	bl	8000b58 <__aeabi_d2iz>
 8006122:	9002      	str	r0, [sp, #8]
 8006124:	f7fa f9fe 	bl	8000524 <__aeabi_i2d>
 8006128:	4642      	mov	r2, r8
 800612a:	464b      	mov	r3, r9
 800612c:	f7fa fa64 	bl	80005f8 <__aeabi_dmul>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4630      	mov	r0, r6
 8006136:	4639      	mov	r1, r7
 8006138:	f7fa f8a6 	bl	8000288 <__aeabi_dsub>
 800613c:	9e02      	ldr	r6, [sp, #8]
 800613e:	9f01      	ldr	r7, [sp, #4]
 8006140:	3630      	adds	r6, #48	; 0x30
 8006142:	f805 6b01 	strb.w	r6, [r5], #1
 8006146:	9e00      	ldr	r6, [sp, #0]
 8006148:	1bae      	subs	r6, r5, r6
 800614a:	42b7      	cmp	r7, r6
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	d137      	bne.n	80061c2 <_dtoa_r+0x722>
 8006152:	f7fa f89b 	bl	800028c <__adddf3>
 8006156:	4642      	mov	r2, r8
 8006158:	464b      	mov	r3, r9
 800615a:	4606      	mov	r6, r0
 800615c:	460f      	mov	r7, r1
 800615e:	f7fa fcdb 	bl	8000b18 <__aeabi_dcmpgt>
 8006162:	b9c8      	cbnz	r0, 8006198 <_dtoa_r+0x6f8>
 8006164:	4642      	mov	r2, r8
 8006166:	464b      	mov	r3, r9
 8006168:	4630      	mov	r0, r6
 800616a:	4639      	mov	r1, r7
 800616c:	f7fa fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 8006170:	b110      	cbz	r0, 8006178 <_dtoa_r+0x6d8>
 8006172:	9b02      	ldr	r3, [sp, #8]
 8006174:	07d9      	lsls	r1, r3, #31
 8006176:	d40f      	bmi.n	8006198 <_dtoa_r+0x6f8>
 8006178:	4620      	mov	r0, r4
 800617a:	4659      	mov	r1, fp
 800617c:	f000 fcf6 	bl	8006b6c <_Bfree>
 8006180:	2300      	movs	r3, #0
 8006182:	702b      	strb	r3, [r5, #0]
 8006184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006186:	f10a 0001 	add.w	r0, sl, #1
 800618a:	6018      	str	r0, [r3, #0]
 800618c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800618e:	2b00      	cmp	r3, #0
 8006190:	f43f acd8 	beq.w	8005b44 <_dtoa_r+0xa4>
 8006194:	601d      	str	r5, [r3, #0]
 8006196:	e4d5      	b.n	8005b44 <_dtoa_r+0xa4>
 8006198:	f8cd a01c 	str.w	sl, [sp, #28]
 800619c:	462b      	mov	r3, r5
 800619e:	461d      	mov	r5, r3
 80061a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061a4:	2a39      	cmp	r2, #57	; 0x39
 80061a6:	d108      	bne.n	80061ba <_dtoa_r+0x71a>
 80061a8:	9a00      	ldr	r2, [sp, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d1f7      	bne.n	800619e <_dtoa_r+0x6fe>
 80061ae:	9a07      	ldr	r2, [sp, #28]
 80061b0:	9900      	ldr	r1, [sp, #0]
 80061b2:	3201      	adds	r2, #1
 80061b4:	9207      	str	r2, [sp, #28]
 80061b6:	2230      	movs	r2, #48	; 0x30
 80061b8:	700a      	strb	r2, [r1, #0]
 80061ba:	781a      	ldrb	r2, [r3, #0]
 80061bc:	3201      	adds	r2, #1
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	e78c      	b.n	80060dc <_dtoa_r+0x63c>
 80061c2:	4b7f      	ldr	r3, [pc, #508]	; (80063c0 <_dtoa_r+0x920>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	f7fa fa17 	bl	80005f8 <__aeabi_dmul>
 80061ca:	2200      	movs	r2, #0
 80061cc:	2300      	movs	r3, #0
 80061ce:	4606      	mov	r6, r0
 80061d0:	460f      	mov	r7, r1
 80061d2:	f7fa fc79 	bl	8000ac8 <__aeabi_dcmpeq>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	d09b      	beq.n	8006112 <_dtoa_r+0x672>
 80061da:	e7cd      	b.n	8006178 <_dtoa_r+0x6d8>
 80061dc:	9a08      	ldr	r2, [sp, #32]
 80061de:	2a00      	cmp	r2, #0
 80061e0:	f000 80c4 	beq.w	800636c <_dtoa_r+0x8cc>
 80061e4:	9a05      	ldr	r2, [sp, #20]
 80061e6:	2a01      	cmp	r2, #1
 80061e8:	f300 80a8 	bgt.w	800633c <_dtoa_r+0x89c>
 80061ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061ee:	2a00      	cmp	r2, #0
 80061f0:	f000 80a0 	beq.w	8006334 <_dtoa_r+0x894>
 80061f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061f8:	9e06      	ldr	r6, [sp, #24]
 80061fa:	4645      	mov	r5, r8
 80061fc:	9a04      	ldr	r2, [sp, #16]
 80061fe:	2101      	movs	r1, #1
 8006200:	441a      	add	r2, r3
 8006202:	4620      	mov	r0, r4
 8006204:	4498      	add	r8, r3
 8006206:	9204      	str	r2, [sp, #16]
 8006208:	f000 fd6c 	bl	8006ce4 <__i2b>
 800620c:	4607      	mov	r7, r0
 800620e:	2d00      	cmp	r5, #0
 8006210:	dd0b      	ble.n	800622a <_dtoa_r+0x78a>
 8006212:	9b04      	ldr	r3, [sp, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	dd08      	ble.n	800622a <_dtoa_r+0x78a>
 8006218:	42ab      	cmp	r3, r5
 800621a:	9a04      	ldr	r2, [sp, #16]
 800621c:	bfa8      	it	ge
 800621e:	462b      	movge	r3, r5
 8006220:	eba8 0803 	sub.w	r8, r8, r3
 8006224:	1aed      	subs	r5, r5, r3
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	9304      	str	r3, [sp, #16]
 800622a:	9b06      	ldr	r3, [sp, #24]
 800622c:	b1fb      	cbz	r3, 800626e <_dtoa_r+0x7ce>
 800622e:	9b08      	ldr	r3, [sp, #32]
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 809f 	beq.w	8006374 <_dtoa_r+0x8d4>
 8006236:	2e00      	cmp	r6, #0
 8006238:	dd11      	ble.n	800625e <_dtoa_r+0x7be>
 800623a:	4639      	mov	r1, r7
 800623c:	4632      	mov	r2, r6
 800623e:	4620      	mov	r0, r4
 8006240:	f000 fe0c 	bl	8006e5c <__pow5mult>
 8006244:	465a      	mov	r2, fp
 8006246:	4601      	mov	r1, r0
 8006248:	4607      	mov	r7, r0
 800624a:	4620      	mov	r0, r4
 800624c:	f000 fd60 	bl	8006d10 <__multiply>
 8006250:	4659      	mov	r1, fp
 8006252:	9007      	str	r0, [sp, #28]
 8006254:	4620      	mov	r0, r4
 8006256:	f000 fc89 	bl	8006b6c <_Bfree>
 800625a:	9b07      	ldr	r3, [sp, #28]
 800625c:	469b      	mov	fp, r3
 800625e:	9b06      	ldr	r3, [sp, #24]
 8006260:	1b9a      	subs	r2, r3, r6
 8006262:	d004      	beq.n	800626e <_dtoa_r+0x7ce>
 8006264:	4659      	mov	r1, fp
 8006266:	4620      	mov	r0, r4
 8006268:	f000 fdf8 	bl	8006e5c <__pow5mult>
 800626c:	4683      	mov	fp, r0
 800626e:	2101      	movs	r1, #1
 8006270:	4620      	mov	r0, r4
 8006272:	f000 fd37 	bl	8006ce4 <__i2b>
 8006276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006278:	2b00      	cmp	r3, #0
 800627a:	4606      	mov	r6, r0
 800627c:	dd7c      	ble.n	8006378 <_dtoa_r+0x8d8>
 800627e:	461a      	mov	r2, r3
 8006280:	4601      	mov	r1, r0
 8006282:	4620      	mov	r0, r4
 8006284:	f000 fdea 	bl	8006e5c <__pow5mult>
 8006288:	9b05      	ldr	r3, [sp, #20]
 800628a:	2b01      	cmp	r3, #1
 800628c:	4606      	mov	r6, r0
 800628e:	dd76      	ble.n	800637e <_dtoa_r+0x8de>
 8006290:	2300      	movs	r3, #0
 8006292:	9306      	str	r3, [sp, #24]
 8006294:	6933      	ldr	r3, [r6, #16]
 8006296:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800629a:	6918      	ldr	r0, [r3, #16]
 800629c:	f000 fcd2 	bl	8006c44 <__hi0bits>
 80062a0:	f1c0 0020 	rsb	r0, r0, #32
 80062a4:	9b04      	ldr	r3, [sp, #16]
 80062a6:	4418      	add	r0, r3
 80062a8:	f010 001f 	ands.w	r0, r0, #31
 80062ac:	f000 8086 	beq.w	80063bc <_dtoa_r+0x91c>
 80062b0:	f1c0 0320 	rsb	r3, r0, #32
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	dd7f      	ble.n	80063b8 <_dtoa_r+0x918>
 80062b8:	f1c0 001c 	rsb	r0, r0, #28
 80062bc:	9b04      	ldr	r3, [sp, #16]
 80062be:	4403      	add	r3, r0
 80062c0:	4480      	add	r8, r0
 80062c2:	4405      	add	r5, r0
 80062c4:	9304      	str	r3, [sp, #16]
 80062c6:	f1b8 0f00 	cmp.w	r8, #0
 80062ca:	dd05      	ble.n	80062d8 <_dtoa_r+0x838>
 80062cc:	4659      	mov	r1, fp
 80062ce:	4642      	mov	r2, r8
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 fe1d 	bl	8006f10 <__lshift>
 80062d6:	4683      	mov	fp, r0
 80062d8:	9b04      	ldr	r3, [sp, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	dd05      	ble.n	80062ea <_dtoa_r+0x84a>
 80062de:	4631      	mov	r1, r6
 80062e0:	461a      	mov	r2, r3
 80062e2:	4620      	mov	r0, r4
 80062e4:	f000 fe14 	bl	8006f10 <__lshift>
 80062e8:	4606      	mov	r6, r0
 80062ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d069      	beq.n	80063c4 <_dtoa_r+0x924>
 80062f0:	4631      	mov	r1, r6
 80062f2:	4658      	mov	r0, fp
 80062f4:	f000 fe78 	bl	8006fe8 <__mcmp>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	da63      	bge.n	80063c4 <_dtoa_r+0x924>
 80062fc:	2300      	movs	r3, #0
 80062fe:	4659      	mov	r1, fp
 8006300:	220a      	movs	r2, #10
 8006302:	4620      	mov	r0, r4
 8006304:	f000 fc54 	bl	8006bb0 <__multadd>
 8006308:	9b08      	ldr	r3, [sp, #32]
 800630a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800630e:	4683      	mov	fp, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 818f 	beq.w	8006634 <_dtoa_r+0xb94>
 8006316:	4639      	mov	r1, r7
 8006318:	2300      	movs	r3, #0
 800631a:	220a      	movs	r2, #10
 800631c:	4620      	mov	r0, r4
 800631e:	f000 fc47 	bl	8006bb0 <__multadd>
 8006322:	f1b9 0f00 	cmp.w	r9, #0
 8006326:	4607      	mov	r7, r0
 8006328:	f300 808e 	bgt.w	8006448 <_dtoa_r+0x9a8>
 800632c:	9b05      	ldr	r3, [sp, #20]
 800632e:	2b02      	cmp	r3, #2
 8006330:	dc50      	bgt.n	80063d4 <_dtoa_r+0x934>
 8006332:	e089      	b.n	8006448 <_dtoa_r+0x9a8>
 8006334:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800633a:	e75d      	b.n	80061f8 <_dtoa_r+0x758>
 800633c:	9b01      	ldr	r3, [sp, #4]
 800633e:	1e5e      	subs	r6, r3, #1
 8006340:	9b06      	ldr	r3, [sp, #24]
 8006342:	42b3      	cmp	r3, r6
 8006344:	bfbf      	itttt	lt
 8006346:	9b06      	ldrlt	r3, [sp, #24]
 8006348:	9606      	strlt	r6, [sp, #24]
 800634a:	1af2      	sublt	r2, r6, r3
 800634c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800634e:	bfb6      	itet	lt
 8006350:	189b      	addlt	r3, r3, r2
 8006352:	1b9e      	subge	r6, r3, r6
 8006354:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006356:	9b01      	ldr	r3, [sp, #4]
 8006358:	bfb8      	it	lt
 800635a:	2600      	movlt	r6, #0
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfb5      	itete	lt
 8006360:	eba8 0503 	sublt.w	r5, r8, r3
 8006364:	9b01      	ldrge	r3, [sp, #4]
 8006366:	2300      	movlt	r3, #0
 8006368:	4645      	movge	r5, r8
 800636a:	e747      	b.n	80061fc <_dtoa_r+0x75c>
 800636c:	9e06      	ldr	r6, [sp, #24]
 800636e:	9f08      	ldr	r7, [sp, #32]
 8006370:	4645      	mov	r5, r8
 8006372:	e74c      	b.n	800620e <_dtoa_r+0x76e>
 8006374:	9a06      	ldr	r2, [sp, #24]
 8006376:	e775      	b.n	8006264 <_dtoa_r+0x7c4>
 8006378:	9b05      	ldr	r3, [sp, #20]
 800637a:	2b01      	cmp	r3, #1
 800637c:	dc18      	bgt.n	80063b0 <_dtoa_r+0x910>
 800637e:	9b02      	ldr	r3, [sp, #8]
 8006380:	b9b3      	cbnz	r3, 80063b0 <_dtoa_r+0x910>
 8006382:	9b03      	ldr	r3, [sp, #12]
 8006384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006388:	b9a3      	cbnz	r3, 80063b4 <_dtoa_r+0x914>
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006390:	0d1b      	lsrs	r3, r3, #20
 8006392:	051b      	lsls	r3, r3, #20
 8006394:	b12b      	cbz	r3, 80063a2 <_dtoa_r+0x902>
 8006396:	9b04      	ldr	r3, [sp, #16]
 8006398:	3301      	adds	r3, #1
 800639a:	9304      	str	r3, [sp, #16]
 800639c:	f108 0801 	add.w	r8, r8, #1
 80063a0:	2301      	movs	r3, #1
 80063a2:	9306      	str	r3, [sp, #24]
 80063a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f47f af74 	bne.w	8006294 <_dtoa_r+0x7f4>
 80063ac:	2001      	movs	r0, #1
 80063ae:	e779      	b.n	80062a4 <_dtoa_r+0x804>
 80063b0:	2300      	movs	r3, #0
 80063b2:	e7f6      	b.n	80063a2 <_dtoa_r+0x902>
 80063b4:	9b02      	ldr	r3, [sp, #8]
 80063b6:	e7f4      	b.n	80063a2 <_dtoa_r+0x902>
 80063b8:	d085      	beq.n	80062c6 <_dtoa_r+0x826>
 80063ba:	4618      	mov	r0, r3
 80063bc:	301c      	adds	r0, #28
 80063be:	e77d      	b.n	80062bc <_dtoa_r+0x81c>
 80063c0:	40240000 	.word	0x40240000
 80063c4:	9b01      	ldr	r3, [sp, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	dc38      	bgt.n	800643c <_dtoa_r+0x99c>
 80063ca:	9b05      	ldr	r3, [sp, #20]
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	dd35      	ble.n	800643c <_dtoa_r+0x99c>
 80063d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80063d4:	f1b9 0f00 	cmp.w	r9, #0
 80063d8:	d10d      	bne.n	80063f6 <_dtoa_r+0x956>
 80063da:	4631      	mov	r1, r6
 80063dc:	464b      	mov	r3, r9
 80063de:	2205      	movs	r2, #5
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 fbe5 	bl	8006bb0 <__multadd>
 80063e6:	4601      	mov	r1, r0
 80063e8:	4606      	mov	r6, r0
 80063ea:	4658      	mov	r0, fp
 80063ec:	f000 fdfc 	bl	8006fe8 <__mcmp>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	f73f adbd 	bgt.w	8005f70 <_dtoa_r+0x4d0>
 80063f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f8:	9d00      	ldr	r5, [sp, #0]
 80063fa:	ea6f 0a03 	mvn.w	sl, r3
 80063fe:	f04f 0800 	mov.w	r8, #0
 8006402:	4631      	mov	r1, r6
 8006404:	4620      	mov	r0, r4
 8006406:	f000 fbb1 	bl	8006b6c <_Bfree>
 800640a:	2f00      	cmp	r7, #0
 800640c:	f43f aeb4 	beq.w	8006178 <_dtoa_r+0x6d8>
 8006410:	f1b8 0f00 	cmp.w	r8, #0
 8006414:	d005      	beq.n	8006422 <_dtoa_r+0x982>
 8006416:	45b8      	cmp	r8, r7
 8006418:	d003      	beq.n	8006422 <_dtoa_r+0x982>
 800641a:	4641      	mov	r1, r8
 800641c:	4620      	mov	r0, r4
 800641e:	f000 fba5 	bl	8006b6c <_Bfree>
 8006422:	4639      	mov	r1, r7
 8006424:	4620      	mov	r0, r4
 8006426:	f000 fba1 	bl	8006b6c <_Bfree>
 800642a:	e6a5      	b.n	8006178 <_dtoa_r+0x6d8>
 800642c:	2600      	movs	r6, #0
 800642e:	4637      	mov	r7, r6
 8006430:	e7e1      	b.n	80063f6 <_dtoa_r+0x956>
 8006432:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006434:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006438:	4637      	mov	r7, r6
 800643a:	e599      	b.n	8005f70 <_dtoa_r+0x4d0>
 800643c:	9b08      	ldr	r3, [sp, #32]
 800643e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 80fd 	beq.w	8006642 <_dtoa_r+0xba2>
 8006448:	2d00      	cmp	r5, #0
 800644a:	dd05      	ble.n	8006458 <_dtoa_r+0x9b8>
 800644c:	4639      	mov	r1, r7
 800644e:	462a      	mov	r2, r5
 8006450:	4620      	mov	r0, r4
 8006452:	f000 fd5d 	bl	8006f10 <__lshift>
 8006456:	4607      	mov	r7, r0
 8006458:	9b06      	ldr	r3, [sp, #24]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d05c      	beq.n	8006518 <_dtoa_r+0xa78>
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4620      	mov	r0, r4
 8006462:	f000 fb43 	bl	8006aec <_Balloc>
 8006466:	4605      	mov	r5, r0
 8006468:	b928      	cbnz	r0, 8006476 <_dtoa_r+0x9d6>
 800646a:	4b80      	ldr	r3, [pc, #512]	; (800666c <_dtoa_r+0xbcc>)
 800646c:	4602      	mov	r2, r0
 800646e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006472:	f7ff bb2e 	b.w	8005ad2 <_dtoa_r+0x32>
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	3202      	adds	r2, #2
 800647a:	0092      	lsls	r2, r2, #2
 800647c:	f107 010c 	add.w	r1, r7, #12
 8006480:	300c      	adds	r0, #12
 8006482:	f000 fb25 	bl	8006ad0 <memcpy>
 8006486:	2201      	movs	r2, #1
 8006488:	4629      	mov	r1, r5
 800648a:	4620      	mov	r0, r4
 800648c:	f000 fd40 	bl	8006f10 <__lshift>
 8006490:	9b00      	ldr	r3, [sp, #0]
 8006492:	3301      	adds	r3, #1
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	9b00      	ldr	r3, [sp, #0]
 8006498:	444b      	add	r3, r9
 800649a:	9307      	str	r3, [sp, #28]
 800649c:	9b02      	ldr	r3, [sp, #8]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	46b8      	mov	r8, r7
 80064a4:	9306      	str	r3, [sp, #24]
 80064a6:	4607      	mov	r7, r0
 80064a8:	9b01      	ldr	r3, [sp, #4]
 80064aa:	4631      	mov	r1, r6
 80064ac:	3b01      	subs	r3, #1
 80064ae:	4658      	mov	r0, fp
 80064b0:	9302      	str	r3, [sp, #8]
 80064b2:	f7ff fa69 	bl	8005988 <quorem>
 80064b6:	4603      	mov	r3, r0
 80064b8:	3330      	adds	r3, #48	; 0x30
 80064ba:	9004      	str	r0, [sp, #16]
 80064bc:	4641      	mov	r1, r8
 80064be:	4658      	mov	r0, fp
 80064c0:	9308      	str	r3, [sp, #32]
 80064c2:	f000 fd91 	bl	8006fe8 <__mcmp>
 80064c6:	463a      	mov	r2, r7
 80064c8:	4681      	mov	r9, r0
 80064ca:	4631      	mov	r1, r6
 80064cc:	4620      	mov	r0, r4
 80064ce:	f000 fda7 	bl	8007020 <__mdiff>
 80064d2:	68c2      	ldr	r2, [r0, #12]
 80064d4:	9b08      	ldr	r3, [sp, #32]
 80064d6:	4605      	mov	r5, r0
 80064d8:	bb02      	cbnz	r2, 800651c <_dtoa_r+0xa7c>
 80064da:	4601      	mov	r1, r0
 80064dc:	4658      	mov	r0, fp
 80064de:	f000 fd83 	bl	8006fe8 <__mcmp>
 80064e2:	9b08      	ldr	r3, [sp, #32]
 80064e4:	4602      	mov	r2, r0
 80064e6:	4629      	mov	r1, r5
 80064e8:	4620      	mov	r0, r4
 80064ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80064ee:	f000 fb3d 	bl	8006b6c <_Bfree>
 80064f2:	9b05      	ldr	r3, [sp, #20]
 80064f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064f6:	9d01      	ldr	r5, [sp, #4]
 80064f8:	ea43 0102 	orr.w	r1, r3, r2
 80064fc:	9b06      	ldr	r3, [sp, #24]
 80064fe:	430b      	orrs	r3, r1
 8006500:	9b08      	ldr	r3, [sp, #32]
 8006502:	d10d      	bne.n	8006520 <_dtoa_r+0xa80>
 8006504:	2b39      	cmp	r3, #57	; 0x39
 8006506:	d029      	beq.n	800655c <_dtoa_r+0xabc>
 8006508:	f1b9 0f00 	cmp.w	r9, #0
 800650c:	dd01      	ble.n	8006512 <_dtoa_r+0xa72>
 800650e:	9b04      	ldr	r3, [sp, #16]
 8006510:	3331      	adds	r3, #49	; 0x31
 8006512:	9a02      	ldr	r2, [sp, #8]
 8006514:	7013      	strb	r3, [r2, #0]
 8006516:	e774      	b.n	8006402 <_dtoa_r+0x962>
 8006518:	4638      	mov	r0, r7
 800651a:	e7b9      	b.n	8006490 <_dtoa_r+0x9f0>
 800651c:	2201      	movs	r2, #1
 800651e:	e7e2      	b.n	80064e6 <_dtoa_r+0xa46>
 8006520:	f1b9 0f00 	cmp.w	r9, #0
 8006524:	db06      	blt.n	8006534 <_dtoa_r+0xa94>
 8006526:	9905      	ldr	r1, [sp, #20]
 8006528:	ea41 0909 	orr.w	r9, r1, r9
 800652c:	9906      	ldr	r1, [sp, #24]
 800652e:	ea59 0101 	orrs.w	r1, r9, r1
 8006532:	d120      	bne.n	8006576 <_dtoa_r+0xad6>
 8006534:	2a00      	cmp	r2, #0
 8006536:	ddec      	ble.n	8006512 <_dtoa_r+0xa72>
 8006538:	4659      	mov	r1, fp
 800653a:	2201      	movs	r2, #1
 800653c:	4620      	mov	r0, r4
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	f000 fce6 	bl	8006f10 <__lshift>
 8006544:	4631      	mov	r1, r6
 8006546:	4683      	mov	fp, r0
 8006548:	f000 fd4e 	bl	8006fe8 <__mcmp>
 800654c:	2800      	cmp	r0, #0
 800654e:	9b01      	ldr	r3, [sp, #4]
 8006550:	dc02      	bgt.n	8006558 <_dtoa_r+0xab8>
 8006552:	d1de      	bne.n	8006512 <_dtoa_r+0xa72>
 8006554:	07da      	lsls	r2, r3, #31
 8006556:	d5dc      	bpl.n	8006512 <_dtoa_r+0xa72>
 8006558:	2b39      	cmp	r3, #57	; 0x39
 800655a:	d1d8      	bne.n	800650e <_dtoa_r+0xa6e>
 800655c:	9a02      	ldr	r2, [sp, #8]
 800655e:	2339      	movs	r3, #57	; 0x39
 8006560:	7013      	strb	r3, [r2, #0]
 8006562:	462b      	mov	r3, r5
 8006564:	461d      	mov	r5, r3
 8006566:	3b01      	subs	r3, #1
 8006568:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800656c:	2a39      	cmp	r2, #57	; 0x39
 800656e:	d050      	beq.n	8006612 <_dtoa_r+0xb72>
 8006570:	3201      	adds	r2, #1
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	e745      	b.n	8006402 <_dtoa_r+0x962>
 8006576:	2a00      	cmp	r2, #0
 8006578:	dd03      	ble.n	8006582 <_dtoa_r+0xae2>
 800657a:	2b39      	cmp	r3, #57	; 0x39
 800657c:	d0ee      	beq.n	800655c <_dtoa_r+0xabc>
 800657e:	3301      	adds	r3, #1
 8006580:	e7c7      	b.n	8006512 <_dtoa_r+0xa72>
 8006582:	9a01      	ldr	r2, [sp, #4]
 8006584:	9907      	ldr	r1, [sp, #28]
 8006586:	f802 3c01 	strb.w	r3, [r2, #-1]
 800658a:	428a      	cmp	r2, r1
 800658c:	d02a      	beq.n	80065e4 <_dtoa_r+0xb44>
 800658e:	4659      	mov	r1, fp
 8006590:	2300      	movs	r3, #0
 8006592:	220a      	movs	r2, #10
 8006594:	4620      	mov	r0, r4
 8006596:	f000 fb0b 	bl	8006bb0 <__multadd>
 800659a:	45b8      	cmp	r8, r7
 800659c:	4683      	mov	fp, r0
 800659e:	f04f 0300 	mov.w	r3, #0
 80065a2:	f04f 020a 	mov.w	r2, #10
 80065a6:	4641      	mov	r1, r8
 80065a8:	4620      	mov	r0, r4
 80065aa:	d107      	bne.n	80065bc <_dtoa_r+0xb1c>
 80065ac:	f000 fb00 	bl	8006bb0 <__multadd>
 80065b0:	4680      	mov	r8, r0
 80065b2:	4607      	mov	r7, r0
 80065b4:	9b01      	ldr	r3, [sp, #4]
 80065b6:	3301      	adds	r3, #1
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	e775      	b.n	80064a8 <_dtoa_r+0xa08>
 80065bc:	f000 faf8 	bl	8006bb0 <__multadd>
 80065c0:	4639      	mov	r1, r7
 80065c2:	4680      	mov	r8, r0
 80065c4:	2300      	movs	r3, #0
 80065c6:	220a      	movs	r2, #10
 80065c8:	4620      	mov	r0, r4
 80065ca:	f000 faf1 	bl	8006bb0 <__multadd>
 80065ce:	4607      	mov	r7, r0
 80065d0:	e7f0      	b.n	80065b4 <_dtoa_r+0xb14>
 80065d2:	f1b9 0f00 	cmp.w	r9, #0
 80065d6:	9a00      	ldr	r2, [sp, #0]
 80065d8:	bfcc      	ite	gt
 80065da:	464d      	movgt	r5, r9
 80065dc:	2501      	movle	r5, #1
 80065de:	4415      	add	r5, r2
 80065e0:	f04f 0800 	mov.w	r8, #0
 80065e4:	4659      	mov	r1, fp
 80065e6:	2201      	movs	r2, #1
 80065e8:	4620      	mov	r0, r4
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	f000 fc90 	bl	8006f10 <__lshift>
 80065f0:	4631      	mov	r1, r6
 80065f2:	4683      	mov	fp, r0
 80065f4:	f000 fcf8 	bl	8006fe8 <__mcmp>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	dcb2      	bgt.n	8006562 <_dtoa_r+0xac2>
 80065fc:	d102      	bne.n	8006604 <_dtoa_r+0xb64>
 80065fe:	9b01      	ldr	r3, [sp, #4]
 8006600:	07db      	lsls	r3, r3, #31
 8006602:	d4ae      	bmi.n	8006562 <_dtoa_r+0xac2>
 8006604:	462b      	mov	r3, r5
 8006606:	461d      	mov	r5, r3
 8006608:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800660c:	2a30      	cmp	r2, #48	; 0x30
 800660e:	d0fa      	beq.n	8006606 <_dtoa_r+0xb66>
 8006610:	e6f7      	b.n	8006402 <_dtoa_r+0x962>
 8006612:	9a00      	ldr	r2, [sp, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d1a5      	bne.n	8006564 <_dtoa_r+0xac4>
 8006618:	f10a 0a01 	add.w	sl, sl, #1
 800661c:	2331      	movs	r3, #49	; 0x31
 800661e:	e779      	b.n	8006514 <_dtoa_r+0xa74>
 8006620:	4b13      	ldr	r3, [pc, #76]	; (8006670 <_dtoa_r+0xbd0>)
 8006622:	f7ff baaf 	b.w	8005b84 <_dtoa_r+0xe4>
 8006626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006628:	2b00      	cmp	r3, #0
 800662a:	f47f aa86 	bne.w	8005b3a <_dtoa_r+0x9a>
 800662e:	4b11      	ldr	r3, [pc, #68]	; (8006674 <_dtoa_r+0xbd4>)
 8006630:	f7ff baa8 	b.w	8005b84 <_dtoa_r+0xe4>
 8006634:	f1b9 0f00 	cmp.w	r9, #0
 8006638:	dc03      	bgt.n	8006642 <_dtoa_r+0xba2>
 800663a:	9b05      	ldr	r3, [sp, #20]
 800663c:	2b02      	cmp	r3, #2
 800663e:	f73f aec9 	bgt.w	80063d4 <_dtoa_r+0x934>
 8006642:	9d00      	ldr	r5, [sp, #0]
 8006644:	4631      	mov	r1, r6
 8006646:	4658      	mov	r0, fp
 8006648:	f7ff f99e 	bl	8005988 <quorem>
 800664c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006650:	f805 3b01 	strb.w	r3, [r5], #1
 8006654:	9a00      	ldr	r2, [sp, #0]
 8006656:	1aaa      	subs	r2, r5, r2
 8006658:	4591      	cmp	r9, r2
 800665a:	ddba      	ble.n	80065d2 <_dtoa_r+0xb32>
 800665c:	4659      	mov	r1, fp
 800665e:	2300      	movs	r3, #0
 8006660:	220a      	movs	r2, #10
 8006662:	4620      	mov	r0, r4
 8006664:	f000 faa4 	bl	8006bb0 <__multadd>
 8006668:	4683      	mov	fp, r0
 800666a:	e7eb      	b.n	8006644 <_dtoa_r+0xba4>
 800666c:	08007a3f 	.word	0x08007a3f
 8006670:	08007998 	.word	0x08007998
 8006674:	080079bc 	.word	0x080079bc

08006678 <__sflush_r>:
 8006678:	898a      	ldrh	r2, [r1, #12]
 800667a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800667e:	4605      	mov	r5, r0
 8006680:	0710      	lsls	r0, r2, #28
 8006682:	460c      	mov	r4, r1
 8006684:	d458      	bmi.n	8006738 <__sflush_r+0xc0>
 8006686:	684b      	ldr	r3, [r1, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	dc05      	bgt.n	8006698 <__sflush_r+0x20>
 800668c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	dc02      	bgt.n	8006698 <__sflush_r+0x20>
 8006692:	2000      	movs	r0, #0
 8006694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800669a:	2e00      	cmp	r6, #0
 800669c:	d0f9      	beq.n	8006692 <__sflush_r+0x1a>
 800669e:	2300      	movs	r3, #0
 80066a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066a4:	682f      	ldr	r7, [r5, #0]
 80066a6:	602b      	str	r3, [r5, #0]
 80066a8:	d032      	beq.n	8006710 <__sflush_r+0x98>
 80066aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	075a      	lsls	r2, r3, #29
 80066b0:	d505      	bpl.n	80066be <__sflush_r+0x46>
 80066b2:	6863      	ldr	r3, [r4, #4]
 80066b4:	1ac0      	subs	r0, r0, r3
 80066b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066b8:	b10b      	cbz	r3, 80066be <__sflush_r+0x46>
 80066ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066bc:	1ac0      	subs	r0, r0, r3
 80066be:	2300      	movs	r3, #0
 80066c0:	4602      	mov	r2, r0
 80066c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066c4:	6a21      	ldr	r1, [r4, #32]
 80066c6:	4628      	mov	r0, r5
 80066c8:	47b0      	blx	r6
 80066ca:	1c43      	adds	r3, r0, #1
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	d106      	bne.n	80066de <__sflush_r+0x66>
 80066d0:	6829      	ldr	r1, [r5, #0]
 80066d2:	291d      	cmp	r1, #29
 80066d4:	d82c      	bhi.n	8006730 <__sflush_r+0xb8>
 80066d6:	4a2a      	ldr	r2, [pc, #168]	; (8006780 <__sflush_r+0x108>)
 80066d8:	40ca      	lsrs	r2, r1
 80066da:	07d6      	lsls	r6, r2, #31
 80066dc:	d528      	bpl.n	8006730 <__sflush_r+0xb8>
 80066de:	2200      	movs	r2, #0
 80066e0:	6062      	str	r2, [r4, #4]
 80066e2:	04d9      	lsls	r1, r3, #19
 80066e4:	6922      	ldr	r2, [r4, #16]
 80066e6:	6022      	str	r2, [r4, #0]
 80066e8:	d504      	bpl.n	80066f4 <__sflush_r+0x7c>
 80066ea:	1c42      	adds	r2, r0, #1
 80066ec:	d101      	bne.n	80066f2 <__sflush_r+0x7a>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	b903      	cbnz	r3, 80066f4 <__sflush_r+0x7c>
 80066f2:	6560      	str	r0, [r4, #84]	; 0x54
 80066f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066f6:	602f      	str	r7, [r5, #0]
 80066f8:	2900      	cmp	r1, #0
 80066fa:	d0ca      	beq.n	8006692 <__sflush_r+0x1a>
 80066fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006700:	4299      	cmp	r1, r3
 8006702:	d002      	beq.n	800670a <__sflush_r+0x92>
 8006704:	4628      	mov	r0, r5
 8006706:	f000 fd7f 	bl	8007208 <_free_r>
 800670a:	2000      	movs	r0, #0
 800670c:	6360      	str	r0, [r4, #52]	; 0x34
 800670e:	e7c1      	b.n	8006694 <__sflush_r+0x1c>
 8006710:	6a21      	ldr	r1, [r4, #32]
 8006712:	2301      	movs	r3, #1
 8006714:	4628      	mov	r0, r5
 8006716:	47b0      	blx	r6
 8006718:	1c41      	adds	r1, r0, #1
 800671a:	d1c7      	bne.n	80066ac <__sflush_r+0x34>
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0c4      	beq.n	80066ac <__sflush_r+0x34>
 8006722:	2b1d      	cmp	r3, #29
 8006724:	d001      	beq.n	800672a <__sflush_r+0xb2>
 8006726:	2b16      	cmp	r3, #22
 8006728:	d101      	bne.n	800672e <__sflush_r+0xb6>
 800672a:	602f      	str	r7, [r5, #0]
 800672c:	e7b1      	b.n	8006692 <__sflush_r+0x1a>
 800672e:	89a3      	ldrh	r3, [r4, #12]
 8006730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006734:	81a3      	strh	r3, [r4, #12]
 8006736:	e7ad      	b.n	8006694 <__sflush_r+0x1c>
 8006738:	690f      	ldr	r7, [r1, #16]
 800673a:	2f00      	cmp	r7, #0
 800673c:	d0a9      	beq.n	8006692 <__sflush_r+0x1a>
 800673e:	0793      	lsls	r3, r2, #30
 8006740:	680e      	ldr	r6, [r1, #0]
 8006742:	bf08      	it	eq
 8006744:	694b      	ldreq	r3, [r1, #20]
 8006746:	600f      	str	r7, [r1, #0]
 8006748:	bf18      	it	ne
 800674a:	2300      	movne	r3, #0
 800674c:	eba6 0807 	sub.w	r8, r6, r7
 8006750:	608b      	str	r3, [r1, #8]
 8006752:	f1b8 0f00 	cmp.w	r8, #0
 8006756:	dd9c      	ble.n	8006692 <__sflush_r+0x1a>
 8006758:	6a21      	ldr	r1, [r4, #32]
 800675a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800675c:	4643      	mov	r3, r8
 800675e:	463a      	mov	r2, r7
 8006760:	4628      	mov	r0, r5
 8006762:	47b0      	blx	r6
 8006764:	2800      	cmp	r0, #0
 8006766:	dc06      	bgt.n	8006776 <__sflush_r+0xfe>
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	f04f 30ff 	mov.w	r0, #4294967295
 8006774:	e78e      	b.n	8006694 <__sflush_r+0x1c>
 8006776:	4407      	add	r7, r0
 8006778:	eba8 0800 	sub.w	r8, r8, r0
 800677c:	e7e9      	b.n	8006752 <__sflush_r+0xda>
 800677e:	bf00      	nop
 8006780:	20400001 	.word	0x20400001

08006784 <_fflush_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	690b      	ldr	r3, [r1, #16]
 8006788:	4605      	mov	r5, r0
 800678a:	460c      	mov	r4, r1
 800678c:	b913      	cbnz	r3, 8006794 <_fflush_r+0x10>
 800678e:	2500      	movs	r5, #0
 8006790:	4628      	mov	r0, r5
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	b118      	cbz	r0, 800679e <_fflush_r+0x1a>
 8006796:	6983      	ldr	r3, [r0, #24]
 8006798:	b90b      	cbnz	r3, 800679e <_fflush_r+0x1a>
 800679a:	f000 f887 	bl	80068ac <__sinit>
 800679e:	4b14      	ldr	r3, [pc, #80]	; (80067f0 <_fflush_r+0x6c>)
 80067a0:	429c      	cmp	r4, r3
 80067a2:	d11b      	bne.n	80067dc <_fflush_r+0x58>
 80067a4:	686c      	ldr	r4, [r5, #4]
 80067a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0ef      	beq.n	800678e <_fflush_r+0xa>
 80067ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067b0:	07d0      	lsls	r0, r2, #31
 80067b2:	d404      	bmi.n	80067be <_fflush_r+0x3a>
 80067b4:	0599      	lsls	r1, r3, #22
 80067b6:	d402      	bmi.n	80067be <_fflush_r+0x3a>
 80067b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ba:	f000 f91a 	bl	80069f2 <__retarget_lock_acquire_recursive>
 80067be:	4628      	mov	r0, r5
 80067c0:	4621      	mov	r1, r4
 80067c2:	f7ff ff59 	bl	8006678 <__sflush_r>
 80067c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067c8:	07da      	lsls	r2, r3, #31
 80067ca:	4605      	mov	r5, r0
 80067cc:	d4e0      	bmi.n	8006790 <_fflush_r+0xc>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	059b      	lsls	r3, r3, #22
 80067d2:	d4dd      	bmi.n	8006790 <_fflush_r+0xc>
 80067d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067d6:	f000 f90d 	bl	80069f4 <__retarget_lock_release_recursive>
 80067da:	e7d9      	b.n	8006790 <_fflush_r+0xc>
 80067dc:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <_fflush_r+0x70>)
 80067de:	429c      	cmp	r4, r3
 80067e0:	d101      	bne.n	80067e6 <_fflush_r+0x62>
 80067e2:	68ac      	ldr	r4, [r5, #8]
 80067e4:	e7df      	b.n	80067a6 <_fflush_r+0x22>
 80067e6:	4b04      	ldr	r3, [pc, #16]	; (80067f8 <_fflush_r+0x74>)
 80067e8:	429c      	cmp	r4, r3
 80067ea:	bf08      	it	eq
 80067ec:	68ec      	ldreq	r4, [r5, #12]
 80067ee:	e7da      	b.n	80067a6 <_fflush_r+0x22>
 80067f0:	08007a70 	.word	0x08007a70
 80067f4:	08007a90 	.word	0x08007a90
 80067f8:	08007a50 	.word	0x08007a50

080067fc <std>:
 80067fc:	2300      	movs	r3, #0
 80067fe:	b510      	push	{r4, lr}
 8006800:	4604      	mov	r4, r0
 8006802:	e9c0 3300 	strd	r3, r3, [r0]
 8006806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800680a:	6083      	str	r3, [r0, #8]
 800680c:	8181      	strh	r1, [r0, #12]
 800680e:	6643      	str	r3, [r0, #100]	; 0x64
 8006810:	81c2      	strh	r2, [r0, #14]
 8006812:	6183      	str	r3, [r0, #24]
 8006814:	4619      	mov	r1, r3
 8006816:	2208      	movs	r2, #8
 8006818:	305c      	adds	r0, #92	; 0x5c
 800681a:	f7fe faf5 	bl	8004e08 <memset>
 800681e:	4b05      	ldr	r3, [pc, #20]	; (8006834 <std+0x38>)
 8006820:	6263      	str	r3, [r4, #36]	; 0x24
 8006822:	4b05      	ldr	r3, [pc, #20]	; (8006838 <std+0x3c>)
 8006824:	62a3      	str	r3, [r4, #40]	; 0x28
 8006826:	4b05      	ldr	r3, [pc, #20]	; (800683c <std+0x40>)
 8006828:	62e3      	str	r3, [r4, #44]	; 0x2c
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <std+0x44>)
 800682c:	6224      	str	r4, [r4, #32]
 800682e:	6323      	str	r3, [r4, #48]	; 0x30
 8006830:	bd10      	pop	{r4, pc}
 8006832:	bf00      	nop
 8006834:	08007631 	.word	0x08007631
 8006838:	08007653 	.word	0x08007653
 800683c:	0800768b 	.word	0x0800768b
 8006840:	080076af 	.word	0x080076af

08006844 <_cleanup_r>:
 8006844:	4901      	ldr	r1, [pc, #4]	; (800684c <_cleanup_r+0x8>)
 8006846:	f000 b8af 	b.w	80069a8 <_fwalk_reent>
 800684a:	bf00      	nop
 800684c:	08006785 	.word	0x08006785

08006850 <__sfmoreglue>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	1e4a      	subs	r2, r1, #1
 8006854:	2568      	movs	r5, #104	; 0x68
 8006856:	4355      	muls	r5, r2
 8006858:	460e      	mov	r6, r1
 800685a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800685e:	f000 fd23 	bl	80072a8 <_malloc_r>
 8006862:	4604      	mov	r4, r0
 8006864:	b140      	cbz	r0, 8006878 <__sfmoreglue+0x28>
 8006866:	2100      	movs	r1, #0
 8006868:	e9c0 1600 	strd	r1, r6, [r0]
 800686c:	300c      	adds	r0, #12
 800686e:	60a0      	str	r0, [r4, #8]
 8006870:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006874:	f7fe fac8 	bl	8004e08 <memset>
 8006878:	4620      	mov	r0, r4
 800687a:	bd70      	pop	{r4, r5, r6, pc}

0800687c <__sfp_lock_acquire>:
 800687c:	4801      	ldr	r0, [pc, #4]	; (8006884 <__sfp_lock_acquire+0x8>)
 800687e:	f000 b8b8 	b.w	80069f2 <__retarget_lock_acquire_recursive>
 8006882:	bf00      	nop
 8006884:	20000358 	.word	0x20000358

08006888 <__sfp_lock_release>:
 8006888:	4801      	ldr	r0, [pc, #4]	; (8006890 <__sfp_lock_release+0x8>)
 800688a:	f000 b8b3 	b.w	80069f4 <__retarget_lock_release_recursive>
 800688e:	bf00      	nop
 8006890:	20000358 	.word	0x20000358

08006894 <__sinit_lock_acquire>:
 8006894:	4801      	ldr	r0, [pc, #4]	; (800689c <__sinit_lock_acquire+0x8>)
 8006896:	f000 b8ac 	b.w	80069f2 <__retarget_lock_acquire_recursive>
 800689a:	bf00      	nop
 800689c:	20000353 	.word	0x20000353

080068a0 <__sinit_lock_release>:
 80068a0:	4801      	ldr	r0, [pc, #4]	; (80068a8 <__sinit_lock_release+0x8>)
 80068a2:	f000 b8a7 	b.w	80069f4 <__retarget_lock_release_recursive>
 80068a6:	bf00      	nop
 80068a8:	20000353 	.word	0x20000353

080068ac <__sinit>:
 80068ac:	b510      	push	{r4, lr}
 80068ae:	4604      	mov	r4, r0
 80068b0:	f7ff fff0 	bl	8006894 <__sinit_lock_acquire>
 80068b4:	69a3      	ldr	r3, [r4, #24]
 80068b6:	b11b      	cbz	r3, 80068c0 <__sinit+0x14>
 80068b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068bc:	f7ff bff0 	b.w	80068a0 <__sinit_lock_release>
 80068c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068c4:	6523      	str	r3, [r4, #80]	; 0x50
 80068c6:	4b13      	ldr	r3, [pc, #76]	; (8006914 <__sinit+0x68>)
 80068c8:	4a13      	ldr	r2, [pc, #76]	; (8006918 <__sinit+0x6c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80068ce:	42a3      	cmp	r3, r4
 80068d0:	bf04      	itt	eq
 80068d2:	2301      	moveq	r3, #1
 80068d4:	61a3      	streq	r3, [r4, #24]
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 f820 	bl	800691c <__sfp>
 80068dc:	6060      	str	r0, [r4, #4]
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 f81c 	bl	800691c <__sfp>
 80068e4:	60a0      	str	r0, [r4, #8]
 80068e6:	4620      	mov	r0, r4
 80068e8:	f000 f818 	bl	800691c <__sfp>
 80068ec:	2200      	movs	r2, #0
 80068ee:	60e0      	str	r0, [r4, #12]
 80068f0:	2104      	movs	r1, #4
 80068f2:	6860      	ldr	r0, [r4, #4]
 80068f4:	f7ff ff82 	bl	80067fc <std>
 80068f8:	68a0      	ldr	r0, [r4, #8]
 80068fa:	2201      	movs	r2, #1
 80068fc:	2109      	movs	r1, #9
 80068fe:	f7ff ff7d 	bl	80067fc <std>
 8006902:	68e0      	ldr	r0, [r4, #12]
 8006904:	2202      	movs	r2, #2
 8006906:	2112      	movs	r1, #18
 8006908:	f7ff ff78 	bl	80067fc <std>
 800690c:	2301      	movs	r3, #1
 800690e:	61a3      	str	r3, [r4, #24]
 8006910:	e7d2      	b.n	80068b8 <__sinit+0xc>
 8006912:	bf00      	nop
 8006914:	08007984 	.word	0x08007984
 8006918:	08006845 	.word	0x08006845

0800691c <__sfp>:
 800691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691e:	4607      	mov	r7, r0
 8006920:	f7ff ffac 	bl	800687c <__sfp_lock_acquire>
 8006924:	4b1e      	ldr	r3, [pc, #120]	; (80069a0 <__sfp+0x84>)
 8006926:	681e      	ldr	r6, [r3, #0]
 8006928:	69b3      	ldr	r3, [r6, #24]
 800692a:	b913      	cbnz	r3, 8006932 <__sfp+0x16>
 800692c:	4630      	mov	r0, r6
 800692e:	f7ff ffbd 	bl	80068ac <__sinit>
 8006932:	3648      	adds	r6, #72	; 0x48
 8006934:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006938:	3b01      	subs	r3, #1
 800693a:	d503      	bpl.n	8006944 <__sfp+0x28>
 800693c:	6833      	ldr	r3, [r6, #0]
 800693e:	b30b      	cbz	r3, 8006984 <__sfp+0x68>
 8006940:	6836      	ldr	r6, [r6, #0]
 8006942:	e7f7      	b.n	8006934 <__sfp+0x18>
 8006944:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006948:	b9d5      	cbnz	r5, 8006980 <__sfp+0x64>
 800694a:	4b16      	ldr	r3, [pc, #88]	; (80069a4 <__sfp+0x88>)
 800694c:	60e3      	str	r3, [r4, #12]
 800694e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006952:	6665      	str	r5, [r4, #100]	; 0x64
 8006954:	f000 f84c 	bl	80069f0 <__retarget_lock_init_recursive>
 8006958:	f7ff ff96 	bl	8006888 <__sfp_lock_release>
 800695c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006960:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006964:	6025      	str	r5, [r4, #0]
 8006966:	61a5      	str	r5, [r4, #24]
 8006968:	2208      	movs	r2, #8
 800696a:	4629      	mov	r1, r5
 800696c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006970:	f7fe fa4a 	bl	8004e08 <memset>
 8006974:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006978:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800697c:	4620      	mov	r0, r4
 800697e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006980:	3468      	adds	r4, #104	; 0x68
 8006982:	e7d9      	b.n	8006938 <__sfp+0x1c>
 8006984:	2104      	movs	r1, #4
 8006986:	4638      	mov	r0, r7
 8006988:	f7ff ff62 	bl	8006850 <__sfmoreglue>
 800698c:	4604      	mov	r4, r0
 800698e:	6030      	str	r0, [r6, #0]
 8006990:	2800      	cmp	r0, #0
 8006992:	d1d5      	bne.n	8006940 <__sfp+0x24>
 8006994:	f7ff ff78 	bl	8006888 <__sfp_lock_release>
 8006998:	230c      	movs	r3, #12
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	e7ee      	b.n	800697c <__sfp+0x60>
 800699e:	bf00      	nop
 80069a0:	08007984 	.word	0x08007984
 80069a4:	ffff0001 	.word	0xffff0001

080069a8 <_fwalk_reent>:
 80069a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ac:	4606      	mov	r6, r0
 80069ae:	4688      	mov	r8, r1
 80069b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069b4:	2700      	movs	r7, #0
 80069b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069ba:	f1b9 0901 	subs.w	r9, r9, #1
 80069be:	d505      	bpl.n	80069cc <_fwalk_reent+0x24>
 80069c0:	6824      	ldr	r4, [r4, #0]
 80069c2:	2c00      	cmp	r4, #0
 80069c4:	d1f7      	bne.n	80069b6 <_fwalk_reent+0xe>
 80069c6:	4638      	mov	r0, r7
 80069c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069cc:	89ab      	ldrh	r3, [r5, #12]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d907      	bls.n	80069e2 <_fwalk_reent+0x3a>
 80069d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069d6:	3301      	adds	r3, #1
 80069d8:	d003      	beq.n	80069e2 <_fwalk_reent+0x3a>
 80069da:	4629      	mov	r1, r5
 80069dc:	4630      	mov	r0, r6
 80069de:	47c0      	blx	r8
 80069e0:	4307      	orrs	r7, r0
 80069e2:	3568      	adds	r5, #104	; 0x68
 80069e4:	e7e9      	b.n	80069ba <_fwalk_reent+0x12>
	...

080069e8 <_localeconv_r>:
 80069e8:	4800      	ldr	r0, [pc, #0]	; (80069ec <_localeconv_r+0x4>)
 80069ea:	4770      	bx	lr
 80069ec:	20000160 	.word	0x20000160

080069f0 <__retarget_lock_init_recursive>:
 80069f0:	4770      	bx	lr

080069f2 <__retarget_lock_acquire_recursive>:
 80069f2:	4770      	bx	lr

080069f4 <__retarget_lock_release_recursive>:
 80069f4:	4770      	bx	lr

080069f6 <__swhatbuf_r>:
 80069f6:	b570      	push	{r4, r5, r6, lr}
 80069f8:	460e      	mov	r6, r1
 80069fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069fe:	2900      	cmp	r1, #0
 8006a00:	b096      	sub	sp, #88	; 0x58
 8006a02:	4614      	mov	r4, r2
 8006a04:	461d      	mov	r5, r3
 8006a06:	da07      	bge.n	8006a18 <__swhatbuf_r+0x22>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	602b      	str	r3, [r5, #0]
 8006a0c:	89b3      	ldrh	r3, [r6, #12]
 8006a0e:	061a      	lsls	r2, r3, #24
 8006a10:	d410      	bmi.n	8006a34 <__swhatbuf_r+0x3e>
 8006a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a16:	e00e      	b.n	8006a36 <__swhatbuf_r+0x40>
 8006a18:	466a      	mov	r2, sp
 8006a1a:	f000 fe9f 	bl	800775c <_fstat_r>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	dbf2      	blt.n	8006a08 <__swhatbuf_r+0x12>
 8006a22:	9a01      	ldr	r2, [sp, #4]
 8006a24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a2c:	425a      	negs	r2, r3
 8006a2e:	415a      	adcs	r2, r3
 8006a30:	602a      	str	r2, [r5, #0]
 8006a32:	e7ee      	b.n	8006a12 <__swhatbuf_r+0x1c>
 8006a34:	2340      	movs	r3, #64	; 0x40
 8006a36:	2000      	movs	r0, #0
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	b016      	add	sp, #88	; 0x58
 8006a3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a40 <__smakebuf_r>:
 8006a40:	898b      	ldrh	r3, [r1, #12]
 8006a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a44:	079d      	lsls	r5, r3, #30
 8006a46:	4606      	mov	r6, r0
 8006a48:	460c      	mov	r4, r1
 8006a4a:	d507      	bpl.n	8006a5c <__smakebuf_r+0x1c>
 8006a4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	6123      	str	r3, [r4, #16]
 8006a54:	2301      	movs	r3, #1
 8006a56:	6163      	str	r3, [r4, #20]
 8006a58:	b002      	add	sp, #8
 8006a5a:	bd70      	pop	{r4, r5, r6, pc}
 8006a5c:	ab01      	add	r3, sp, #4
 8006a5e:	466a      	mov	r2, sp
 8006a60:	f7ff ffc9 	bl	80069f6 <__swhatbuf_r>
 8006a64:	9900      	ldr	r1, [sp, #0]
 8006a66:	4605      	mov	r5, r0
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f000 fc1d 	bl	80072a8 <_malloc_r>
 8006a6e:	b948      	cbnz	r0, 8006a84 <__smakebuf_r+0x44>
 8006a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a74:	059a      	lsls	r2, r3, #22
 8006a76:	d4ef      	bmi.n	8006a58 <__smakebuf_r+0x18>
 8006a78:	f023 0303 	bic.w	r3, r3, #3
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	81a3      	strh	r3, [r4, #12]
 8006a82:	e7e3      	b.n	8006a4c <__smakebuf_r+0xc>
 8006a84:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <__smakebuf_r+0x7c>)
 8006a86:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	6020      	str	r0, [r4, #0]
 8006a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a90:	81a3      	strh	r3, [r4, #12]
 8006a92:	9b00      	ldr	r3, [sp, #0]
 8006a94:	6163      	str	r3, [r4, #20]
 8006a96:	9b01      	ldr	r3, [sp, #4]
 8006a98:	6120      	str	r0, [r4, #16]
 8006a9a:	b15b      	cbz	r3, 8006ab4 <__smakebuf_r+0x74>
 8006a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f000 fe6d 	bl	8007780 <_isatty_r>
 8006aa6:	b128      	cbz	r0, 8006ab4 <__smakebuf_r+0x74>
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	f023 0303 	bic.w	r3, r3, #3
 8006aae:	f043 0301 	orr.w	r3, r3, #1
 8006ab2:	81a3      	strh	r3, [r4, #12]
 8006ab4:	89a0      	ldrh	r0, [r4, #12]
 8006ab6:	4305      	orrs	r5, r0
 8006ab8:	81a5      	strh	r5, [r4, #12]
 8006aba:	e7cd      	b.n	8006a58 <__smakebuf_r+0x18>
 8006abc:	08006845 	.word	0x08006845

08006ac0 <malloc>:
 8006ac0:	4b02      	ldr	r3, [pc, #8]	; (8006acc <malloc+0xc>)
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	f000 bbef 	b.w	80072a8 <_malloc_r>
 8006aca:	bf00      	nop
 8006acc:	2000000c 	.word	0x2000000c

08006ad0 <memcpy>:
 8006ad0:	440a      	add	r2, r1
 8006ad2:	4291      	cmp	r1, r2
 8006ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ad8:	d100      	bne.n	8006adc <memcpy+0xc>
 8006ada:	4770      	bx	lr
 8006adc:	b510      	push	{r4, lr}
 8006ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ae6:	4291      	cmp	r1, r2
 8006ae8:	d1f9      	bne.n	8006ade <memcpy+0xe>
 8006aea:	bd10      	pop	{r4, pc}

08006aec <_Balloc>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006af0:	4604      	mov	r4, r0
 8006af2:	460d      	mov	r5, r1
 8006af4:	b976      	cbnz	r6, 8006b14 <_Balloc+0x28>
 8006af6:	2010      	movs	r0, #16
 8006af8:	f7ff ffe2 	bl	8006ac0 <malloc>
 8006afc:	4602      	mov	r2, r0
 8006afe:	6260      	str	r0, [r4, #36]	; 0x24
 8006b00:	b920      	cbnz	r0, 8006b0c <_Balloc+0x20>
 8006b02:	4b18      	ldr	r3, [pc, #96]	; (8006b64 <_Balloc+0x78>)
 8006b04:	4818      	ldr	r0, [pc, #96]	; (8006b68 <_Balloc+0x7c>)
 8006b06:	2166      	movs	r1, #102	; 0x66
 8006b08:	f000 fde8 	bl	80076dc <__assert_func>
 8006b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b10:	6006      	str	r6, [r0, #0]
 8006b12:	60c6      	str	r6, [r0, #12]
 8006b14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b16:	68f3      	ldr	r3, [r6, #12]
 8006b18:	b183      	cbz	r3, 8006b3c <_Balloc+0x50>
 8006b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b22:	b9b8      	cbnz	r0, 8006b54 <_Balloc+0x68>
 8006b24:	2101      	movs	r1, #1
 8006b26:	fa01 f605 	lsl.w	r6, r1, r5
 8006b2a:	1d72      	adds	r2, r6, #5
 8006b2c:	0092      	lsls	r2, r2, #2
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 fb5a 	bl	80071e8 <_calloc_r>
 8006b34:	b160      	cbz	r0, 8006b50 <_Balloc+0x64>
 8006b36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b3a:	e00e      	b.n	8006b5a <_Balloc+0x6e>
 8006b3c:	2221      	movs	r2, #33	; 0x21
 8006b3e:	2104      	movs	r1, #4
 8006b40:	4620      	mov	r0, r4
 8006b42:	f000 fb51 	bl	80071e8 <_calloc_r>
 8006b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b48:	60f0      	str	r0, [r6, #12]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e4      	bne.n	8006b1a <_Balloc+0x2e>
 8006b50:	2000      	movs	r0, #0
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	6802      	ldr	r2, [r0, #0]
 8006b56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b60:	e7f7      	b.n	8006b52 <_Balloc+0x66>
 8006b62:	bf00      	nop
 8006b64:	080079c9 	.word	0x080079c9
 8006b68:	08007ab0 	.word	0x08007ab0

08006b6c <_Bfree>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b70:	4605      	mov	r5, r0
 8006b72:	460c      	mov	r4, r1
 8006b74:	b976      	cbnz	r6, 8006b94 <_Bfree+0x28>
 8006b76:	2010      	movs	r0, #16
 8006b78:	f7ff ffa2 	bl	8006ac0 <malloc>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	6268      	str	r0, [r5, #36]	; 0x24
 8006b80:	b920      	cbnz	r0, 8006b8c <_Bfree+0x20>
 8006b82:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <_Bfree+0x3c>)
 8006b84:	4809      	ldr	r0, [pc, #36]	; (8006bac <_Bfree+0x40>)
 8006b86:	218a      	movs	r1, #138	; 0x8a
 8006b88:	f000 fda8 	bl	80076dc <__assert_func>
 8006b8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b90:	6006      	str	r6, [r0, #0]
 8006b92:	60c6      	str	r6, [r0, #12]
 8006b94:	b13c      	cbz	r4, 8006ba6 <_Bfree+0x3a>
 8006b96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b98:	6862      	ldr	r2, [r4, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ba0:	6021      	str	r1, [r4, #0]
 8006ba2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ba6:	bd70      	pop	{r4, r5, r6, pc}
 8006ba8:	080079c9 	.word	0x080079c9
 8006bac:	08007ab0 	.word	0x08007ab0

08006bb0 <__multadd>:
 8006bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb4:	690e      	ldr	r6, [r1, #16]
 8006bb6:	4607      	mov	r7, r0
 8006bb8:	4698      	mov	r8, r3
 8006bba:	460c      	mov	r4, r1
 8006bbc:	f101 0014 	add.w	r0, r1, #20
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	6805      	ldr	r5, [r0, #0]
 8006bc4:	b2a9      	uxth	r1, r5
 8006bc6:	fb02 8101 	mla	r1, r2, r1, r8
 8006bca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006bce:	0c2d      	lsrs	r5, r5, #16
 8006bd0:	fb02 c505 	mla	r5, r2, r5, ip
 8006bd4:	b289      	uxth	r1, r1
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006bdc:	429e      	cmp	r6, r3
 8006bde:	f840 1b04 	str.w	r1, [r0], #4
 8006be2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006be6:	dcec      	bgt.n	8006bc2 <__multadd+0x12>
 8006be8:	f1b8 0f00 	cmp.w	r8, #0
 8006bec:	d022      	beq.n	8006c34 <__multadd+0x84>
 8006bee:	68a3      	ldr	r3, [r4, #8]
 8006bf0:	42b3      	cmp	r3, r6
 8006bf2:	dc19      	bgt.n	8006c28 <__multadd+0x78>
 8006bf4:	6861      	ldr	r1, [r4, #4]
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	3101      	adds	r1, #1
 8006bfa:	f7ff ff77 	bl	8006aec <_Balloc>
 8006bfe:	4605      	mov	r5, r0
 8006c00:	b928      	cbnz	r0, 8006c0e <__multadd+0x5e>
 8006c02:	4602      	mov	r2, r0
 8006c04:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <__multadd+0x8c>)
 8006c06:	480e      	ldr	r0, [pc, #56]	; (8006c40 <__multadd+0x90>)
 8006c08:	21b5      	movs	r1, #181	; 0xb5
 8006c0a:	f000 fd67 	bl	80076dc <__assert_func>
 8006c0e:	6922      	ldr	r2, [r4, #16]
 8006c10:	3202      	adds	r2, #2
 8006c12:	f104 010c 	add.w	r1, r4, #12
 8006c16:	0092      	lsls	r2, r2, #2
 8006c18:	300c      	adds	r0, #12
 8006c1a:	f7ff ff59 	bl	8006ad0 <memcpy>
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4638      	mov	r0, r7
 8006c22:	f7ff ffa3 	bl	8006b6c <_Bfree>
 8006c26:	462c      	mov	r4, r5
 8006c28:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006c2c:	3601      	adds	r6, #1
 8006c2e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006c32:	6126      	str	r6, [r4, #16]
 8006c34:	4620      	mov	r0, r4
 8006c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c3a:	bf00      	nop
 8006c3c:	08007a3f 	.word	0x08007a3f
 8006c40:	08007ab0 	.word	0x08007ab0

08006c44 <__hi0bits>:
 8006c44:	0c03      	lsrs	r3, r0, #16
 8006c46:	041b      	lsls	r3, r3, #16
 8006c48:	b9d3      	cbnz	r3, 8006c80 <__hi0bits+0x3c>
 8006c4a:	0400      	lsls	r0, r0, #16
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006c52:	bf04      	itt	eq
 8006c54:	0200      	lsleq	r0, r0, #8
 8006c56:	3308      	addeq	r3, #8
 8006c58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006c5c:	bf04      	itt	eq
 8006c5e:	0100      	lsleq	r0, r0, #4
 8006c60:	3304      	addeq	r3, #4
 8006c62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006c66:	bf04      	itt	eq
 8006c68:	0080      	lsleq	r0, r0, #2
 8006c6a:	3302      	addeq	r3, #2
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	db05      	blt.n	8006c7c <__hi0bits+0x38>
 8006c70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c74:	f103 0301 	add.w	r3, r3, #1
 8006c78:	bf08      	it	eq
 8006c7a:	2320      	moveq	r3, #32
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	4770      	bx	lr
 8006c80:	2300      	movs	r3, #0
 8006c82:	e7e4      	b.n	8006c4e <__hi0bits+0xa>

08006c84 <__lo0bits>:
 8006c84:	6803      	ldr	r3, [r0, #0]
 8006c86:	f013 0207 	ands.w	r2, r3, #7
 8006c8a:	4601      	mov	r1, r0
 8006c8c:	d00b      	beq.n	8006ca6 <__lo0bits+0x22>
 8006c8e:	07da      	lsls	r2, r3, #31
 8006c90:	d424      	bmi.n	8006cdc <__lo0bits+0x58>
 8006c92:	0798      	lsls	r0, r3, #30
 8006c94:	bf49      	itett	mi
 8006c96:	085b      	lsrmi	r3, r3, #1
 8006c98:	089b      	lsrpl	r3, r3, #2
 8006c9a:	2001      	movmi	r0, #1
 8006c9c:	600b      	strmi	r3, [r1, #0]
 8006c9e:	bf5c      	itt	pl
 8006ca0:	600b      	strpl	r3, [r1, #0]
 8006ca2:	2002      	movpl	r0, #2
 8006ca4:	4770      	bx	lr
 8006ca6:	b298      	uxth	r0, r3
 8006ca8:	b9b0      	cbnz	r0, 8006cd8 <__lo0bits+0x54>
 8006caa:	0c1b      	lsrs	r3, r3, #16
 8006cac:	2010      	movs	r0, #16
 8006cae:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006cb2:	bf04      	itt	eq
 8006cb4:	0a1b      	lsreq	r3, r3, #8
 8006cb6:	3008      	addeq	r0, #8
 8006cb8:	071a      	lsls	r2, r3, #28
 8006cba:	bf04      	itt	eq
 8006cbc:	091b      	lsreq	r3, r3, #4
 8006cbe:	3004      	addeq	r0, #4
 8006cc0:	079a      	lsls	r2, r3, #30
 8006cc2:	bf04      	itt	eq
 8006cc4:	089b      	lsreq	r3, r3, #2
 8006cc6:	3002      	addeq	r0, #2
 8006cc8:	07da      	lsls	r2, r3, #31
 8006cca:	d403      	bmi.n	8006cd4 <__lo0bits+0x50>
 8006ccc:	085b      	lsrs	r3, r3, #1
 8006cce:	f100 0001 	add.w	r0, r0, #1
 8006cd2:	d005      	beq.n	8006ce0 <__lo0bits+0x5c>
 8006cd4:	600b      	str	r3, [r1, #0]
 8006cd6:	4770      	bx	lr
 8006cd8:	4610      	mov	r0, r2
 8006cda:	e7e8      	b.n	8006cae <__lo0bits+0x2a>
 8006cdc:	2000      	movs	r0, #0
 8006cde:	4770      	bx	lr
 8006ce0:	2020      	movs	r0, #32
 8006ce2:	4770      	bx	lr

08006ce4 <__i2b>:
 8006ce4:	b510      	push	{r4, lr}
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	2101      	movs	r1, #1
 8006cea:	f7ff feff 	bl	8006aec <_Balloc>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	b928      	cbnz	r0, 8006cfe <__i2b+0x1a>
 8006cf2:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <__i2b+0x24>)
 8006cf4:	4805      	ldr	r0, [pc, #20]	; (8006d0c <__i2b+0x28>)
 8006cf6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006cfa:	f000 fcef 	bl	80076dc <__assert_func>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	6144      	str	r4, [r0, #20]
 8006d02:	6103      	str	r3, [r0, #16]
 8006d04:	bd10      	pop	{r4, pc}
 8006d06:	bf00      	nop
 8006d08:	08007a3f 	.word	0x08007a3f
 8006d0c:	08007ab0 	.word	0x08007ab0

08006d10 <__multiply>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	4614      	mov	r4, r2
 8006d16:	690a      	ldr	r2, [r1, #16]
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	bfb8      	it	lt
 8006d1e:	460b      	movlt	r3, r1
 8006d20:	460d      	mov	r5, r1
 8006d22:	bfbc      	itt	lt
 8006d24:	4625      	movlt	r5, r4
 8006d26:	461c      	movlt	r4, r3
 8006d28:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006d2c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006d30:	68ab      	ldr	r3, [r5, #8]
 8006d32:	6869      	ldr	r1, [r5, #4]
 8006d34:	eb0a 0709 	add.w	r7, sl, r9
 8006d38:	42bb      	cmp	r3, r7
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	bfb8      	it	lt
 8006d3e:	3101      	addlt	r1, #1
 8006d40:	f7ff fed4 	bl	8006aec <_Balloc>
 8006d44:	b930      	cbnz	r0, 8006d54 <__multiply+0x44>
 8006d46:	4602      	mov	r2, r0
 8006d48:	4b42      	ldr	r3, [pc, #264]	; (8006e54 <__multiply+0x144>)
 8006d4a:	4843      	ldr	r0, [pc, #268]	; (8006e58 <__multiply+0x148>)
 8006d4c:	f240 115d 	movw	r1, #349	; 0x15d
 8006d50:	f000 fcc4 	bl	80076dc <__assert_func>
 8006d54:	f100 0614 	add.w	r6, r0, #20
 8006d58:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006d5c:	4633      	mov	r3, r6
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4543      	cmp	r3, r8
 8006d62:	d31e      	bcc.n	8006da2 <__multiply+0x92>
 8006d64:	f105 0c14 	add.w	ip, r5, #20
 8006d68:	f104 0314 	add.w	r3, r4, #20
 8006d6c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006d70:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006d74:	9202      	str	r2, [sp, #8]
 8006d76:	ebac 0205 	sub.w	r2, ip, r5
 8006d7a:	3a15      	subs	r2, #21
 8006d7c:	f022 0203 	bic.w	r2, r2, #3
 8006d80:	3204      	adds	r2, #4
 8006d82:	f105 0115 	add.w	r1, r5, #21
 8006d86:	458c      	cmp	ip, r1
 8006d88:	bf38      	it	cc
 8006d8a:	2204      	movcc	r2, #4
 8006d8c:	9201      	str	r2, [sp, #4]
 8006d8e:	9a02      	ldr	r2, [sp, #8]
 8006d90:	9303      	str	r3, [sp, #12]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d808      	bhi.n	8006da8 <__multiply+0x98>
 8006d96:	2f00      	cmp	r7, #0
 8006d98:	dc55      	bgt.n	8006e46 <__multiply+0x136>
 8006d9a:	6107      	str	r7, [r0, #16]
 8006d9c:	b005      	add	sp, #20
 8006d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da2:	f843 2b04 	str.w	r2, [r3], #4
 8006da6:	e7db      	b.n	8006d60 <__multiply+0x50>
 8006da8:	f8b3 a000 	ldrh.w	sl, [r3]
 8006dac:	f1ba 0f00 	cmp.w	sl, #0
 8006db0:	d020      	beq.n	8006df4 <__multiply+0xe4>
 8006db2:	f105 0e14 	add.w	lr, r5, #20
 8006db6:	46b1      	mov	r9, r6
 8006db8:	2200      	movs	r2, #0
 8006dba:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006dbe:	f8d9 b000 	ldr.w	fp, [r9]
 8006dc2:	b2a1      	uxth	r1, r4
 8006dc4:	fa1f fb8b 	uxth.w	fp, fp
 8006dc8:	fb0a b101 	mla	r1, sl, r1, fp
 8006dcc:	4411      	add	r1, r2
 8006dce:	f8d9 2000 	ldr.w	r2, [r9]
 8006dd2:	0c24      	lsrs	r4, r4, #16
 8006dd4:	0c12      	lsrs	r2, r2, #16
 8006dd6:	fb0a 2404 	mla	r4, sl, r4, r2
 8006dda:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006dde:	b289      	uxth	r1, r1
 8006de0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006de4:	45f4      	cmp	ip, lr
 8006de6:	f849 1b04 	str.w	r1, [r9], #4
 8006dea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006dee:	d8e4      	bhi.n	8006dba <__multiply+0xaa>
 8006df0:	9901      	ldr	r1, [sp, #4]
 8006df2:	5072      	str	r2, [r6, r1]
 8006df4:	9a03      	ldr	r2, [sp, #12]
 8006df6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	f1b9 0f00 	cmp.w	r9, #0
 8006e00:	d01f      	beq.n	8006e42 <__multiply+0x132>
 8006e02:	6834      	ldr	r4, [r6, #0]
 8006e04:	f105 0114 	add.w	r1, r5, #20
 8006e08:	46b6      	mov	lr, r6
 8006e0a:	f04f 0a00 	mov.w	sl, #0
 8006e0e:	880a      	ldrh	r2, [r1, #0]
 8006e10:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006e14:	fb09 b202 	mla	r2, r9, r2, fp
 8006e18:	4492      	add	sl, r2
 8006e1a:	b2a4      	uxth	r4, r4
 8006e1c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006e20:	f84e 4b04 	str.w	r4, [lr], #4
 8006e24:	f851 4b04 	ldr.w	r4, [r1], #4
 8006e28:	f8be 2000 	ldrh.w	r2, [lr]
 8006e2c:	0c24      	lsrs	r4, r4, #16
 8006e2e:	fb09 2404 	mla	r4, r9, r4, r2
 8006e32:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006e36:	458c      	cmp	ip, r1
 8006e38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006e3c:	d8e7      	bhi.n	8006e0e <__multiply+0xfe>
 8006e3e:	9a01      	ldr	r2, [sp, #4]
 8006e40:	50b4      	str	r4, [r6, r2]
 8006e42:	3604      	adds	r6, #4
 8006e44:	e7a3      	b.n	8006d8e <__multiply+0x7e>
 8006e46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1a5      	bne.n	8006d9a <__multiply+0x8a>
 8006e4e:	3f01      	subs	r7, #1
 8006e50:	e7a1      	b.n	8006d96 <__multiply+0x86>
 8006e52:	bf00      	nop
 8006e54:	08007a3f 	.word	0x08007a3f
 8006e58:	08007ab0 	.word	0x08007ab0

08006e5c <__pow5mult>:
 8006e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e60:	4615      	mov	r5, r2
 8006e62:	f012 0203 	ands.w	r2, r2, #3
 8006e66:	4606      	mov	r6, r0
 8006e68:	460f      	mov	r7, r1
 8006e6a:	d007      	beq.n	8006e7c <__pow5mult+0x20>
 8006e6c:	4c25      	ldr	r4, [pc, #148]	; (8006f04 <__pow5mult+0xa8>)
 8006e6e:	3a01      	subs	r2, #1
 8006e70:	2300      	movs	r3, #0
 8006e72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e76:	f7ff fe9b 	bl	8006bb0 <__multadd>
 8006e7a:	4607      	mov	r7, r0
 8006e7c:	10ad      	asrs	r5, r5, #2
 8006e7e:	d03d      	beq.n	8006efc <__pow5mult+0xa0>
 8006e80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e82:	b97c      	cbnz	r4, 8006ea4 <__pow5mult+0x48>
 8006e84:	2010      	movs	r0, #16
 8006e86:	f7ff fe1b 	bl	8006ac0 <malloc>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	6270      	str	r0, [r6, #36]	; 0x24
 8006e8e:	b928      	cbnz	r0, 8006e9c <__pow5mult+0x40>
 8006e90:	4b1d      	ldr	r3, [pc, #116]	; (8006f08 <__pow5mult+0xac>)
 8006e92:	481e      	ldr	r0, [pc, #120]	; (8006f0c <__pow5mult+0xb0>)
 8006e94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006e98:	f000 fc20 	bl	80076dc <__assert_func>
 8006e9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ea0:	6004      	str	r4, [r0, #0]
 8006ea2:	60c4      	str	r4, [r0, #12]
 8006ea4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006eac:	b94c      	cbnz	r4, 8006ec2 <__pow5mult+0x66>
 8006eae:	f240 2171 	movw	r1, #625	; 0x271
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7ff ff16 	bl	8006ce4 <__i2b>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	6003      	str	r3, [r0, #0]
 8006ec2:	f04f 0900 	mov.w	r9, #0
 8006ec6:	07eb      	lsls	r3, r5, #31
 8006ec8:	d50a      	bpl.n	8006ee0 <__pow5mult+0x84>
 8006eca:	4639      	mov	r1, r7
 8006ecc:	4622      	mov	r2, r4
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7ff ff1e 	bl	8006d10 <__multiply>
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	4680      	mov	r8, r0
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f7ff fe47 	bl	8006b6c <_Bfree>
 8006ede:	4647      	mov	r7, r8
 8006ee0:	106d      	asrs	r5, r5, #1
 8006ee2:	d00b      	beq.n	8006efc <__pow5mult+0xa0>
 8006ee4:	6820      	ldr	r0, [r4, #0]
 8006ee6:	b938      	cbnz	r0, 8006ef8 <__pow5mult+0x9c>
 8006ee8:	4622      	mov	r2, r4
 8006eea:	4621      	mov	r1, r4
 8006eec:	4630      	mov	r0, r6
 8006eee:	f7ff ff0f 	bl	8006d10 <__multiply>
 8006ef2:	6020      	str	r0, [r4, #0]
 8006ef4:	f8c0 9000 	str.w	r9, [r0]
 8006ef8:	4604      	mov	r4, r0
 8006efa:	e7e4      	b.n	8006ec6 <__pow5mult+0x6a>
 8006efc:	4638      	mov	r0, r7
 8006efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f02:	bf00      	nop
 8006f04:	08007c00 	.word	0x08007c00
 8006f08:	080079c9 	.word	0x080079c9
 8006f0c:	08007ab0 	.word	0x08007ab0

08006f10 <__lshift>:
 8006f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f14:	460c      	mov	r4, r1
 8006f16:	6849      	ldr	r1, [r1, #4]
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f1e:	68a3      	ldr	r3, [r4, #8]
 8006f20:	4607      	mov	r7, r0
 8006f22:	4691      	mov	r9, r2
 8006f24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f28:	f108 0601 	add.w	r6, r8, #1
 8006f2c:	42b3      	cmp	r3, r6
 8006f2e:	db0b      	blt.n	8006f48 <__lshift+0x38>
 8006f30:	4638      	mov	r0, r7
 8006f32:	f7ff fddb 	bl	8006aec <_Balloc>
 8006f36:	4605      	mov	r5, r0
 8006f38:	b948      	cbnz	r0, 8006f4e <__lshift+0x3e>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	4b28      	ldr	r3, [pc, #160]	; (8006fe0 <__lshift+0xd0>)
 8006f3e:	4829      	ldr	r0, [pc, #164]	; (8006fe4 <__lshift+0xd4>)
 8006f40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006f44:	f000 fbca 	bl	80076dc <__assert_func>
 8006f48:	3101      	adds	r1, #1
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	e7ee      	b.n	8006f2c <__lshift+0x1c>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f100 0114 	add.w	r1, r0, #20
 8006f54:	f100 0210 	add.w	r2, r0, #16
 8006f58:	4618      	mov	r0, r3
 8006f5a:	4553      	cmp	r3, sl
 8006f5c:	db33      	blt.n	8006fc6 <__lshift+0xb6>
 8006f5e:	6920      	ldr	r0, [r4, #16]
 8006f60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f64:	f104 0314 	add.w	r3, r4, #20
 8006f68:	f019 091f 	ands.w	r9, r9, #31
 8006f6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f74:	d02b      	beq.n	8006fce <__lshift+0xbe>
 8006f76:	f1c9 0e20 	rsb	lr, r9, #32
 8006f7a:	468a      	mov	sl, r1
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	fa00 f009 	lsl.w	r0, r0, r9
 8006f84:	4302      	orrs	r2, r0
 8006f86:	f84a 2b04 	str.w	r2, [sl], #4
 8006f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8e:	459c      	cmp	ip, r3
 8006f90:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f94:	d8f3      	bhi.n	8006f7e <__lshift+0x6e>
 8006f96:	ebac 0304 	sub.w	r3, ip, r4
 8006f9a:	3b15      	subs	r3, #21
 8006f9c:	f023 0303 	bic.w	r3, r3, #3
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	f104 0015 	add.w	r0, r4, #21
 8006fa6:	4584      	cmp	ip, r0
 8006fa8:	bf38      	it	cc
 8006faa:	2304      	movcc	r3, #4
 8006fac:	50ca      	str	r2, [r1, r3]
 8006fae:	b10a      	cbz	r2, 8006fb4 <__lshift+0xa4>
 8006fb0:	f108 0602 	add.w	r6, r8, #2
 8006fb4:	3e01      	subs	r6, #1
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	612e      	str	r6, [r5, #16]
 8006fba:	4621      	mov	r1, r4
 8006fbc:	f7ff fdd6 	bl	8006b6c <_Bfree>
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006fca:	3301      	adds	r3, #1
 8006fcc:	e7c5      	b.n	8006f5a <__lshift+0x4a>
 8006fce:	3904      	subs	r1, #4
 8006fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006fd8:	459c      	cmp	ip, r3
 8006fda:	d8f9      	bhi.n	8006fd0 <__lshift+0xc0>
 8006fdc:	e7ea      	b.n	8006fb4 <__lshift+0xa4>
 8006fde:	bf00      	nop
 8006fe0:	08007a3f 	.word	0x08007a3f
 8006fe4:	08007ab0 	.word	0x08007ab0

08006fe8 <__mcmp>:
 8006fe8:	b530      	push	{r4, r5, lr}
 8006fea:	6902      	ldr	r2, [r0, #16]
 8006fec:	690c      	ldr	r4, [r1, #16]
 8006fee:	1b12      	subs	r2, r2, r4
 8006ff0:	d10e      	bne.n	8007010 <__mcmp+0x28>
 8006ff2:	f100 0314 	add.w	r3, r0, #20
 8006ff6:	3114      	adds	r1, #20
 8006ff8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ffc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007000:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007004:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007008:	42a5      	cmp	r5, r4
 800700a:	d003      	beq.n	8007014 <__mcmp+0x2c>
 800700c:	d305      	bcc.n	800701a <__mcmp+0x32>
 800700e:	2201      	movs	r2, #1
 8007010:	4610      	mov	r0, r2
 8007012:	bd30      	pop	{r4, r5, pc}
 8007014:	4283      	cmp	r3, r0
 8007016:	d3f3      	bcc.n	8007000 <__mcmp+0x18>
 8007018:	e7fa      	b.n	8007010 <__mcmp+0x28>
 800701a:	f04f 32ff 	mov.w	r2, #4294967295
 800701e:	e7f7      	b.n	8007010 <__mcmp+0x28>

08007020 <__mdiff>:
 8007020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	460c      	mov	r4, r1
 8007026:	4606      	mov	r6, r0
 8007028:	4611      	mov	r1, r2
 800702a:	4620      	mov	r0, r4
 800702c:	4617      	mov	r7, r2
 800702e:	f7ff ffdb 	bl	8006fe8 <__mcmp>
 8007032:	1e05      	subs	r5, r0, #0
 8007034:	d110      	bne.n	8007058 <__mdiff+0x38>
 8007036:	4629      	mov	r1, r5
 8007038:	4630      	mov	r0, r6
 800703a:	f7ff fd57 	bl	8006aec <_Balloc>
 800703e:	b930      	cbnz	r0, 800704e <__mdiff+0x2e>
 8007040:	4b39      	ldr	r3, [pc, #228]	; (8007128 <__mdiff+0x108>)
 8007042:	4602      	mov	r2, r0
 8007044:	f240 2132 	movw	r1, #562	; 0x232
 8007048:	4838      	ldr	r0, [pc, #224]	; (800712c <__mdiff+0x10c>)
 800704a:	f000 fb47 	bl	80076dc <__assert_func>
 800704e:	2301      	movs	r3, #1
 8007050:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007054:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007058:	bfa4      	itt	ge
 800705a:	463b      	movge	r3, r7
 800705c:	4627      	movge	r7, r4
 800705e:	4630      	mov	r0, r6
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	bfa6      	itte	ge
 8007064:	461c      	movge	r4, r3
 8007066:	2500      	movge	r5, #0
 8007068:	2501      	movlt	r5, #1
 800706a:	f7ff fd3f 	bl	8006aec <_Balloc>
 800706e:	b920      	cbnz	r0, 800707a <__mdiff+0x5a>
 8007070:	4b2d      	ldr	r3, [pc, #180]	; (8007128 <__mdiff+0x108>)
 8007072:	4602      	mov	r2, r0
 8007074:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007078:	e7e6      	b.n	8007048 <__mdiff+0x28>
 800707a:	693e      	ldr	r6, [r7, #16]
 800707c:	60c5      	str	r5, [r0, #12]
 800707e:	6925      	ldr	r5, [r4, #16]
 8007080:	f107 0114 	add.w	r1, r7, #20
 8007084:	f104 0914 	add.w	r9, r4, #20
 8007088:	f100 0e14 	add.w	lr, r0, #20
 800708c:	f107 0210 	add.w	r2, r7, #16
 8007090:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007094:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007098:	46f2      	mov	sl, lr
 800709a:	2700      	movs	r7, #0
 800709c:	f859 3b04 	ldr.w	r3, [r9], #4
 80070a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80070a4:	fa1f f883 	uxth.w	r8, r3
 80070a8:	fa17 f78b 	uxtah	r7, r7, fp
 80070ac:	0c1b      	lsrs	r3, r3, #16
 80070ae:	eba7 0808 	sub.w	r8, r7, r8
 80070b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80070b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80070ba:	fa1f f888 	uxth.w	r8, r8
 80070be:	141f      	asrs	r7, r3, #16
 80070c0:	454d      	cmp	r5, r9
 80070c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80070c6:	f84a 3b04 	str.w	r3, [sl], #4
 80070ca:	d8e7      	bhi.n	800709c <__mdiff+0x7c>
 80070cc:	1b2b      	subs	r3, r5, r4
 80070ce:	3b15      	subs	r3, #21
 80070d0:	f023 0303 	bic.w	r3, r3, #3
 80070d4:	3304      	adds	r3, #4
 80070d6:	3415      	adds	r4, #21
 80070d8:	42a5      	cmp	r5, r4
 80070da:	bf38      	it	cc
 80070dc:	2304      	movcc	r3, #4
 80070de:	4419      	add	r1, r3
 80070e0:	4473      	add	r3, lr
 80070e2:	469e      	mov	lr, r3
 80070e4:	460d      	mov	r5, r1
 80070e6:	4565      	cmp	r5, ip
 80070e8:	d30e      	bcc.n	8007108 <__mdiff+0xe8>
 80070ea:	f10c 0203 	add.w	r2, ip, #3
 80070ee:	1a52      	subs	r2, r2, r1
 80070f0:	f022 0203 	bic.w	r2, r2, #3
 80070f4:	3903      	subs	r1, #3
 80070f6:	458c      	cmp	ip, r1
 80070f8:	bf38      	it	cc
 80070fa:	2200      	movcc	r2, #0
 80070fc:	441a      	add	r2, r3
 80070fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007102:	b17b      	cbz	r3, 8007124 <__mdiff+0x104>
 8007104:	6106      	str	r6, [r0, #16]
 8007106:	e7a5      	b.n	8007054 <__mdiff+0x34>
 8007108:	f855 8b04 	ldr.w	r8, [r5], #4
 800710c:	fa17 f488 	uxtah	r4, r7, r8
 8007110:	1422      	asrs	r2, r4, #16
 8007112:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007116:	b2a4      	uxth	r4, r4
 8007118:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800711c:	f84e 4b04 	str.w	r4, [lr], #4
 8007120:	1417      	asrs	r7, r2, #16
 8007122:	e7e0      	b.n	80070e6 <__mdiff+0xc6>
 8007124:	3e01      	subs	r6, #1
 8007126:	e7ea      	b.n	80070fe <__mdiff+0xde>
 8007128:	08007a3f 	.word	0x08007a3f
 800712c:	08007ab0 	.word	0x08007ab0

08007130 <__d2b>:
 8007130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007134:	4689      	mov	r9, r1
 8007136:	2101      	movs	r1, #1
 8007138:	ec57 6b10 	vmov	r6, r7, d0
 800713c:	4690      	mov	r8, r2
 800713e:	f7ff fcd5 	bl	8006aec <_Balloc>
 8007142:	4604      	mov	r4, r0
 8007144:	b930      	cbnz	r0, 8007154 <__d2b+0x24>
 8007146:	4602      	mov	r2, r0
 8007148:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <__d2b+0xb0>)
 800714a:	4826      	ldr	r0, [pc, #152]	; (80071e4 <__d2b+0xb4>)
 800714c:	f240 310a 	movw	r1, #778	; 0x30a
 8007150:	f000 fac4 	bl	80076dc <__assert_func>
 8007154:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007158:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800715c:	bb35      	cbnz	r5, 80071ac <__d2b+0x7c>
 800715e:	2e00      	cmp	r6, #0
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	d028      	beq.n	80071b6 <__d2b+0x86>
 8007164:	4668      	mov	r0, sp
 8007166:	9600      	str	r6, [sp, #0]
 8007168:	f7ff fd8c 	bl	8006c84 <__lo0bits>
 800716c:	9900      	ldr	r1, [sp, #0]
 800716e:	b300      	cbz	r0, 80071b2 <__d2b+0x82>
 8007170:	9a01      	ldr	r2, [sp, #4]
 8007172:	f1c0 0320 	rsb	r3, r0, #32
 8007176:	fa02 f303 	lsl.w	r3, r2, r3
 800717a:	430b      	orrs	r3, r1
 800717c:	40c2      	lsrs	r2, r0
 800717e:	6163      	str	r3, [r4, #20]
 8007180:	9201      	str	r2, [sp, #4]
 8007182:	9b01      	ldr	r3, [sp, #4]
 8007184:	61a3      	str	r3, [r4, #24]
 8007186:	2b00      	cmp	r3, #0
 8007188:	bf14      	ite	ne
 800718a:	2202      	movne	r2, #2
 800718c:	2201      	moveq	r2, #1
 800718e:	6122      	str	r2, [r4, #16]
 8007190:	b1d5      	cbz	r5, 80071c8 <__d2b+0x98>
 8007192:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007196:	4405      	add	r5, r0
 8007198:	f8c9 5000 	str.w	r5, [r9]
 800719c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071a0:	f8c8 0000 	str.w	r0, [r8]
 80071a4:	4620      	mov	r0, r4
 80071a6:	b003      	add	sp, #12
 80071a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071b0:	e7d5      	b.n	800715e <__d2b+0x2e>
 80071b2:	6161      	str	r1, [r4, #20]
 80071b4:	e7e5      	b.n	8007182 <__d2b+0x52>
 80071b6:	a801      	add	r0, sp, #4
 80071b8:	f7ff fd64 	bl	8006c84 <__lo0bits>
 80071bc:	9b01      	ldr	r3, [sp, #4]
 80071be:	6163      	str	r3, [r4, #20]
 80071c0:	2201      	movs	r2, #1
 80071c2:	6122      	str	r2, [r4, #16]
 80071c4:	3020      	adds	r0, #32
 80071c6:	e7e3      	b.n	8007190 <__d2b+0x60>
 80071c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071d0:	f8c9 0000 	str.w	r0, [r9]
 80071d4:	6918      	ldr	r0, [r3, #16]
 80071d6:	f7ff fd35 	bl	8006c44 <__hi0bits>
 80071da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071de:	e7df      	b.n	80071a0 <__d2b+0x70>
 80071e0:	08007a3f 	.word	0x08007a3f
 80071e4:	08007ab0 	.word	0x08007ab0

080071e8 <_calloc_r>:
 80071e8:	b513      	push	{r0, r1, r4, lr}
 80071ea:	434a      	muls	r2, r1
 80071ec:	4611      	mov	r1, r2
 80071ee:	9201      	str	r2, [sp, #4]
 80071f0:	f000 f85a 	bl	80072a8 <_malloc_r>
 80071f4:	4604      	mov	r4, r0
 80071f6:	b118      	cbz	r0, 8007200 <_calloc_r+0x18>
 80071f8:	9a01      	ldr	r2, [sp, #4]
 80071fa:	2100      	movs	r1, #0
 80071fc:	f7fd fe04 	bl	8004e08 <memset>
 8007200:	4620      	mov	r0, r4
 8007202:	b002      	add	sp, #8
 8007204:	bd10      	pop	{r4, pc}
	...

08007208 <_free_r>:
 8007208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800720a:	2900      	cmp	r1, #0
 800720c:	d048      	beq.n	80072a0 <_free_r+0x98>
 800720e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007212:	9001      	str	r0, [sp, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f1a1 0404 	sub.w	r4, r1, #4
 800721a:	bfb8      	it	lt
 800721c:	18e4      	addlt	r4, r4, r3
 800721e:	f000 fae3 	bl	80077e8 <__malloc_lock>
 8007222:	4a20      	ldr	r2, [pc, #128]	; (80072a4 <_free_r+0x9c>)
 8007224:	9801      	ldr	r0, [sp, #4]
 8007226:	6813      	ldr	r3, [r2, #0]
 8007228:	4615      	mov	r5, r2
 800722a:	b933      	cbnz	r3, 800723a <_free_r+0x32>
 800722c:	6063      	str	r3, [r4, #4]
 800722e:	6014      	str	r4, [r2, #0]
 8007230:	b003      	add	sp, #12
 8007232:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007236:	f000 badd 	b.w	80077f4 <__malloc_unlock>
 800723a:	42a3      	cmp	r3, r4
 800723c:	d90b      	bls.n	8007256 <_free_r+0x4e>
 800723e:	6821      	ldr	r1, [r4, #0]
 8007240:	1862      	adds	r2, r4, r1
 8007242:	4293      	cmp	r3, r2
 8007244:	bf04      	itt	eq
 8007246:	681a      	ldreq	r2, [r3, #0]
 8007248:	685b      	ldreq	r3, [r3, #4]
 800724a:	6063      	str	r3, [r4, #4]
 800724c:	bf04      	itt	eq
 800724e:	1852      	addeq	r2, r2, r1
 8007250:	6022      	streq	r2, [r4, #0]
 8007252:	602c      	str	r4, [r5, #0]
 8007254:	e7ec      	b.n	8007230 <_free_r+0x28>
 8007256:	461a      	mov	r2, r3
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	b10b      	cbz	r3, 8007260 <_free_r+0x58>
 800725c:	42a3      	cmp	r3, r4
 800725e:	d9fa      	bls.n	8007256 <_free_r+0x4e>
 8007260:	6811      	ldr	r1, [r2, #0]
 8007262:	1855      	adds	r5, r2, r1
 8007264:	42a5      	cmp	r5, r4
 8007266:	d10b      	bne.n	8007280 <_free_r+0x78>
 8007268:	6824      	ldr	r4, [r4, #0]
 800726a:	4421      	add	r1, r4
 800726c:	1854      	adds	r4, r2, r1
 800726e:	42a3      	cmp	r3, r4
 8007270:	6011      	str	r1, [r2, #0]
 8007272:	d1dd      	bne.n	8007230 <_free_r+0x28>
 8007274:	681c      	ldr	r4, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	6053      	str	r3, [r2, #4]
 800727a:	4421      	add	r1, r4
 800727c:	6011      	str	r1, [r2, #0]
 800727e:	e7d7      	b.n	8007230 <_free_r+0x28>
 8007280:	d902      	bls.n	8007288 <_free_r+0x80>
 8007282:	230c      	movs	r3, #12
 8007284:	6003      	str	r3, [r0, #0]
 8007286:	e7d3      	b.n	8007230 <_free_r+0x28>
 8007288:	6825      	ldr	r5, [r4, #0]
 800728a:	1961      	adds	r1, r4, r5
 800728c:	428b      	cmp	r3, r1
 800728e:	bf04      	itt	eq
 8007290:	6819      	ldreq	r1, [r3, #0]
 8007292:	685b      	ldreq	r3, [r3, #4]
 8007294:	6063      	str	r3, [r4, #4]
 8007296:	bf04      	itt	eq
 8007298:	1949      	addeq	r1, r1, r5
 800729a:	6021      	streq	r1, [r4, #0]
 800729c:	6054      	str	r4, [r2, #4]
 800729e:	e7c7      	b.n	8007230 <_free_r+0x28>
 80072a0:	b003      	add	sp, #12
 80072a2:	bd30      	pop	{r4, r5, pc}
 80072a4:	20000200 	.word	0x20000200

080072a8 <_malloc_r>:
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072aa:	1ccd      	adds	r5, r1, #3
 80072ac:	f025 0503 	bic.w	r5, r5, #3
 80072b0:	3508      	adds	r5, #8
 80072b2:	2d0c      	cmp	r5, #12
 80072b4:	bf38      	it	cc
 80072b6:	250c      	movcc	r5, #12
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	4606      	mov	r6, r0
 80072bc:	db01      	blt.n	80072c2 <_malloc_r+0x1a>
 80072be:	42a9      	cmp	r1, r5
 80072c0:	d903      	bls.n	80072ca <_malloc_r+0x22>
 80072c2:	230c      	movs	r3, #12
 80072c4:	6033      	str	r3, [r6, #0]
 80072c6:	2000      	movs	r0, #0
 80072c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ca:	f000 fa8d 	bl	80077e8 <__malloc_lock>
 80072ce:	4921      	ldr	r1, [pc, #132]	; (8007354 <_malloc_r+0xac>)
 80072d0:	680a      	ldr	r2, [r1, #0]
 80072d2:	4614      	mov	r4, r2
 80072d4:	b99c      	cbnz	r4, 80072fe <_malloc_r+0x56>
 80072d6:	4f20      	ldr	r7, [pc, #128]	; (8007358 <_malloc_r+0xb0>)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	b923      	cbnz	r3, 80072e6 <_malloc_r+0x3e>
 80072dc:	4621      	mov	r1, r4
 80072de:	4630      	mov	r0, r6
 80072e0:	f000 f996 	bl	8007610 <_sbrk_r>
 80072e4:	6038      	str	r0, [r7, #0]
 80072e6:	4629      	mov	r1, r5
 80072e8:	4630      	mov	r0, r6
 80072ea:	f000 f991 	bl	8007610 <_sbrk_r>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	d123      	bne.n	800733a <_malloc_r+0x92>
 80072f2:	230c      	movs	r3, #12
 80072f4:	6033      	str	r3, [r6, #0]
 80072f6:	4630      	mov	r0, r6
 80072f8:	f000 fa7c 	bl	80077f4 <__malloc_unlock>
 80072fc:	e7e3      	b.n	80072c6 <_malloc_r+0x1e>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	1b5b      	subs	r3, r3, r5
 8007302:	d417      	bmi.n	8007334 <_malloc_r+0x8c>
 8007304:	2b0b      	cmp	r3, #11
 8007306:	d903      	bls.n	8007310 <_malloc_r+0x68>
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	441c      	add	r4, r3
 800730c:	6025      	str	r5, [r4, #0]
 800730e:	e004      	b.n	800731a <_malloc_r+0x72>
 8007310:	6863      	ldr	r3, [r4, #4]
 8007312:	42a2      	cmp	r2, r4
 8007314:	bf0c      	ite	eq
 8007316:	600b      	streq	r3, [r1, #0]
 8007318:	6053      	strne	r3, [r2, #4]
 800731a:	4630      	mov	r0, r6
 800731c:	f000 fa6a 	bl	80077f4 <__malloc_unlock>
 8007320:	f104 000b 	add.w	r0, r4, #11
 8007324:	1d23      	adds	r3, r4, #4
 8007326:	f020 0007 	bic.w	r0, r0, #7
 800732a:	1ac2      	subs	r2, r0, r3
 800732c:	d0cc      	beq.n	80072c8 <_malloc_r+0x20>
 800732e:	1a1b      	subs	r3, r3, r0
 8007330:	50a3      	str	r3, [r4, r2]
 8007332:	e7c9      	b.n	80072c8 <_malloc_r+0x20>
 8007334:	4622      	mov	r2, r4
 8007336:	6864      	ldr	r4, [r4, #4]
 8007338:	e7cc      	b.n	80072d4 <_malloc_r+0x2c>
 800733a:	1cc4      	adds	r4, r0, #3
 800733c:	f024 0403 	bic.w	r4, r4, #3
 8007340:	42a0      	cmp	r0, r4
 8007342:	d0e3      	beq.n	800730c <_malloc_r+0x64>
 8007344:	1a21      	subs	r1, r4, r0
 8007346:	4630      	mov	r0, r6
 8007348:	f000 f962 	bl	8007610 <_sbrk_r>
 800734c:	3001      	adds	r0, #1
 800734e:	d1dd      	bne.n	800730c <_malloc_r+0x64>
 8007350:	e7cf      	b.n	80072f2 <_malloc_r+0x4a>
 8007352:	bf00      	nop
 8007354:	20000200 	.word	0x20000200
 8007358:	20000204 	.word	0x20000204

0800735c <__sfputc_r>:
 800735c:	6893      	ldr	r3, [r2, #8]
 800735e:	3b01      	subs	r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	b410      	push	{r4}
 8007364:	6093      	str	r3, [r2, #8]
 8007366:	da08      	bge.n	800737a <__sfputc_r+0x1e>
 8007368:	6994      	ldr	r4, [r2, #24]
 800736a:	42a3      	cmp	r3, r4
 800736c:	db01      	blt.n	8007372 <__sfputc_r+0x16>
 800736e:	290a      	cmp	r1, #10
 8007370:	d103      	bne.n	800737a <__sfputc_r+0x1e>
 8007372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007376:	f7fe ba47 	b.w	8005808 <__swbuf_r>
 800737a:	6813      	ldr	r3, [r2, #0]
 800737c:	1c58      	adds	r0, r3, #1
 800737e:	6010      	str	r0, [r2, #0]
 8007380:	7019      	strb	r1, [r3, #0]
 8007382:	4608      	mov	r0, r1
 8007384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007388:	4770      	bx	lr

0800738a <__sfputs_r>:
 800738a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738c:	4606      	mov	r6, r0
 800738e:	460f      	mov	r7, r1
 8007390:	4614      	mov	r4, r2
 8007392:	18d5      	adds	r5, r2, r3
 8007394:	42ac      	cmp	r4, r5
 8007396:	d101      	bne.n	800739c <__sfputs_r+0x12>
 8007398:	2000      	movs	r0, #0
 800739a:	e007      	b.n	80073ac <__sfputs_r+0x22>
 800739c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073a0:	463a      	mov	r2, r7
 80073a2:	4630      	mov	r0, r6
 80073a4:	f7ff ffda 	bl	800735c <__sfputc_r>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d1f3      	bne.n	8007394 <__sfputs_r+0xa>
 80073ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073b0 <_vfiprintf_r>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	460d      	mov	r5, r1
 80073b6:	b09d      	sub	sp, #116	; 0x74
 80073b8:	4614      	mov	r4, r2
 80073ba:	4698      	mov	r8, r3
 80073bc:	4606      	mov	r6, r0
 80073be:	b118      	cbz	r0, 80073c8 <_vfiprintf_r+0x18>
 80073c0:	6983      	ldr	r3, [r0, #24]
 80073c2:	b90b      	cbnz	r3, 80073c8 <_vfiprintf_r+0x18>
 80073c4:	f7ff fa72 	bl	80068ac <__sinit>
 80073c8:	4b89      	ldr	r3, [pc, #548]	; (80075f0 <_vfiprintf_r+0x240>)
 80073ca:	429d      	cmp	r5, r3
 80073cc:	d11b      	bne.n	8007406 <_vfiprintf_r+0x56>
 80073ce:	6875      	ldr	r5, [r6, #4]
 80073d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073d2:	07d9      	lsls	r1, r3, #31
 80073d4:	d405      	bmi.n	80073e2 <_vfiprintf_r+0x32>
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	059a      	lsls	r2, r3, #22
 80073da:	d402      	bmi.n	80073e2 <_vfiprintf_r+0x32>
 80073dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073de:	f7ff fb08 	bl	80069f2 <__retarget_lock_acquire_recursive>
 80073e2:	89ab      	ldrh	r3, [r5, #12]
 80073e4:	071b      	lsls	r3, r3, #28
 80073e6:	d501      	bpl.n	80073ec <_vfiprintf_r+0x3c>
 80073e8:	692b      	ldr	r3, [r5, #16]
 80073ea:	b9eb      	cbnz	r3, 8007428 <_vfiprintf_r+0x78>
 80073ec:	4629      	mov	r1, r5
 80073ee:	4630      	mov	r0, r6
 80073f0:	f7fe fa5c 	bl	80058ac <__swsetup_r>
 80073f4:	b1c0      	cbz	r0, 8007428 <_vfiprintf_r+0x78>
 80073f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073f8:	07dc      	lsls	r4, r3, #31
 80073fa:	d50e      	bpl.n	800741a <_vfiprintf_r+0x6a>
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	b01d      	add	sp, #116	; 0x74
 8007402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007406:	4b7b      	ldr	r3, [pc, #492]	; (80075f4 <_vfiprintf_r+0x244>)
 8007408:	429d      	cmp	r5, r3
 800740a:	d101      	bne.n	8007410 <_vfiprintf_r+0x60>
 800740c:	68b5      	ldr	r5, [r6, #8]
 800740e:	e7df      	b.n	80073d0 <_vfiprintf_r+0x20>
 8007410:	4b79      	ldr	r3, [pc, #484]	; (80075f8 <_vfiprintf_r+0x248>)
 8007412:	429d      	cmp	r5, r3
 8007414:	bf08      	it	eq
 8007416:	68f5      	ldreq	r5, [r6, #12]
 8007418:	e7da      	b.n	80073d0 <_vfiprintf_r+0x20>
 800741a:	89ab      	ldrh	r3, [r5, #12]
 800741c:	0598      	lsls	r0, r3, #22
 800741e:	d4ed      	bmi.n	80073fc <_vfiprintf_r+0x4c>
 8007420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007422:	f7ff fae7 	bl	80069f4 <__retarget_lock_release_recursive>
 8007426:	e7e9      	b.n	80073fc <_vfiprintf_r+0x4c>
 8007428:	2300      	movs	r3, #0
 800742a:	9309      	str	r3, [sp, #36]	; 0x24
 800742c:	2320      	movs	r3, #32
 800742e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007432:	f8cd 800c 	str.w	r8, [sp, #12]
 8007436:	2330      	movs	r3, #48	; 0x30
 8007438:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80075fc <_vfiprintf_r+0x24c>
 800743c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007440:	f04f 0901 	mov.w	r9, #1
 8007444:	4623      	mov	r3, r4
 8007446:	469a      	mov	sl, r3
 8007448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800744c:	b10a      	cbz	r2, 8007452 <_vfiprintf_r+0xa2>
 800744e:	2a25      	cmp	r2, #37	; 0x25
 8007450:	d1f9      	bne.n	8007446 <_vfiprintf_r+0x96>
 8007452:	ebba 0b04 	subs.w	fp, sl, r4
 8007456:	d00b      	beq.n	8007470 <_vfiprintf_r+0xc0>
 8007458:	465b      	mov	r3, fp
 800745a:	4622      	mov	r2, r4
 800745c:	4629      	mov	r1, r5
 800745e:	4630      	mov	r0, r6
 8007460:	f7ff ff93 	bl	800738a <__sfputs_r>
 8007464:	3001      	adds	r0, #1
 8007466:	f000 80aa 	beq.w	80075be <_vfiprintf_r+0x20e>
 800746a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800746c:	445a      	add	r2, fp
 800746e:	9209      	str	r2, [sp, #36]	; 0x24
 8007470:	f89a 3000 	ldrb.w	r3, [sl]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 80a2 	beq.w	80075be <_vfiprintf_r+0x20e>
 800747a:	2300      	movs	r3, #0
 800747c:	f04f 32ff 	mov.w	r2, #4294967295
 8007480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007484:	f10a 0a01 	add.w	sl, sl, #1
 8007488:	9304      	str	r3, [sp, #16]
 800748a:	9307      	str	r3, [sp, #28]
 800748c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007490:	931a      	str	r3, [sp, #104]	; 0x68
 8007492:	4654      	mov	r4, sl
 8007494:	2205      	movs	r2, #5
 8007496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749a:	4858      	ldr	r0, [pc, #352]	; (80075fc <_vfiprintf_r+0x24c>)
 800749c:	f7f8 fea0 	bl	80001e0 <memchr>
 80074a0:	9a04      	ldr	r2, [sp, #16]
 80074a2:	b9d8      	cbnz	r0, 80074dc <_vfiprintf_r+0x12c>
 80074a4:	06d1      	lsls	r1, r2, #27
 80074a6:	bf44      	itt	mi
 80074a8:	2320      	movmi	r3, #32
 80074aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ae:	0713      	lsls	r3, r2, #28
 80074b0:	bf44      	itt	mi
 80074b2:	232b      	movmi	r3, #43	; 0x2b
 80074b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074b8:	f89a 3000 	ldrb.w	r3, [sl]
 80074bc:	2b2a      	cmp	r3, #42	; 0x2a
 80074be:	d015      	beq.n	80074ec <_vfiprintf_r+0x13c>
 80074c0:	9a07      	ldr	r2, [sp, #28]
 80074c2:	4654      	mov	r4, sl
 80074c4:	2000      	movs	r0, #0
 80074c6:	f04f 0c0a 	mov.w	ip, #10
 80074ca:	4621      	mov	r1, r4
 80074cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074d0:	3b30      	subs	r3, #48	; 0x30
 80074d2:	2b09      	cmp	r3, #9
 80074d4:	d94e      	bls.n	8007574 <_vfiprintf_r+0x1c4>
 80074d6:	b1b0      	cbz	r0, 8007506 <_vfiprintf_r+0x156>
 80074d8:	9207      	str	r2, [sp, #28]
 80074da:	e014      	b.n	8007506 <_vfiprintf_r+0x156>
 80074dc:	eba0 0308 	sub.w	r3, r0, r8
 80074e0:	fa09 f303 	lsl.w	r3, r9, r3
 80074e4:	4313      	orrs	r3, r2
 80074e6:	9304      	str	r3, [sp, #16]
 80074e8:	46a2      	mov	sl, r4
 80074ea:	e7d2      	b.n	8007492 <_vfiprintf_r+0xe2>
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	1d19      	adds	r1, r3, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	9103      	str	r1, [sp, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bfbb      	ittet	lt
 80074f8:	425b      	neglt	r3, r3
 80074fa:	f042 0202 	orrlt.w	r2, r2, #2
 80074fe:	9307      	strge	r3, [sp, #28]
 8007500:	9307      	strlt	r3, [sp, #28]
 8007502:	bfb8      	it	lt
 8007504:	9204      	strlt	r2, [sp, #16]
 8007506:	7823      	ldrb	r3, [r4, #0]
 8007508:	2b2e      	cmp	r3, #46	; 0x2e
 800750a:	d10c      	bne.n	8007526 <_vfiprintf_r+0x176>
 800750c:	7863      	ldrb	r3, [r4, #1]
 800750e:	2b2a      	cmp	r3, #42	; 0x2a
 8007510:	d135      	bne.n	800757e <_vfiprintf_r+0x1ce>
 8007512:	9b03      	ldr	r3, [sp, #12]
 8007514:	1d1a      	adds	r2, r3, #4
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	9203      	str	r2, [sp, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	bfb8      	it	lt
 800751e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007522:	3402      	adds	r4, #2
 8007524:	9305      	str	r3, [sp, #20]
 8007526:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800760c <_vfiprintf_r+0x25c>
 800752a:	7821      	ldrb	r1, [r4, #0]
 800752c:	2203      	movs	r2, #3
 800752e:	4650      	mov	r0, sl
 8007530:	f7f8 fe56 	bl	80001e0 <memchr>
 8007534:	b140      	cbz	r0, 8007548 <_vfiprintf_r+0x198>
 8007536:	2340      	movs	r3, #64	; 0x40
 8007538:	eba0 000a 	sub.w	r0, r0, sl
 800753c:	fa03 f000 	lsl.w	r0, r3, r0
 8007540:	9b04      	ldr	r3, [sp, #16]
 8007542:	4303      	orrs	r3, r0
 8007544:	3401      	adds	r4, #1
 8007546:	9304      	str	r3, [sp, #16]
 8007548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754c:	482c      	ldr	r0, [pc, #176]	; (8007600 <_vfiprintf_r+0x250>)
 800754e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007552:	2206      	movs	r2, #6
 8007554:	f7f8 fe44 	bl	80001e0 <memchr>
 8007558:	2800      	cmp	r0, #0
 800755a:	d03f      	beq.n	80075dc <_vfiprintf_r+0x22c>
 800755c:	4b29      	ldr	r3, [pc, #164]	; (8007604 <_vfiprintf_r+0x254>)
 800755e:	bb1b      	cbnz	r3, 80075a8 <_vfiprintf_r+0x1f8>
 8007560:	9b03      	ldr	r3, [sp, #12]
 8007562:	3307      	adds	r3, #7
 8007564:	f023 0307 	bic.w	r3, r3, #7
 8007568:	3308      	adds	r3, #8
 800756a:	9303      	str	r3, [sp, #12]
 800756c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800756e:	443b      	add	r3, r7
 8007570:	9309      	str	r3, [sp, #36]	; 0x24
 8007572:	e767      	b.n	8007444 <_vfiprintf_r+0x94>
 8007574:	fb0c 3202 	mla	r2, ip, r2, r3
 8007578:	460c      	mov	r4, r1
 800757a:	2001      	movs	r0, #1
 800757c:	e7a5      	b.n	80074ca <_vfiprintf_r+0x11a>
 800757e:	2300      	movs	r3, #0
 8007580:	3401      	adds	r4, #1
 8007582:	9305      	str	r3, [sp, #20]
 8007584:	4619      	mov	r1, r3
 8007586:	f04f 0c0a 	mov.w	ip, #10
 800758a:	4620      	mov	r0, r4
 800758c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007590:	3a30      	subs	r2, #48	; 0x30
 8007592:	2a09      	cmp	r2, #9
 8007594:	d903      	bls.n	800759e <_vfiprintf_r+0x1ee>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0c5      	beq.n	8007526 <_vfiprintf_r+0x176>
 800759a:	9105      	str	r1, [sp, #20]
 800759c:	e7c3      	b.n	8007526 <_vfiprintf_r+0x176>
 800759e:	fb0c 2101 	mla	r1, ip, r1, r2
 80075a2:	4604      	mov	r4, r0
 80075a4:	2301      	movs	r3, #1
 80075a6:	e7f0      	b.n	800758a <_vfiprintf_r+0x1da>
 80075a8:	ab03      	add	r3, sp, #12
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	462a      	mov	r2, r5
 80075ae:	4b16      	ldr	r3, [pc, #88]	; (8007608 <_vfiprintf_r+0x258>)
 80075b0:	a904      	add	r1, sp, #16
 80075b2:	4630      	mov	r0, r6
 80075b4:	f7fd fcd0 	bl	8004f58 <_printf_float>
 80075b8:	4607      	mov	r7, r0
 80075ba:	1c78      	adds	r0, r7, #1
 80075bc:	d1d6      	bne.n	800756c <_vfiprintf_r+0x1bc>
 80075be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075c0:	07d9      	lsls	r1, r3, #31
 80075c2:	d405      	bmi.n	80075d0 <_vfiprintf_r+0x220>
 80075c4:	89ab      	ldrh	r3, [r5, #12]
 80075c6:	059a      	lsls	r2, r3, #22
 80075c8:	d402      	bmi.n	80075d0 <_vfiprintf_r+0x220>
 80075ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075cc:	f7ff fa12 	bl	80069f4 <__retarget_lock_release_recursive>
 80075d0:	89ab      	ldrh	r3, [r5, #12]
 80075d2:	065b      	lsls	r3, r3, #25
 80075d4:	f53f af12 	bmi.w	80073fc <_vfiprintf_r+0x4c>
 80075d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075da:	e711      	b.n	8007400 <_vfiprintf_r+0x50>
 80075dc:	ab03      	add	r3, sp, #12
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	462a      	mov	r2, r5
 80075e2:	4b09      	ldr	r3, [pc, #36]	; (8007608 <_vfiprintf_r+0x258>)
 80075e4:	a904      	add	r1, sp, #16
 80075e6:	4630      	mov	r0, r6
 80075e8:	f7fd ff5a 	bl	80054a0 <_printf_i>
 80075ec:	e7e4      	b.n	80075b8 <_vfiprintf_r+0x208>
 80075ee:	bf00      	nop
 80075f0:	08007a70 	.word	0x08007a70
 80075f4:	08007a90 	.word	0x08007a90
 80075f8:	08007a50 	.word	0x08007a50
 80075fc:	08007c0c 	.word	0x08007c0c
 8007600:	08007c16 	.word	0x08007c16
 8007604:	08004f59 	.word	0x08004f59
 8007608:	0800738b 	.word	0x0800738b
 800760c:	08007c12 	.word	0x08007c12

08007610 <_sbrk_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	4d06      	ldr	r5, [pc, #24]	; (800762c <_sbrk_r+0x1c>)
 8007614:	2300      	movs	r3, #0
 8007616:	4604      	mov	r4, r0
 8007618:	4608      	mov	r0, r1
 800761a:	602b      	str	r3, [r5, #0]
 800761c:	f7fa fa78 	bl	8001b10 <_sbrk>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d102      	bne.n	800762a <_sbrk_r+0x1a>
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	b103      	cbz	r3, 800762a <_sbrk_r+0x1a>
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	2000035c 	.word	0x2000035c

08007630 <__sread>:
 8007630:	b510      	push	{r4, lr}
 8007632:	460c      	mov	r4, r1
 8007634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007638:	f000 f8e2 	bl	8007800 <_read_r>
 800763c:	2800      	cmp	r0, #0
 800763e:	bfab      	itete	ge
 8007640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007642:	89a3      	ldrhlt	r3, [r4, #12]
 8007644:	181b      	addge	r3, r3, r0
 8007646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800764a:	bfac      	ite	ge
 800764c:	6563      	strge	r3, [r4, #84]	; 0x54
 800764e:	81a3      	strhlt	r3, [r4, #12]
 8007650:	bd10      	pop	{r4, pc}

08007652 <__swrite>:
 8007652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007656:	461f      	mov	r7, r3
 8007658:	898b      	ldrh	r3, [r1, #12]
 800765a:	05db      	lsls	r3, r3, #23
 800765c:	4605      	mov	r5, r0
 800765e:	460c      	mov	r4, r1
 8007660:	4616      	mov	r6, r2
 8007662:	d505      	bpl.n	8007670 <__swrite+0x1e>
 8007664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007668:	2302      	movs	r3, #2
 800766a:	2200      	movs	r2, #0
 800766c:	f000 f898 	bl	80077a0 <_lseek_r>
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800767a:	81a3      	strh	r3, [r4, #12]
 800767c:	4632      	mov	r2, r6
 800767e:	463b      	mov	r3, r7
 8007680:	4628      	mov	r0, r5
 8007682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007686:	f000 b817 	b.w	80076b8 <_write_r>

0800768a <__sseek>:
 800768a:	b510      	push	{r4, lr}
 800768c:	460c      	mov	r4, r1
 800768e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007692:	f000 f885 	bl	80077a0 <_lseek_r>
 8007696:	1c43      	adds	r3, r0, #1
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	bf15      	itete	ne
 800769c:	6560      	strne	r0, [r4, #84]	; 0x54
 800769e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076a6:	81a3      	strheq	r3, [r4, #12]
 80076a8:	bf18      	it	ne
 80076aa:	81a3      	strhne	r3, [r4, #12]
 80076ac:	bd10      	pop	{r4, pc}

080076ae <__sclose>:
 80076ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b2:	f000 b831 	b.w	8007718 <_close_r>
	...

080076b8 <_write_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4d07      	ldr	r5, [pc, #28]	; (80076d8 <_write_r+0x20>)
 80076bc:	4604      	mov	r4, r0
 80076be:	4608      	mov	r0, r1
 80076c0:	4611      	mov	r1, r2
 80076c2:	2200      	movs	r2, #0
 80076c4:	602a      	str	r2, [r5, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	f7fa f844 	bl	8001754 <_write>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	d102      	bne.n	80076d6 <_write_r+0x1e>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	b103      	cbz	r3, 80076d6 <_write_r+0x1e>
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	2000035c 	.word	0x2000035c

080076dc <__assert_func>:
 80076dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076de:	4614      	mov	r4, r2
 80076e0:	461a      	mov	r2, r3
 80076e2:	4b09      	ldr	r3, [pc, #36]	; (8007708 <__assert_func+0x2c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4605      	mov	r5, r0
 80076e8:	68d8      	ldr	r0, [r3, #12]
 80076ea:	b14c      	cbz	r4, 8007700 <__assert_func+0x24>
 80076ec:	4b07      	ldr	r3, [pc, #28]	; (800770c <__assert_func+0x30>)
 80076ee:	9100      	str	r1, [sp, #0]
 80076f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076f4:	4906      	ldr	r1, [pc, #24]	; (8007710 <__assert_func+0x34>)
 80076f6:	462b      	mov	r3, r5
 80076f8:	f000 f81e 	bl	8007738 <fiprintf>
 80076fc:	f000 f89f 	bl	800783e <abort>
 8007700:	4b04      	ldr	r3, [pc, #16]	; (8007714 <__assert_func+0x38>)
 8007702:	461c      	mov	r4, r3
 8007704:	e7f3      	b.n	80076ee <__assert_func+0x12>
 8007706:	bf00      	nop
 8007708:	2000000c 	.word	0x2000000c
 800770c:	08007c1d 	.word	0x08007c1d
 8007710:	08007c2a 	.word	0x08007c2a
 8007714:	08007c58 	.word	0x08007c58

08007718 <_close_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4d06      	ldr	r5, [pc, #24]	; (8007734 <_close_r+0x1c>)
 800771c:	2300      	movs	r3, #0
 800771e:	4604      	mov	r4, r0
 8007720:	4608      	mov	r0, r1
 8007722:	602b      	str	r3, [r5, #0]
 8007724:	f7fa f9bf 	bl	8001aa6 <_close>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_close_r+0x1a>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	b103      	cbz	r3, 8007732 <_close_r+0x1a>
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	2000035c 	.word	0x2000035c

08007738 <fiprintf>:
 8007738:	b40e      	push	{r1, r2, r3}
 800773a:	b503      	push	{r0, r1, lr}
 800773c:	4601      	mov	r1, r0
 800773e:	ab03      	add	r3, sp, #12
 8007740:	4805      	ldr	r0, [pc, #20]	; (8007758 <fiprintf+0x20>)
 8007742:	f853 2b04 	ldr.w	r2, [r3], #4
 8007746:	6800      	ldr	r0, [r0, #0]
 8007748:	9301      	str	r3, [sp, #4]
 800774a:	f7ff fe31 	bl	80073b0 <_vfiprintf_r>
 800774e:	b002      	add	sp, #8
 8007750:	f85d eb04 	ldr.w	lr, [sp], #4
 8007754:	b003      	add	sp, #12
 8007756:	4770      	bx	lr
 8007758:	2000000c 	.word	0x2000000c

0800775c <_fstat_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d07      	ldr	r5, [pc, #28]	; (800777c <_fstat_r+0x20>)
 8007760:	2300      	movs	r3, #0
 8007762:	4604      	mov	r4, r0
 8007764:	4608      	mov	r0, r1
 8007766:	4611      	mov	r1, r2
 8007768:	602b      	str	r3, [r5, #0]
 800776a:	f7fa f9a8 	bl	8001abe <_fstat>
 800776e:	1c43      	adds	r3, r0, #1
 8007770:	d102      	bne.n	8007778 <_fstat_r+0x1c>
 8007772:	682b      	ldr	r3, [r5, #0]
 8007774:	b103      	cbz	r3, 8007778 <_fstat_r+0x1c>
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	bd38      	pop	{r3, r4, r5, pc}
 800777a:	bf00      	nop
 800777c:	2000035c 	.word	0x2000035c

08007780 <_isatty_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d06      	ldr	r5, [pc, #24]	; (800779c <_isatty_r+0x1c>)
 8007784:	2300      	movs	r3, #0
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	602b      	str	r3, [r5, #0]
 800778c:	f7fa f9a7 	bl	8001ade <_isatty>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	d102      	bne.n	800779a <_isatty_r+0x1a>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	b103      	cbz	r3, 800779a <_isatty_r+0x1a>
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	2000035c 	.word	0x2000035c

080077a0 <_lseek_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4d07      	ldr	r5, [pc, #28]	; (80077c0 <_lseek_r+0x20>)
 80077a4:	4604      	mov	r4, r0
 80077a6:	4608      	mov	r0, r1
 80077a8:	4611      	mov	r1, r2
 80077aa:	2200      	movs	r2, #0
 80077ac:	602a      	str	r2, [r5, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	f7fa f9a0 	bl	8001af4 <_lseek>
 80077b4:	1c43      	adds	r3, r0, #1
 80077b6:	d102      	bne.n	80077be <_lseek_r+0x1e>
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	b103      	cbz	r3, 80077be <_lseek_r+0x1e>
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	2000035c 	.word	0x2000035c

080077c4 <__ascii_mbtowc>:
 80077c4:	b082      	sub	sp, #8
 80077c6:	b901      	cbnz	r1, 80077ca <__ascii_mbtowc+0x6>
 80077c8:	a901      	add	r1, sp, #4
 80077ca:	b142      	cbz	r2, 80077de <__ascii_mbtowc+0x1a>
 80077cc:	b14b      	cbz	r3, 80077e2 <__ascii_mbtowc+0x1e>
 80077ce:	7813      	ldrb	r3, [r2, #0]
 80077d0:	600b      	str	r3, [r1, #0]
 80077d2:	7812      	ldrb	r2, [r2, #0]
 80077d4:	1e10      	subs	r0, r2, #0
 80077d6:	bf18      	it	ne
 80077d8:	2001      	movne	r0, #1
 80077da:	b002      	add	sp, #8
 80077dc:	4770      	bx	lr
 80077de:	4610      	mov	r0, r2
 80077e0:	e7fb      	b.n	80077da <__ascii_mbtowc+0x16>
 80077e2:	f06f 0001 	mvn.w	r0, #1
 80077e6:	e7f8      	b.n	80077da <__ascii_mbtowc+0x16>

080077e8 <__malloc_lock>:
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <__malloc_lock+0x8>)
 80077ea:	f7ff b902 	b.w	80069f2 <__retarget_lock_acquire_recursive>
 80077ee:	bf00      	nop
 80077f0:	20000354 	.word	0x20000354

080077f4 <__malloc_unlock>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__malloc_unlock+0x8>)
 80077f6:	f7ff b8fd 	b.w	80069f4 <__retarget_lock_release_recursive>
 80077fa:	bf00      	nop
 80077fc:	20000354 	.word	0x20000354

08007800 <_read_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d07      	ldr	r5, [pc, #28]	; (8007820 <_read_r+0x20>)
 8007804:	4604      	mov	r4, r0
 8007806:	4608      	mov	r0, r1
 8007808:	4611      	mov	r1, r2
 800780a:	2200      	movs	r2, #0
 800780c:	602a      	str	r2, [r5, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	f7fa f92c 	bl	8001a6c <_read>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_read_r+0x1e>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	b103      	cbz	r3, 800781e <_read_r+0x1e>
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	2000035c 	.word	0x2000035c

08007824 <__ascii_wctomb>:
 8007824:	b149      	cbz	r1, 800783a <__ascii_wctomb+0x16>
 8007826:	2aff      	cmp	r2, #255	; 0xff
 8007828:	bf85      	ittet	hi
 800782a:	238a      	movhi	r3, #138	; 0x8a
 800782c:	6003      	strhi	r3, [r0, #0]
 800782e:	700a      	strbls	r2, [r1, #0]
 8007830:	f04f 30ff 	movhi.w	r0, #4294967295
 8007834:	bf98      	it	ls
 8007836:	2001      	movls	r0, #1
 8007838:	4770      	bx	lr
 800783a:	4608      	mov	r0, r1
 800783c:	4770      	bx	lr

0800783e <abort>:
 800783e:	b508      	push	{r3, lr}
 8007840:	2006      	movs	r0, #6
 8007842:	f000 f82b 	bl	800789c <raise>
 8007846:	2001      	movs	r0, #1
 8007848:	f7fa f906 	bl	8001a58 <_exit>

0800784c <_raise_r>:
 800784c:	291f      	cmp	r1, #31
 800784e:	b538      	push	{r3, r4, r5, lr}
 8007850:	4604      	mov	r4, r0
 8007852:	460d      	mov	r5, r1
 8007854:	d904      	bls.n	8007860 <_raise_r+0x14>
 8007856:	2316      	movs	r3, #22
 8007858:	6003      	str	r3, [r0, #0]
 800785a:	f04f 30ff 	mov.w	r0, #4294967295
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007862:	b112      	cbz	r2, 800786a <_raise_r+0x1e>
 8007864:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007868:	b94b      	cbnz	r3, 800787e <_raise_r+0x32>
 800786a:	4620      	mov	r0, r4
 800786c:	f000 f830 	bl	80078d0 <_getpid_r>
 8007870:	462a      	mov	r2, r5
 8007872:	4601      	mov	r1, r0
 8007874:	4620      	mov	r0, r4
 8007876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800787a:	f000 b817 	b.w	80078ac <_kill_r>
 800787e:	2b01      	cmp	r3, #1
 8007880:	d00a      	beq.n	8007898 <_raise_r+0x4c>
 8007882:	1c59      	adds	r1, r3, #1
 8007884:	d103      	bne.n	800788e <_raise_r+0x42>
 8007886:	2316      	movs	r3, #22
 8007888:	6003      	str	r3, [r0, #0]
 800788a:	2001      	movs	r0, #1
 800788c:	e7e7      	b.n	800785e <_raise_r+0x12>
 800788e:	2400      	movs	r4, #0
 8007890:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007894:	4628      	mov	r0, r5
 8007896:	4798      	blx	r3
 8007898:	2000      	movs	r0, #0
 800789a:	e7e0      	b.n	800785e <_raise_r+0x12>

0800789c <raise>:
 800789c:	4b02      	ldr	r3, [pc, #8]	; (80078a8 <raise+0xc>)
 800789e:	4601      	mov	r1, r0
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	f7ff bfd3 	b.w	800784c <_raise_r>
 80078a6:	bf00      	nop
 80078a8:	2000000c 	.word	0x2000000c

080078ac <_kill_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d07      	ldr	r5, [pc, #28]	; (80078cc <_kill_r+0x20>)
 80078b0:	2300      	movs	r3, #0
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	4611      	mov	r1, r2
 80078b8:	602b      	str	r3, [r5, #0]
 80078ba:	f7fa f8bd 	bl	8001a38 <_kill>
 80078be:	1c43      	adds	r3, r0, #1
 80078c0:	d102      	bne.n	80078c8 <_kill_r+0x1c>
 80078c2:	682b      	ldr	r3, [r5, #0]
 80078c4:	b103      	cbz	r3, 80078c8 <_kill_r+0x1c>
 80078c6:	6023      	str	r3, [r4, #0]
 80078c8:	bd38      	pop	{r3, r4, r5, pc}
 80078ca:	bf00      	nop
 80078cc:	2000035c 	.word	0x2000035c

080078d0 <_getpid_r>:
 80078d0:	f7fa b8aa 	b.w	8001a28 <_getpid>

080078d4 <_init>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	bf00      	nop
 80078d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078da:	bc08      	pop	{r3}
 80078dc:	469e      	mov	lr, r3
 80078de:	4770      	bx	lr

080078e0 <_fini>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	bf00      	nop
 80078e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e6:	bc08      	pop	{r3}
 80078e8:	469e      	mov	lr, r3
 80078ea:	4770      	bx	lr
